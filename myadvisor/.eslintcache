[{"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/index.js":"1","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/App.js":"2","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/sidebar.js":"3","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Main.js":"4","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseDetails.js":"5","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Career.js":"6","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseList.js":"7","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Start.js":"8","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/StudentProfile.js":"9","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/login.js":"10","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/TopBar.js":"11","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Courses.js":"12","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/StaffDashboard.js":"13","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Students.js":"14","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Reports.js":"15","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Programmes.js":"16","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Settings.js":"17","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Bot Framework/webChat.js":"18","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CareerCheck.js":"19","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullCareers.js":"20","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullCourses.js":"21","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullProgrammes.js":"22","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseNode.js":"23","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/DetailsCard.js":"24","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/NoTranscript.js":"25","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/StudentCoursesCard.js":"26","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullDetails.js":"27","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullStudentCourses.js":"28","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/CoursesTable.js":"29","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/AddCourse.js":"30","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlocks.js":"31","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/ReportsTable.js":"32","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/StudentsTable.js":"33","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Calendar.js":"34","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/ProgrammesTable.js":"35","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/SetAdvisingWindow.js":"36","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/EditCourse.js":"37","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlock.js":"38"},{"size":378,"mtime":1615323037211,"results":"39","hashOfConfig":"40"},{"size":456,"mtime":1615912878983,"results":"41","hashOfConfig":"40"},{"size":4591,"mtime":1618244214756,"results":"42","hashOfConfig":"40"},{"size":8814,"mtime":1618244214754,"results":"43","hashOfConfig":"40"},{"size":6807,"mtime":1618244214753,"results":"44","hashOfConfig":"40"},{"size":4851,"mtime":1618244214751,"results":"45","hashOfConfig":"40"},{"size":8775,"mtime":1618244214753,"results":"46","hashOfConfig":"40"},{"size":6735,"mtime":1618244214754,"results":"47","hashOfConfig":"40"},{"size":21107,"mtime":1618244214754,"results":"48","hashOfConfig":"40"},{"size":5405,"mtime":1618244214755,"results":"49","hashOfConfig":"40"},{"size":1263,"mtime":1617739457305,"results":"50","hashOfConfig":"40"},{"size":3584,"mtime":1615323037209,"results":"51","hashOfConfig":"40"},{"size":1336,"mtime":1615323037210,"results":"52","hashOfConfig":"40"},{"size":1259,"mtime":1617739457304,"results":"53","hashOfConfig":"40"},{"size":1311,"mtime":1617739457303,"results":"54","hashOfConfig":"40"},{"size":1481,"mtime":1617739457303,"results":"55","hashOfConfig":"40"},{"size":1129,"mtime":1617739457304,"results":"56","hashOfConfig":"40"},{"size":342,"mtime":1618260632272,"results":"57","hashOfConfig":"40"},{"size":917,"mtime":1618244214752,"results":"58","hashOfConfig":"40"},{"size":618,"mtime":1615776866263,"results":"59","hashOfConfig":"40"},{"size":618,"mtime":1615776866263,"results":"60","hashOfConfig":"40"},{"size":627,"mtime":1617739457302,"results":"61","hashOfConfig":"40"},{"size":2219,"mtime":1618244214753,"results":"62","hashOfConfig":"40"},{"size":7793,"mtime":1618244214753,"results":"63","hashOfConfig":"40"},{"size":2655,"mtime":1617739457302,"results":"64","hashOfConfig":"40"},{"size":1554,"mtime":1617739457305,"results":"65","hashOfConfig":"40"},{"size":661,"mtime":1615858598291,"results":"66","hashOfConfig":"40"},{"size":677,"mtime":1615858598291,"results":"67","hashOfConfig":"40"},{"size":4304,"mtime":1617739457303,"results":"68","hashOfConfig":"40"},{"size":5317,"mtime":1617739457302,"results":"69","hashOfConfig":"40"},{"size":1948,"mtime":1617739457303,"results":"70","hashOfConfig":"40"},{"size":3360,"mtime":1617739457304,"results":"71","hashOfConfig":"40"},{"size":6999,"mtime":1617739457304,"results":"72","hashOfConfig":"40"},{"size":1394,"mtime":1616526187361,"results":"73","hashOfConfig":"40"},{"size":5611,"mtime":1617739457303,"results":"74","hashOfConfig":"40"},{"size":3329,"mtime":1617739457304,"results":"75","hashOfConfig":"40"},{"size":4500,"mtime":1615323037210,"results":"76","hashOfConfig":"40"},{"size":564,"mtime":1615323037210,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"8hlocg",{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"80"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"80"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"80"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"80"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"80"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/index.js",[],["178","179"],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/App.js",["180","181"],"import { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport Main from './components/Main';\n\nimport './App.css';\nimport PermanentDrawerRight from \"./components/sidebar\";\n\nfunction App () {\n\n  return (\n      <Router>\n        <Switch>\n          <Route\n            path=\"/\"\n            render={(props) => <Main {...props} />}\n          />\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/sidebar.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Main.js",["182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199"],"import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\n\n//Student Imports\nimport StudentProfile from './StudentProfile';\nimport CourseList from './CourseList';\nimport CourseDetails from './CourseDetails';\nimport Career from './Career';\nimport Start from './Start';\nimport PermanentDrawerRight from \"./sidebar\";\n\n//Staff Imports\nimport StaffDashboard from './Staff/StaffDashboard';\nimport StaffCourses from './Staff/Courses';\nimport Students from './Staff/Students';\nimport Settings from './Staff/Settings';\nimport Reports from './Staff/Reports';\nimport Programmes from './Staff/Programmes';\n\n//Global Imports\nimport \"../App.css\"\nimport \"../assets/css/Staff.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Login from \"./login\";\nimport TopBar from '../components/TopBar';\nimport ReactWebChat from \"../components/Bot Framework/webChat\";\n\nfunction Main() {\n  const [isAuthenticated, setIsAuthenticated] = useState(localStorage.getItem(\"auth\"));\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\n  const [recCourses, setRecCourses] = useState(null);\n  const [careerRecCourses, setCareerRecCourses] = useState(null);\n  const [chosenCourses, setChosenCourses] = useState([]);\n  const [show, setShow] = useState(true);\n  const [progress, setProgress] = useState(0);\n  const [degProgress, setDegProgress] = useState(0);\n  const [credits, setCredits] = useState(0);\n  const [hide, setHide] = useState(false);\n  const [showBackBtn, setShowBackBtn] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const [year, setYear] = useState(1);\n  const [warning, setWarning] = useState(false);\n\n  const setAuth = (boolean) => {\n    setIsAuthenticated(boolean);\n  };\n\n  const setType = (value) => {\n    setUser(value);\n  };\n\n  const setRecommended = (value) => {\n    setRecCourses(value);\n  };\n\n  const setCareerRecommended = (value) => {\n    setCareerRecCourses(value);\n  };\n\n  const setDisplay = (value) => {\n    setShow(value);\n  };\n\n  const setProg = (value) => {\n    setProgress(value);\n  };\n\n  const setDegProg = (value) => {\n    setDegProgress(value);\n  };\n\n  const setCreds = (value) => {\n    setCredits(value);\n  };\n\n  const setHidden = (value) => {\n    setHide(value);\n  };\n\n  const setShowBack = (value) => {\n    setShowBackBtn(value);\n  };\n\n  const setLoad = (value) => {\n    setLoading(value);\n  };\n\n  const setLevel = (value) => {\n    setYear(value);\n  };\n\n  const setAcWarning = (value) => {\n    setWarning(value);\n  };\n\n  const setChosen = (value) => {\n    setChosenCourses(value);\n  };\n\n  return (\n    <div className=\"main-panel\">\n      {user ? <TopBar hide={hide}></TopBar> : null}\n      {user == \"student\" ? <PermanentDrawerRight hide={hide} recCourses={recCourses} progress={progress} degProgress={degProgress} credits={credits} show={show} setDisplay={setDisplay} loading={loading} warning={warning}/> : null}\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return(<Redirect to=\"/home\"/>)\n              } else if (isAuthenticated && user==\"admin\"){\n                return(<Redirect to=\"/staff\"/>)\n              } else {\n                return(<Redirect to=\"/login\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/login\"\n          render={(props) =>\n            {\n              if(!isAuthenticated){\n                return <Login {...props} setAuth={setAuth} setType={setType}/>\n              } else if (isAuthenticated && user==\"admin\"){\n                return(<Redirect to=\"/staff\" />)\n              } else if (isAuthenticated && user==\"student\"){\n                return(<Redirect to=\"/home\" />)\n              }\n            }\n          }\n        />\n\n        {/*Student Routes*/}\n\n        <Route\n          exact\n          path=\"/home\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <StudentProfile {...props} setRecommended={setRecommended} setDisplay={setDisplay} setProg={setProg} setDegProg={setDegProg} setCreds={setCreds} setHidden={setHidden} setLoad={setLoad} setLevel={setLevel} setAcWarning={setAcWarning} recCourses={recCourses}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/courses\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <CourseList {...props} setProg={setProg} setHidden={setHidden} setDisplay={setDisplay} setChosen={setChosen} showBackBtn={showBackBtn} recCourses={recCourses} careerRecCourses={careerRecCourses} chosenCourses={chosenCourses}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/coursedetails\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <CourseDetails {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/career\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <Career {...props} setDisplay={setDisplay} setProg={setProg} setCareerRecommended={setCareerRecommended} year={year} recCourses={recCourses}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/start\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <Start {...props} setHidden={setHidden} setDegProg={setDegProg} setCreds={setCreds} setShowBack={setShowBack} setRecommended={setRecommended} recCourses={recCourses}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />   \n\n        {/*Bot Route*/}\n        <Route\n          exact\n          path=\"/bot\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return (\n                <div className=\"row\">\n                  <div className=\"col-sm-10\">\n                    <ReactWebChat {...props} />\n                  </div>\n                </div>\n               )\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />  \n\n\n        {/*Staff Routes*/}\n        <Route\n          exact\n          path=\"/staff\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <StaffDashboard {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />        \n\n        <Route\n          exact\n          path=\"/staff/courses\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <StaffCourses {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/staff/programmes\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <Programmes {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/staff/students\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <Students {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/staff/settings\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <Settings {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n        \n        <Route\n          exact\n          path=\"/staff/reports\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <Reports {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />                        \n\n\n\n\n      </Switch>\n\n    </div>\n  );\n}\n\nexport default Main;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseDetails.js",["200","201","202","203"],"import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom'\nimport axios from \"axios\";\n\nclass CourseDetails extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            courseCareers: []\n        }\n        this.getCourseCareers = this.getCourseCareers.bind(this);\n        this.determineCourseCareers = this.determineCourseCareers.bind(this);\n    }\n\n    componentDidMount() {\n        this.determineCourseCareers();\n    }\n\n    async getCourseCareers(id) {\n        try {\n            const {data:response} = await axios.get(`/courses/careers/${id}`) //use data destructuring to get data from the promise object\n            return response\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n\n    async determineCourseCareers() {\n        var courseCareers = [];\n        courseCareers = await this.getCourseCareers(this.props.location.state.course.id);\n        this.setState({\n            courseCareers: courseCareers\n        });\n    }\n\n    render() {\n\n        const prereqs = () => {\n            var prereq = this.props.location.state.course.prerequisites;\n            if (prereq.length > 8) {\n                if (prereq.charAt(9) == \"|\") {\n                    prereq = prereq.slice(0, 8) + \" OR \" + prereq.slice(-8);\n                }\n                if (prereq.charAt(9) == \"&\") {\n                    prereq = prereq.slice(0, 8) + \" AND \" + prereq.slice(-8);\n                }\n            }\n            return prereq;\n        }\n\n    return (\n      <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <p className=\"header blue-txt\">Select Courses</p>\n                        <div className=\"card details-card\">\n                            <div className=\"card-body\">\n                                <p className=\"course-code blue-txt\">{this.props.location.state.course.courseCode}</p>\n                                <p className=\"course-title\">{this.props.location.state.course.courseTitle}</p>\n                                <div className=\"prereqs\">\n                                    <span className=\"prereq-header blue-txt\">Pre-requisites: </span>\n                                    <span className=\"prereq-courses\">{prereqs()}</span>\n                                </div>\n                                <div className=\"career\">\n                                    <span className=\"career-header blue-txt\">Career Tags: </span>\n                                    {\n                                        Array.from({ length: this.state.courseCareers.length }, (_, k) => {\n                                            if (k !== this.state.courseCareers.length-1 )\n                                                return <span className=\"career-tags\">{this.state.courseCareers[k]}, </span>\n                                            else \n                                                return <span className=\"career-tags\">{this.state.courseCareers[k]}</span>\n                                        }) \n                                    }\n                                </div>\n                                <p className=\"course-desc\">{this.props.location.state.course.description}</p>\n                                <p className=\"assessment-header blue-txt\">Assessment</p>\n                                {this.props.location.state.course.coursework != null ? (\n                                    <div className=\"row assessment\">\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-type\">Coursework:</p>\n                                        </div>\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.coursework}</p>\n                                        </div>\n                                    </div> ) : null\n                                }\n                                {this.props.location.state.course.finalExam != null ? (\n                                    <div className=\"row assessment\">\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-type\">Final Exam:</p>\n                                        </div>\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.finalExam}</p>\n                                        </div>\n                                    </div> ) : null\n                                }\n                                {this.props.location.state.course.individualProjectPres != null ? (\n                                    <div className=\"row assessment\">\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-type\">Individual Project Presentation:</p>\n                                        </div>\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.individualProjectPres}</p>\n                                        </div>\n                                    </div> ) : null\n                                }\n                                {this.props.location.state.course.groupProjectPres != null ? (\n                                    <div className=\"row assessment\">\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-type\">Group Project Presentation:</p>\n                                        </div>\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.groupProjectPres}</p>\n                                        </div>\n                                    </div> ) : null\n                                }\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-2\">\n                                <Link to=\"/courses\">\n                                    <button type=\"button\" class=\"btn btn-custom back-button blue-button\">Back</button>\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n      </div>\n    );\n  }\n}\n\nexport default CourseDetails;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Career.js",["204"],"import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CareerCheck from './CareerCheck';\nimport \"../assets/css/Career.css\";\nimport { Link } from 'react-router-dom'\nimport PullCareers from \"./PullCareers\";\nimport axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Career = (props) => {\n\n  const [careerList, setCareerList] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  var careers = PullCareers();\n  const history = useHistory();\n  props.setDisplay(false);\n  props.setProg(40);\n  if (props.recCourses === null) {\n    history.push({\n      pathname: '/home'\n    })\n  }\n\n  function onChange(event) { \n    var careerArray = careerList;\n    if (event.currentTarget.checked === true) {\n      careerArray.push(event.currentTarget.value);\n    }\n    else {\n      var index = careerArray.indexOf(event.currentTarget.value);\n      if (index > -1) {\n        careerArray.splice(index, 1);\n      }\n    }\n    setCareerList(careerArray);\n  }\n\n  function onClick() {\n    setLoading(true);\n    determineCourses(careerList);\n  }\n\n  async function getCareerCourses(id) {\n    try {\n      const {data:response} = await axios.get(`/careers/courses/${id}`) //use data destructuring to get data from the promise object\n      return response\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function determineCourses(careerArray){\n\n      var recCourses = [];\n      var today = new Date();\n      var currentSem;\n      var level;\n      \n      if (today.getMonth() < 4) {\n          currentSem = \"2\";\n      }\n      else if (today.getMonth() < 6) {\n          currentSem = \"3\";\n      }\n      else {\n          currentSem = \"1\";\n      }\n\n      if (props.year === 1) {\n        level = \"I\";\n      }\n      else if (props.year === 2) {\n        level = \"II\";\n      }\n      else if (props.year === 3) {\n        level = \"III\"\n      }\n      else {\n        level = \"I\";\n      }\n\n      for (var i=0; i<careerArray.length; i++) {\n        var courses = await getCareerCourses(careerArray[i]);\n        for (var j=0; j<courses.length; j++) {\n          if (courses[j].semester === currentSem && courses[j].level === level) {\n            recCourses.push(courses[j].courseCode);\n          }\n        }\n    }\n    props.setCareerRecommended(recCourses);\n    \n    history.push({\n      pathname: '/courses'\n    })\n\n  }\n\n\n  return (\n    <div className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-sm-10\">\n                <p className=\"header blue-txt\">Career Path</p>\n                  <form>\n                    <div className=\"card details-card outer-card\">\n                      <div className=\"card-body career-card custom-scroll\">\n                        <p className=\"career-card-text\">Select any career paths you may be interested in pursuing</p>\n                          <table class=\"table table-borderless table-striped\">\n                            <thead>\n                                <tr class=\"d-flex blue-txt\">\n                                    <th class=\"col-3 name-header\">Career Title</th>\n                                    <th class=\"col-9 desc-header\">Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                              <CareerCheck careers={careers} onChange={onChange}></CareerCheck>\n                            </tbody>\n                          </table>\n                        </div>\n                    </div>\n                    <div className=\"row button-row\">\n                      <div className=\"col-sm-2\">\n                        <Link to=\"/home\">\n                          <button type=\"submit\" class=\"btn btn-custom back-button blue-button\">Back</button>\n                        </Link>\n                      </div>\n                      { loading ? (\n                        <div className=\"col-sm-2\">\n                          <CircularProgress className=\"circ-prog career-prog\" size={30}/>\n                        </div>\n                      ) : (null)}\n                      { loading ? (\n                        <div className=\"col-sm-2 offset-sm-6\">\n                          <button type=\"button\" class=\"btn btn-custom next-button blue-button\" onClick={onClick}>Next</button>\n                        </div> ) : (\n                        <div className=\"col-sm-2 offset-sm-8\">\n                          <button type=\"button\" class=\"btn btn-custom next-button blue-button\" onClick={onClick}>Next</button>\n                        </div>\n                        ) }\n                    </div>\n                  </form>\n                </div>\n              </div>\n          </div>\n    </div>\n  );\n}\n\nexport default Career;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseList.js",["205","206","207","208","209"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport CourseNode from './CourseNode'\nimport PullCourses from \"./PullCourses\";\nimport \"../assets/css/Courses.css\";\nimport CourseDetails from \"./CourseDetails\";\nimport { Link } from 'react-router-dom'\n\nconst CourseList = (props) => { \n    const [clicked, setClicked] = useState(false);\n    const [course, setCourse] = useState(null);\n    const [all, setAll] = useState(true);\n    const [core, setCore] = useState(false);\n    const [career, setCareer] = useState(false);\n    const [chosen, setChosen] = useState(false);\n    const [chosenList, setChosenList] = useState([]);\n\n    const history = useHistory();\n\n    const nodeClickHandler = (course) => {\n      setClicked(true)\n      setCourse(course)\n    }\n \n    var courses = PullCourses();\n\n    let recCourses = undefined;\n    let careerRecCourses = undefined;\n    \n    if (props.recCourses) {\n      recCourses = props.recCourses;\n    }\n    else {\n      history.push({\n        pathname: '/home'\n      })\n    }\n\n    if (props.careerRecCourses) {\n      careerRecCourses = props.careerRecCourses;\n    }\n    else {\n      careerRecCourses = [];\n    }\n\n    useEffect(() => {\n      props.setProg(60);\n      props.setHidden(false);\n      props.setDisplay(false);\n    })\n\n    function allClick() {\n      if (core || career || chosen) {\n        setAll(true);\n        setCore(false);\n        setCareer(false);\n        setChosen(false);\n      }\n    }\n\n    function coreClick() {\n      if (all || career || chosen) {\n        setAll(false);\n        setCore(true);\n        setCareer(false);\n        setChosen(false);\n      }\n    }\n\n    function careerClick() {\n      if (core || all || chosen) {\n        setAll(false);\n        setCore(false);\n        setCareer(true);\n        setChosen(false);\n      }\n    }\n\n    function chosenClick() {\n      if (core || all || career) {\n        setAll(false);\n        setCore(false);\n        setCareer(false);\n        setChosen(true);\n      }\n    }\n\n    function onChange(event) { \n      var chosenArray = props.chosenCourses;\n      var clear = false;\n      if (event.currentTarget.checked === true) {\n        chosenArray.push(event.currentTarget.value);\n      }\n      else {\n        while (!clear) {\n          var index = chosenArray.indexOf(event.currentTarget.value);\n          if (index > -1) {\n            chosenArray.splice(index, 1);\n          }\n          else {\n            clear = true;\n          }\n        }\n        clear = false;\n      }\n      setChosenList(chosenArray);\n      props.setChosen(chosenArray);\n    }\n\n    return (\n      <div className=\"content\">\n            <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-sm-10\">\n                <p className=\"header blue-txt\">Select Courses</p>\n                <div className=\"card details-card outer-card\">\n                    <div className=\"card-body\">\n                        <p className=\"courselist-card-text\">Click on a course to see more details</p>\n                        <p className=\"courselist-card-text\">Check the Add box if you are interested in pursuing a course</p>\n                        <div className=\"row tab-group\">\n                          { all ? (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={allClick}>All Courses</button>\n                            </div> ) : (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={allClick}>All Courses</button>\n                            </div>\n\n                          ) }\n                          { core ? (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={coreClick}>Core Courses</button>\n                            </div> ) : ( \n                            \n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={coreClick}>Core Courses</button>\n                            </div>\n\n                          ) }\n                          { career ? (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={careerClick}>Career Specific Courses</button>\n                            </div> ) : (\n\n                            <div className=\"col-sm-3\">\n                             <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={careerClick}>Career Specific Courses</button>\n                            </div>\n                          ) }\n                          { chosen ? (\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={chosenClick}>Your Chosen Courses</button>\n                            </div> ) : (\n\n                            <div className=\"col-sm-3\">\n                            <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={chosenClick}>Your Chosen Courses</button>\n                            </div>\n                          ) }\n                        </div>\n                        <div className=\"card courselist-card custom-scroll\">\n                            <div className=\"card-body\">{\n                              all ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (recCourses.includes(courses[k].courseCode)) {\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : core ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (recCourses.includes(courses[k].courseCode) && courses[k].type === \"Core\") {\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : career ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (careerRecCourses.includes(courses[k].courseCode)) {\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : chosen ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (props.chosenCourses.includes(courses[k].courseCode)) {\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : (null)\n                            }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                { props.showBackBtn ? (\n                  <div className=\"row button-row\">\n                      <div className=\"col-sm-2\">\n                        <Link to=\"/career\">\n                          <button type=\"submit\" class=\"btn btn-custom back-button blue-button\">Back</button>\n                        </Link>\n                      </div>          \n                      <div className=\"col-sm-2 offset-sm-8\">\n                      <Link to=\"/bot\">\n                        <button type=\"submit\" class=\"btn btn-customnext-button blue-button\">Next</button>\n                        </Link>\n                      </div>\n                  </div>\n                ) : (\n                  <div className=\"row button-row\">        \n                      <div className=\"col-sm-2 offset-sm-8\">\n                        <Link to=\"/bot\">\n                          <button type=\"submit\" class=\"btn btn-custom next-button blue-button\">Next</button>\n                        </Link>\n                      </div>\n                  </div>\n                ) }\n            </div>\n            </div>\n            </div>\n      </div>\n    );\n  \n}\n\nexport default CourseList;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Start.js",["210","211","212"],"import React, { Component } from \"react\";\nimport \"../assets/css/Start.css\";\nimport { Link } from 'react-router-dom'\nimport { useEffect, useState } from \"react\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport { useHistory } from 'react-router-dom';\nimport axios from \"axios\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Start = (props) => { \n\n    const [radio, setRadio] = useState(null);\n    const [programme, setProgramme] = useState(\"None\");\n    const [loading, setLoading] = useState(false);\n\n    props.setHidden(true);\n    var programmes = PullProgrammes();\n\n    const history = useHistory();\n\n    const onClickFunction = () => {\n        setLoading(true);\n        for (var i=0; i<programmes.length; i++) {\n            if (programmes[i].name == programme) {\n                var programmeId = programmes[i].id;\n            }\n        }\n        if (programmeId) {\n            determineCourses(programmeId);\n        }\n    }\n\n    async function getProgrammeCourses(id) {\n        try {\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    async function determineCourses(programmeId){\n\n        var recCourses = [];\n        var today = new Date();\n        var currentSem;\n        \n        if (today.getMonth() < 4) {\n            currentSem = \"2\";\n        }\n        else if (today.getMonth() < 6) {\n            currentSem = \"3\";\n        }\n        else {\n            currentSem = \"1\";\n        }\n\n        var courses = await getProgrammeCourses(programmeId);\n\n        for (var i=0; i<courses.length; i++) {\n            if (courses[i].type === \"Core\" && courses[i].semester === currentSem && courses[i].level === \"I\") {\n                recCourses.push(courses[i].courseCode);\n            }\n        }\n\n        props.setRecommended(recCourses);\n    \n        history.push({\n            pathname: '/courses'\n        })\n        \n    }\n\n\n    function onRadioChange(event) { \n        setRadio(event.currentTarget.value);\n        if (event.currentTarget.value === \"new\") {\n            props.setDegProg(0);\n            props.setCreds(93);\n            props.setShowBack(false);\n        }\n    }\n\n    function onSelectChange(event) { \n        setProgramme(event.currentTarget.value);\n    }\n\n \n    return (\n        <div className=\"content\">\n                <div className=\"container-fluid\">\n                    <div className=\"header\">\n                        <p className=\"welcome blue-txt\">Welcome to myAdvisor</p>\n                        <p className=\"started blue-txt\">Let's get started.</p>\n                    </div>\n                    <div className=\"card start-card\">\n                        <div className=\"card-body\">\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"studentRadio\" id=\"studentRadiosCont\" value=\"cont\"  onChange={onRadioChange}/>\n                                <label class=\"form-check-label\" for=\"studentRadiosCont\">\n                                    I am a continuing student\n                                </label>\n                            </div>\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"studentRadio\" id=\"studentRadiosNew\" value=\"new\"  onChange={onRadioChange}/>\n                                <label class=\"form-check-label new-label\" for=\"studentRadiosNew\">\n                                    I am a new student in my first semester of my programme\n                                </label>\n                                { radio === \"new\" ? (\n                                    <div className=\"row select-row\">\n                                        <div className=\"col-sm-6\">\n                                            <div class=\"form-group\">\n                                                <select class=\"form-control\" id=\"exampleFormControlSelect1\" onChange={onSelectChange}>\n                                                <option value=\"None\">Select your programme</option>\n                                                {\n                                                 Array.from({ length: programmes.length }, (_, k) => {\n                                                    return <option value={programmes[k].name}>{programmes[k].name}</option> \n                                                })}\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    ) : (null) }\n                            </div>\n                           \n                        </div>\n                        <div className=\"row\">\n                        { radio === \"new\" && programme !== \"None\" ? (\n\n                                <div className=\"col-sm-2\">\n                                    <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\" onClick={onClickFunction}>Next</button>\n                                </div>\n                            ) :\n\n                            radio === \"new\" && programme === \"None\" ? (\n                            <div className=\"col-sm-2\">\n                                <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\n                            </div>) : \n                            \n                            radio === \"cont\" ? (\n                              <div className=\"col-sm-2\">\n                                <Link to=\"/home\">\n                                  <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\n                                </Link>\n                              </div>\n                            ) : \n\n                            (\n                              <div className=\"col-sm-2\">\n                                  <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\n                              </div>\n                            )\n                        }\n                        { loading ? (\n                            <div className=\"col-sm-2\">\n                                <CircularProgress className=\"circ-prog start-prog\" size={30}/>\n                            </div>\n                        ) : (null)\n                        }\n                        </div>\n                    </div>\n                </div>\n        </div>\n        );\n    \n}\n\nexport default Start;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/StudentProfile.js",["213","214","215","216"],"import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"../assets/css/StudentProfile.css\"\nimport DetailsCard from \"./DetailsCard\";\nimport NoTranscript from \"./NoTranscript\";\nimport PullDetails from \"./PullDetails\";\nimport PullStudentCourses from \"./PullStudentCourses\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport StudentCoursesCard from \"./StudentCoursesCard\";\nimport axios from \"axios\"\n\nconst StudentProfile = (props) => {\n\n    const [uploaded, setUploaded] = useState(true);\n    const [processed, setProcessed] = useState(false);\n   \n\n\n    function uploadedHandler() {\n        window.location.reload();\n    }\n\n    var details = PullDetails(localStorage.getItem(\"username\"));\n    var studentCourses = PullStudentCourses(localStorage.getItem(\"username\"));\n    var programmes = PullProgrammes();\n \n    useEffect(() => {\n        props.setDisplay(true);\n        props.setHidden(false);\n        if (!processed) {\n            if (details.gpa < 2.0 && details.gpa != 0) {\n                props.setAcWarning(true);\n            }\n            if (details.length === 0) {\n                setUploaded(false);\n                props.setDegProg(0);\n                props.setCreds(93);\n            }\n            else {\n                setUploaded(true);\n                props.setDegProg(details.progress);\n                props.setCreds(93 - details.credits);\n            }\n            if (details.degree === \"Comp Science (Special) BSC S\") {\n                var studentProgramme = \"Computer Science (Special)\"\n                for (var i=0; i<programmes.length; i++) {\n                    if (programmes[i].name == studentProgramme) {\n                        var programmeId = programmes[i].id;\n                    }\n                }\n                if (programmeId) {\n                    determineCourses(programmeId)\n                }\n            }\n        }\n    })\n\n    async function getCourses() {\n        try {\n          const {data:response} = await axios.get('/courses/all') //use data destructuring to get data from the promise object\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    async function getProgrammeCourses(id) {\n        try {\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    let noCreditGrade = [\"F1\", \"F2\", \"F3\", \"DIS\", \"EI\", \"FA\", \"FAS\", \"FC\", \"FE\", \"FO\", \"FP\", \"FT\", \"FWS\", \"FTS\", \"AB\", \"AM\", \"AMS\", \"DB\", \"DEF\", \"EQ\", \"FM\", \"FMS\", \"FWR\", \"I\", \"LW\", \"NCR\", \"NFC\", \"NP\", \"NR\", \"NV\", \"W\"]\n\n    \n    function splitBySem(coreRes, courses) {\n        var semesterArr = [[]];\n        for (var key in coreRes) {\n            for (var i=0; i<courses.length; i++) {\n                if (key === courses[i].courseCode) {\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"I\")) {\n                        if (!semesterArr[0]) {\n                            semesterArr[0] = [];\n                        }\n                        semesterArr[0].push({\n                            courseCode: key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"I\")) {\n                        if (!semesterArr[1]) {\n                            semesterArr[1] = [];\n                        }\n                        semesterArr[1].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"II\")) {\n                        if (!semesterArr[2]) {\n                            semesterArr[2] = [];\n                        }\n                        semesterArr[2].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"II\")) {\n                        if (!semesterArr[3]) {\n                            semesterArr[3] = [];\n                        }\n                        semesterArr[3].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"III\")) {\n                        if (!semesterArr[4]) {\n                            semesterArr[4] = [];\n                        }\n                        semesterArr[4].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"III\")) {\n                        if (!semesterArr[5]) {\n                            semesterArr[5] = [];\n                        }\n                        semesterArr[5].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                }\n            }\n        }\n        return semesterArr;\n    }\n\n    function getCoreCourses(courses) {\n        var core = [];\n        for (var i=0; i<courses.length; i++) {\n            if (courses[i].type === \"Core\") {\n                core.push(courses[i]);\n            }\n        }\n        return core;\n    }\n\n    function recommendCoreCourses(coreSemesterArr, year, currentSem, courses) {\n        var coreY1S1 = coreSemesterArr[0]; // Core courses offered in Year 1 Semester 1\n        var coreY1S2 = coreSemesterArr[1];\n        var coreY2S1 = coreSemesterArr[2];\n        var coreY2S2 = coreSemesterArr[3];\n        var coreY3S1 = coreSemesterArr[4];\n        var coreY3S2 = coreSemesterArr[5];\n        var recCourses = courses;\n        var key;\n\n        if (year === 1 && currentSem === 1) { //If student is in Year 1 Semester 1\n            for (key in coreY1S1) { // Iterate core courses offered in year 1 semester 1\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") { // If course has not been done before or student failed it in the past\n                    if (!courses.includes(coreY1S1[key].courseCode)) // If course wasn't already recommended\n                        recCourses.push(coreY1S1[key].courseCode) // Add course to recommended course array\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) { // Look for courses being offered in Year 1 Semester 1 that student didnt do or failed\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in coreY3S1) {\n                if (coreY3S1[key].grade === \"N\" || coreY3S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S1[key].courseCode))\n                        recCourses.push(coreY3S1[key].courseCode)\n                }\n            }\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) {\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in coreY3S2) {\n                if (coreY3S2[key].grade === \"N\" || coreY3S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S2[key].courseCode))\n                        recCourses.push(coreY3S2[key].courseCode)\n                }\n            }\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        return recCourses;\n    }\n\n    function removeCoursesNoPrereq(recCourses, courses, studentCourses) {\n        var index;\n        for (var i=0; i<courses.length; i++) {\n            if(recCourses.includes(courses[i].courseCode)) {\n                var prereq = courses[i].prerequisites;\n                if (prereq.length === 8) {\n                    if (!(studentCourses[prereq] === \"P\")) {\n                        index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                    }\n                }\n                if (prereq.length > 8) {\n                    var prereq1 = prereq.slice(0, 8);\n                    var prereq2 = prereq.slice(-8);\n                    if (prereq.charAt(9) === \"|\") {\n                        if (!((studentCourses[prereq1] === \"P\") || (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                    if (prereq.charAt(9) === \"&\") {\n                        if (!((studentCourses[prereq1] === \"P\") && (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function determineStudentCourses(core) {\n        var coreRes = {};\n        for (var i=0; i<core.length; i++){\n            for (var j=0; j<studentCourses.length; j++) {\n                if ((studentCourses[j].courseCode === core[i].courseCode) && (studentCourses[j].grade === \"IP\")){\n                    coreRes[`${core[i].courseCode}`] = \"IP\";\n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && !(noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"P\";\n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && (noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"F\";\n                }\n                else {\n                    if (!coreRes[`${core[i].courseCode}`]) {\n                        coreRes[`${core[i].courseCode}`] = \"N\";\n                    }\n                }\n            }\n        }\n        return coreRes;\n    }\n\n    async function determineCourses(programmeId){\n        \n        let Y1S1 = {}; // List of all courses for Year 1 Semester 1\n        let Y1S2 = {}; // List of all courses for Year 1 Semester 2\n        let Y2S1 = {}; // List of all courses for Year 2 Semester 1\n        let Y2S2 = {}; // List of all courses for Year 2 Semester 2\n        let Y3S1 = {}; // List of all courses for Year 3 Semester 1\n        let Y3S2 = {}; // List of all courses for Year 3 Semester 2\n        var programmeCourses = {};\n        var semesterArr = [];\n        var coreSemesterArr = [];\n        var today = new Date();\n        var currentSem;\n\n        //var courses = await getCourses();\n        var courses = await getProgrammeCourses(programmeId);\n\n        \n        for (var i=0; i<courses.length; i++) { // Initialise Courses for Degree using thier Level and Semester\n            if (courses[i].level === \"I\") {\n                if (courses[i].semester === \"1\") {\n                    Y1S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y1S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"II\") {\n                if (courses[i].semester === \"1\") {\n                    Y2S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y2S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"III\") {\n                if (courses[i].semester === \"1\") {\n                    Y3S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y3S2[courses[i].courseCode] = \"N\";\n                }\n            }\n        }\n\n        programmeCourses = determineStudentCourses(courses);\n        semesterArr = splitBySem(programmeCourses, courses);\n        var coreCourses = getCoreCourses(courses);\n        coreSemesterArr = splitBySem(programmeCourses, coreCourses);\n\n        var recCourses = [];\n        var counter = 0;\n        var year = 1;\n        var sem = 1;\n        var key;\n\n        \n        Y1S1 = semesterArr[0];\n        Y1S2 = semesterArr[1];\n        Y2S1 = semesterArr[2];\n        Y2S2 = semesterArr[3];\n        Y3S1 = semesterArr[4];\n        Y3S2 = semesterArr[5];\n\n        counter = 0;\n        for (key in Y1S1) {\n            if (Y1S1[key].grade === \"P\" || Y1S1[key].grade === \"F\" || Y1S1[key].grade === \"IP\") {\n                counter+=1;\n            }\n        }\n        if (counter > 1) {\n            sem = 2;\n        }\n        counter = 0;\n        if (year === 1 && sem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"P\" || Y1S2[key].grade === \"F\" || Y1S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"P\" || Y2S1[key].grade === \"F\" || Y2S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"P\" || Y2S2[key].grade === \"F\" || Y3S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 3;\n            }\n        }\n        counter = 0;\n        if (year === 3 && sem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"P\" || Y3S1[key].grade === \"F\" || Y3S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n\n        if (today.getMonth() < 4) {\n            currentSem = 2;\n        }\n        else if (today.getMonth() < 6) {\n            currentSem = 3;\n        }\n        else {\n            currentSem = 1;\n        }\n\n        if (year === 1 && currentSem === 1) {\n            for (key in Y1S1) {\n                if (Y1S1[key].grade === \"N\") {\n                    recCourses.push(Y1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"N\") {\n                    recCourses.push(Y1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"N\") {\n                    recCourses.push(Y2S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"N\") {\n                    recCourses.push(Y2S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"N\") {\n                    recCourses.push(Y3S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in Y3S2) {\n                if (Y3S2[key].grade === \"N\") {\n                    recCourses.push(Y3S2[key].courseCode)\n                }\n            }\n        }\n\n        recCourses = recommendCoreCourses(coreSemesterArr, year, currentSem, recCourses);\n        removeCoursesNoPrereq(recCourses, courses, programmeCourses);\n        props.setRecommended(recCourses);\n        props.setLevel(year);\n        if (props.recCourses !== null) {\n            props.setLoad(false);\n        }\n        setProcessed(true);\n    }\n\n \n\n    return (\n        <div className=\"content\">\n                <div className=\"container-fluid\">\n                <div className=\"row\">\n                        <div className=\"col-sm-10\">\n                    <p className=\"header blue-txt\">Student Details</p>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            { uploaded ? (\n                                <DetailsCard details={details} uploadedHandler={uploadedHandler} setProg={props.setProg}></DetailsCard> ) : (\n                                <NoTranscript uploadedHandler={uploadedHandler} setProg={props.setProg}></NoTranscript>\n                            ) }\n                        </div>\n                    </div>\n                    <p className=\"header blue-txt\">Courses Completed</p>\n                     { uploaded ? (\n                        <StudentCoursesCard courses={studentCourses}></StudentCoursesCard> ) : (\n                        <div className=\"card details-card\">\n                            <div className=\"card-body\">\n                                <table class=\"table table-borderless table-striped\">\n                                    <thead>\n                                        <tr class=\"d-flex blue-txt\">\n                                            <th class=\"col-1 level-cell\">Level</th>\n                                            <th class=\"col-2 code-cell\">Course Code</th>\n                                            <th class=\"col-8 title-cell\">Course Title</th>\n                                            <th class=\"col-1 credit-cell\">Grade</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                        )\n                     } \n                     </div>\n                     </div>                 \n                </div>\n        </div>\n    );\n\n}\n\nexport default StudentProfile;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/login.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/TopBar.js",["217","218"],"import React, { useState } from \"react\";\nimport { Link, Redirect } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Nav, Navbar, Button } from 'react-bootstrap';\n\nfunction TopBar(props) {\n\n  function logOut(){\n    localStorage.clear();\n    window.location.reload(false);\n  }\n\n  const user = localStorage.getItem(\"user\")\n\n\n\n  return (\n    <div>\n      { user === \"admin\" || props.hide ? (\n        <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand><Link to=\"/\" className=\"top-bar-text\">myAdvisor</Link></Navbar.Brand>\n          \n            <Nav className=\"ml-auto\">\n              <Button variant=\"outline-light\" onClick={logOut}>Log Out</Button>\n            </Nav>\n        \n        </Navbar>\n        ) : ( \n        <div className=\"row\">\n          <div className=\"col-sm-10\">\n            <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\">\n              <Navbar.Brand><Link to=\"/\" className=\"top-bar-text\">myAdvisor</Link></Navbar.Brand>\n              \n                <Nav className=\"ml-auto\">\n                  <Button variant=\"outline-light\" onClick={logOut}>Log Out</Button>\n                </Nav>\n            </Navbar>\n          </div>\n        </div> \n      )\n      }\n    </div>\n  );\n}\n\nexport default TopBar;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Courses.js",["219"],"import React, { useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport CoursesTable from \"./CoursesTable\";\nimport AddCourse from \"./AddCourse\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\nfunction Courses() {\n    //Add Course Modal\n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    //Table\n    const [courses, setCourses] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    //Toast\n    const notifyDelete = (text) => toast.error(text);\n\n    //Get Courses\n    async function getCourses() {\n        try {\n          const res = await fetch(\"http://localhost:5000/courses/all\", {\n            method: \"GET\",\n          });\n    \n          const parseData = await res.json();\n          setCourses(parseData);\n          setLoading(false);\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    //Delete Course\n    async function deleteCourse(courseCode) {\n        try {\n          const res = await fetch(\"http://localhost:5000/courses/delete/\" + courseCode, {\n            method: \"DELETE\",\n            headers: {\n                token: localStorage.getItem(\"token\")\n            },\n          });\n    \n            setLoading(false);\n            refreshTable();\n            notifyDelete(courseCode + \" Deleted\")\n          \n        } catch (err) {\n            notifyDelete(err.message)\n            console.error(err.message);\n        }\n    }\n\n    function confirmDelete(courseCode){\n        confirmAlert({\n          title: 'Delete Confirmation',\n          message: 'Are you sure to do delete ' + courseCode + \"?\",\n          buttons: [\n            {\n              label: 'Yes',\n              onClick: () => deleteCourse(courseCode)\n            },\n            {\n              label: 'No',\n            }\n          ]\n        });\n    };\n\n    useEffect(() => {\n        getCourses();\n    }, []);\n\n\n    function refreshTable(){\n        setLoading(true);\n        getCourses();\n    }\n\n    return (\n        <>\n            <div class=\"container\">\n                <div class=\"row mt-4\">\n                    {/* Courses Table */}\n                    <div class=\"col-10\">\n                        <div class=\"card h-100\">\n                            <div class=\"card-body shadow-sm\">\n                                <CoursesTable courses={courses} loading={loading} confirmDelete={confirmDelete} refreshTable={refreshTable}/>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Buttons */}\n                    <div class=\"col\">\n                        <button type=\"button\" class=\"btn btn-custom add-course\" onClick={handleShow}>Add Course</button>\n                    </div>\n\n                    <Modal show={show} onHide={handleClose} size=\"lg\">\n                        <Modal.Header closeButton>\n                            <Modal.Title>Add Course</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <AddCourse setShow={setShow} refreshTable={refreshTable}/>\n                        </Modal.Body>\n                    </Modal>\n                </div>\n            </div>\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default Courses;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/StaffDashboard.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Students.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Reports.js",["220","221","222"],"import React, { useState, useEffect } from \"react\";\nimport ReportsTable from './ReportsTable';\n\nfunction Reports() {\n    //Table\n    const [sessions, setSessions] = useState([\n        {studentID: 816000000, name: \"Jane Doe\", year: 1, advisingDate: \"1/1/2021\", status: \"Complete\"},\n        {studentID: 816000001, name: \"John Doe\", year: 2, advisingDate: \"1/1/2021\", status: \"Complete\"},\n        {studentID: 816000002, name: \"Jack Doe\", year: 3, advisingDate: \"1/1/2021\", status: \"Incomplete\"}\n    ]);\n    const [loading, setLoading] = useState(false);\n\n    return (\n        <>\n            <div class=\"container\">\n                <div class=\"row mt-4\">\n                    {/* Courses Table */}\n                    <div class=\"col-10\">\n                        <div class=\"card h-100\">\n                            <div class=\"card-body shadow-sm\">\n                                <ReportsTable sessions={sessions} loading={loading}/>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Buttons */}\n                    <div class=\"col\">\n                        <button type=\"button\" class=\"btn btn-custom add-course\" >Archive</button>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Reports;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Programmes.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Settings.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Bot Framework/webChat.js",["223"],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CareerCheck.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullCareers.js",["224"],"import React, { useEffect, useState } from \"react\";\n\nconst PullCareers = () => {\n    const [careers, setCareers] = useState([]);\n  \n    async function getCareers() {\n      try {\n        const res = await fetch(\"/careers/all\", {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setCareers(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get career data\n    useEffect(() => {\n      getCareers();\n    }, []);\n\n    return (\n        careers\n      );\n    };\n\nexport default PullCareers;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullCourses.js",["225"],"import React, { useEffect, useState } from \"react\";\n\nconst PullCourses = () => {\n    const [courses, setCourses] = useState([]);\n  \n    async function getCourses() {\n      try {\n        const res = await fetch(\"/courses/all\", {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setCourses(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get course data\n    useEffect(() => {\n      getCourses();\n    }, []);\n\n    return (\n        courses\n      );\n    };\n\nexport default PullCourses;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullProgrammes.js",["226"],"import React, { useEffect, useState } from \"react\";\n\nconst PullProgrammes = () => {\n    const [programmes, setProgrammes] = useState([]);\n  \n    async function getProgrammes() {\n      try {\n        const res = await fetch(`/programmes/all`, {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setProgrammes(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n\n    useEffect(() => {\n        getProgrammes();\n      }, []);\n  \n    return (\n        programmes\n      );\n    };\n\nexport default PullProgrammes;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseNode.js",["227"],"import React, { Component } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport { useEffect, useState } from \"react\";\n\nfunction CourseNode(props) {\n    const history = useHistory();\n    const [selected, setSelected] = useState(false);\n\n    const onClickFunction = () => {\n        history.push({\n            pathname: `/coursedetails`,\n            state: { course: props.course }\n          })\n    }\n                          \n    const onChange = (event) => {\n        setSelected(!selected);\n        props.onChange(event);\n    }\n    \n\n    return (\n        <div className=\"course-node\">\n            <div className=\"row\">\n                <div className=\"col-lg-9 col-sm-7\" onClick={() => onClickFunction()}>\n                    <p className=\"course-code blue-txt\">{props.course.courseCode}</p>\n                </div>\n                <div className=\"col-lg-2 col-sm-3\" onClick={() => onClickFunction()}>\n                    <p className=\"credit-header blue-txt\">Credits</p>\n                </div>\n                <div className=\"col-lg-1 col-sm-2\">\n                    <p className=\"add-header blue-txt\">Add</p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-lg-9 col-sm-7\" onClick={() => onClickFunction()}>\n                    <p className=\"course-title\">{props.course.courseTitle}</p>\n                </div>\n                <div className=\"col-lg-2 col-sm-3\" onClick={() => onClickFunction()}>\n                    <p className=\"credits\">{props.course.credits}</p>\n                </div>\n                <div className=\"col-lg-1 col-sm-2 check-div\">\n                    { props.chosen.includes(props.course.courseCode) ? (\n                        <input type=\"checkbox\" class=\"form-check-input course-check\" id={props.course.courseCode} value={props.course.courseCode} onChange={onChange} checked></input>         \n                    ) : (\n                        <input type=\"checkbox\" class=\"form-check-input course-check\" id={props.course.courseCode} value={props.course.courseCode} onChange={onChange}></input>        \n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CourseNode;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/DetailsCard.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/NoTranscript.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/StudentCoursesCard.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullDetails.js",["228","229"],"import React, { useEffect, useState } from \"react\";\n\nconst PullDetails = (studentId) => {\n    const [details, setDetails] = useState([]);\n  \n    async function getDetails() {\n      try {\n        const res = await fetch(`/transcript/details/view/${studentId}`, {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setDetails(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get student details data\n    useEffect(() => {\n      getDetails();\n    }, []);\n\n    return (\n        details\n      );\n    };\n\nexport default PullDetails;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullStudentCourses.js",["230","231"],"import React, { useEffect, useState } from \"react\";\n\nconst PullStudentCourses = (studentId) => {\n    const [courses, setCourses] = useState([]);\n  \n    async function getCourses() {\n      try {\n        const res = await fetch(`/transcript/courses/viewAll/${studentId}`, {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setCourses(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get student course data\n    useEffect(() => {\n      getCourses();\n    }, []);\n\n    return (\n        courses\n      );\n    };\n\nexport default PullStudentCourses;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/CoursesTable.js",["232","233"],"import React, { useState } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport { Modal, Button } from \"react-bootstrap\";\nimport EditCourse from \"./EditCourse\";\nimport \"../../assets/css/Staff.css\";\n\n//TABLE SETUP\n\nconst columns = [\n    { dataField: 'courseCode', text: 'Course Code', csvText: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', csvText: 'Course Title' },\n    { dataField: 'credits', text: 'Credits', csvText: 'Credits', sort: true },\n    { dataField: 'semester', text: 'Semester', csvText: 'Semester', sort: true },\n]\n\nconst defaultSorted = [{\n  dataField: 'courseCode',\n  order: 'asec'\n}];\n\nconst options = {\n  custom: true,\n  paginationSize: 5,\n  pageStartIndex: 1,\n  firstPageText: 'First',\n  prePageText: 'Back',\n  nextPageText: 'Next',\n  lastPageText: 'Last',\n  sizePerPage: 8,\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\nfunction CoursesTable({courses, loading, refreshTable, confirmDelete}) {\n\n    //Edit Course Modal\n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    const [row, setRow] = useState();\n\n    //REQUESTS\n\n    function eCourse(row) {\n      setShow(true);\n      setRow(row);\n    }\n\n    function dCourse(courseCode) {\n      confirmDelete(courseCode);\n    }\n\n    //EXPANDED TABLE ROW\n\n    const expandRow = {\n        onlyOneExpanding: true,\n        renderer: row => (\n          <div>\n            <h3>{ `${row.courseCode}` } - { `${row.courseTitle}` }</h3>\n            <br/>\n            <h4>Description</h4>\n            <p>{ `${row.description}` }</p>\n\n            <h4>Prerequisites</h4>\n            <p>{ `${row.prerequisites}` }</p>\n\n            <h4>Coursework</h4>\n            <p>{ `${row.coursework}` }</p>\n\n            <h4>Final Exam</h4>\n            <p>{ `${row.finalExam}` }</p>\n\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-custom edit-course\" onClick={() => eCourse(row)}>Edit</button>\n              <button type=\"button\" class=\"btn btn-danger delete-course\" onClick={() => dCourse(row.courseCode)}>Delete</button>\n            </div>\n          </div>\n        )\n    };\n\n    //TABLE\n\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"courseCode\"\n                    data={ courses }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                      fileName: 'courses.csv',\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } expandRow={ expandRow } defaultSorted={ defaultSorted } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n  );\n\n  return (\n      <>\n          {loading ? (\n            <div class=\"d-flex justify-content-center\">\n              <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n              { table }\n            </PaginationProvider>\n          )}\n\n          <Modal show={show} onHide={handleClose} size=\"lg\">\n              <Modal.Header closeButton>\n                  <Modal.Title>Edit Course</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                <EditCourse setShow={setShow} row={row} refreshTable={refreshTable}/>\n              </Modal.Body>\n          </Modal>\n        \n      </>\n\n  );\n}\n\nexport default CoursesTable;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/AddCourse.js",["234"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction AddCourse({setShow, refreshTable}) {\n    const [validated, setValidated] = useState(false);\n\n    //Toast\n    const notifyAdded = (text) => toast.success(text);\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        setValidated(true);\n\n        const formData = {\n            courseCode : (form.elements.courseCode.value).replace(/\\s+/g, ''),\n            courseTitle : form.elements.courseTitle.value,\n            credits : form.elements.credits.value,\n            semester : form.elements.semester.value,\n            level : form.elements.level.value,\n            prerequisites : form.elements.prerequisites.value,\n            description: form.elements.description.value,\n            coursework: String(form.elements.coursework.value) + \"%\",\n            finalExam: String(form.elements.finalExam.value) + \"%\",\n            type: form.elements.type.value\n        }\n\n        addCourse(formData)\n    };\n\n\n    async function addCourse(data) {\n        try {\n          const res = await fetch(\"http://localhost:5000/courses/add\", {\n            method: \"POST\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n    \n          setShow(false);\n          refreshTable();\n          notifyAdded(data.courseCode + \" Added!\")\n\n          const status = await res.statusText;\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    return (\n        <>\n            <Form validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"courseCode\">\n                    <Form.Label>Course Code</Form.Label>\n                    <Form.Control required type=\"text\"/>\n                </Form.Group>\n\n                <Form.Group controlId=\"courseTitle\">\n                    <Form.Label>Course Title</Form.Label>\n                    <Form.Control required type=\"text\"/>\n                </Form.Group>\n\n                <Form.Row>\n                    <Form.Group as={Col} md=\"4\" controlId=\"credits\">\n                        <Form.Label>Credits</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"4\" controlId=\"semester\">\n                        <Form.Label>Semester</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"4\" controlId=\"level\">\n                        <Form.Label>Level</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>I</option>\n                            <option>II</option>\n                            <option>III</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"coursework\">\n                        <Form.Label>Coursework</Form.Label>\n                        <Form.Control required type=\"number\" min=\"1\" max=\"100\" />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"finalExam\">\n                        <Form.Label>Final Exam</Form.Label>\n                        <Form.Control required type=\"number\" min=\"1\" max=\"100\" />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"type\">\n                        <Form.Label>Type</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>Core</option>\n                            <option>Elective</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Group controlId=\"prerequisites\">\n                    <Form.Label>Prerequisites</Form.Label>\n                    <Form.Control required type=\"text\"/>\n                </Form.Group>\n\n                <Form.Group controlId=\"description\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control required as=\"textarea\" rows={3}/>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default AddCourse;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlocks.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/ReportsTable.js",["235","236"],"import React, { useState } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\n\n\n//TABLE SETUP\n\nconst selectStatusOptions = {\n    Complete: 'Complete',\n    Incomplete: 'Incomplete'\n};\n\nconst selectYearOptions = {\n    1: '1',\n    2: '2',\n    3: '3'\n};\n\n\nconst columns = [\n    { dataField: 'studentID', text: 'Student ID', csvText: 'Student ID', sort: true },\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\n    { dataField: 'year', text: 'Year', csvText: 'Year', sort: true, \n        formatter: cell => selectYearOptions[cell],\n        filter: selectFilter({\n            options: selectYearOptions,\n        })    \n    },\n    { dataField: 'advisingDate', text: 'Advising Date', csvText: 'Advising Date', sort: true },\n    { dataField: 'status', text: 'Status', csvText: 'Status', sort: true,\n        formatter: cell => selectStatusOptions[cell],\n        filter: selectFilter({\n            options: selectStatusOptions,\n        })    \n    },\n]\n\nconst defaultSorted = [{\n    dataField: 'status',\n    order: 'asec'\n}];\n\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst selectRow = {\n    mode: 'checkbox',\n    clickToSelect: true\n};\n  \n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\nfunction ReportsTable({sessions, loading}) {\n\n    //TABLE\n\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"studentID\"\n                    data={ sessions }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                      fileName: 'report.csv',\n                      onlyExportFiltered: true, \n                      exportAll: false\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } filter={ filterFactory()} hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n        </>\n    );\n}\n\nexport default ReportsTable;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/StudentsTable.js",["237","238","239","240","241"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport { Modal, Tabs, Tab } from \"react-bootstrap\";\n\n//TABLE SETUP\n\nconst columns = [\n    { dataField: 'studentId', text: 'Student ID', csvText: 'Student ID', sort: true },\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\n    { dataField: 'gpa', text: 'GPA', csvText: 'GPA', sort: true },\n    { dataField: 'degree', text: 'Degree', csvText: 'Degree', sort: true },\n    { dataField: 'credits', text: 'Credits', csvText: 'Credits', sort: true },\n]\n\nconst coursesColumns = [\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n    { dataField: 'grade', text: 'Grade', sort: true },\n]\n\nconst inprogressCoursesColumns = [\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n]\n\nconst defaultSorted = [{\n    dataField: 'name',\n    order: 'asec'\n}];\n\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst courseOptions = {\n    sizePerPage: 8,\n    hideSizePerPage: true,\n    hidePageListOnlyOnePage: true\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\nfunction StudentsTable({students, loading}) {\n    //Modal\n    const [show, setShow] = useState(false);\n    const [studentName, setStudentName] = useState([]);\n    const [studentCourses, setStudentCourses] = useState([]);\n    const [completedCourses, setCompletedCourses] = useState([]);\n    const [inprogressCourses, setInprogressCourses] = useState([]);\n\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    const rowEvents = {\n        onClick: (e, row, rowIndex) => {\n            setStudentName(row.name);\n            getStudentCourses(row.studentId);\n        }\n    };\n\n    //Get Student Courses\n    async function getStudentCourses(studentId) {\n        try {\n            const res = await fetch(\"http://localhost:5000/transcript/courses/viewAll/\" + studentId, {\n            method: \"GET\",\n        });\n            const parseData = await res.json();\n            setStudentCourses(parseData);\n            getCompleted(parseData);\n            getInprogress(parseData);\n            setShow(true);\n            \n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    function getCompleted(data){\n        let arr = []\n\n        for (var key in data){\n            if(data[key].grade != 'IP'){\n                arr.push(data[key])\n            }\n        }\n\n        setCompletedCourses(arr);\n    }\n\n    function getInprogress(data){\n        let arr = []\n\n        for (var key in data){\n            if(data[key].grade == 'IP'){\n                arr.push(data[key])\n            }\n        }\n\n        setInprogressCourses(arr);\n    }\n\n    useEffect(() => {\n        getStudentCourses();\n    }, []);    \n\n    //TABLE\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"studentID\"\n                    data={ students }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                        fileName: 'students.csv',\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } rowEvents={ rowEvents } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n\n            <Modal show={show} onHide={handleClose} size=\"lg\">\n              <Modal.Header closeButton>\n                  <Modal.Title>{studentName}</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                <Tabs defaultActiveKey=\"completed\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"completed\" title=\"Completed\">\n                        <ToolkitProvider\n                        keyField=\"courseCode\"\n                        data={ completedCourses }\n                        columns={ coursesColumns }\n                        search\n                        >\n                        {\n                            props => (\n                            <div>\n                                <br/>\n                                <SearchBar { ...props.searchProps } />\n                                <BootstrapTable\n                                { ...props.baseProps } pagination={ paginationFactory(courseOptions) } hover\n                                />\n                            </div>\n                            )\n                        }\n                        </ToolkitProvider>                           \n                    </Tab>\n                    <Tab eventKey=\"incomplete\" title=\"Inprogress\">\n                        <ToolkitProvider\n                        keyField=\"courseCode\"\n                        data={ inprogressCourses }\n                        columns={ inprogressCoursesColumns }\n                        search\n                        >\n                        {\n                            props => (\n                            <div>\n                                <br/>\n                                <SearchBar { ...props.searchProps } />\n                                <BootstrapTable\n                                { ...props.baseProps } pagination={ paginationFactory(courseOptions) } hover\n                                />\n                            </div>\n                            )\n                        }\n                        </ToolkitProvider>  \n                    </Tab>\n                </Tabs>\n              </Modal.Body>\n          </Modal>            \n        </>\n    );\n}\n\nexport default StudentsTable;\n\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Calendar.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/ProgrammesTable.js",["242","243","244","245","246"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\nimport { Modal, Tabs, Tab } from \"react-bootstrap\";\n\nconst columns = [\n    { dataField: 'name', text: 'Programme', csvText: 'name', sort: true },\n]\n\nconst selectLevelOptions = {\n    I: 'I',\n    II: 'II',\n    III: 'III'\n};\n\nconst selectSemesterOptions = {\n    1: '1',\n    2: '2',\n    3: '3'\n};\n\nconst coursesColumns = [\n    { \n        dataField: 'level', \n        text: 'Level', \n        sort: true,\n        formatter: cell => selectLevelOptions[cell],\n        filter: selectFilter({\n            options: selectLevelOptions,\n        })\n    },\n    { \n        dataField: 'semester', \n        text: 'Semester', \n        sort: true,\n        formatter: cell => selectSemesterOptions[cell],\n        filter: selectFilter({\n            options: selectSemesterOptions,\n        })\n    },\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n]\n\nconst defaultSorted = [{\n    dataField: 'name',\n    order: 'asec'\n}];\n\nconst coursesSorted = [{\n    dataField: 'level',\n    order: 'asec'\n}];\n\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst courseOptions = {\n    sizePerPage: 8,\n    hideSizePerPage: true,\n    hidePageListOnlyOnePage: true\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\n\nfunction ProgrammesTable({programmes, loading}) {\n\n    //Modal\n    const [show, setShow] = useState(false);\n    const [programmeName, setprogrammeName] = useState([]);\n    const [programmeCourses, setProgrammeCourses] = useState([]);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n    const [loadingCourses, setLoadingCourses] = useState(true);\n\n    const rowEvents = {\n        onClick: (e, row, rowIndex) => {\n            setprogrammeName(row.name);\n            getProgrammeCourses(row.id);\n        }\n    };    \n\n    //Get Programme Courses\n    async function getProgrammeCourses(id) {\n        try {\n            setShow(true);\n            setProgrammeCourses([]);\n            setLoadingCourses(true);\n\n            const res = await fetch(\"http://localhost:5000/programmes/offered-courses/\" + id, {\n            method: \"GET\",\n        });\n            const parseData = await res.json();\n            setProgrammeCourses(parseData);\n            setLoadingCourses(false);\n            \n            \n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    //TABLE\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"name\"\n                    data={ programmes }\n                    columns={ columns }\n                    search\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } rowEvents={ rowEvents } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n\n            <Modal show={show} onHide={handleClose} size=\"xl\">\n              <Modal.Header closeButton>\n                  <Modal.Title>{programmeName}</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                {loadingCourses ? (\n                <div class=\"d-flex justify-content-center\">\n                    <div class=\"spinner-border text-primary\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n                ) : (\n                <ToolkitProvider\n                    keyField=\"courseCode\"\n                    data={ programmeCourses }\n                    columns={ coursesColumns }\n                    search\n                    >\n                    {\n                        props => (\n                        <div>\n                            <SearchBar { ...props.searchProps } />\n                            <BootstrapTable\n                            { ...props.baseProps } pagination={ paginationFactory(courseOptions) } defaultSorted={ coursesSorted } filter={ filterFactory() }\n                            />\n                        </div>\n                        )\n                    }\n                </ToolkitProvider>\n                )}                           \n              </Modal.Body>\n            </Modal>             \n\n        </>\n    );\n\n\n}\n\nexport default ProgrammesTable;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/SetAdvisingWindow.js",["247","248"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction SetAdvisingWindow() {\n    const notifyEdit = (text) => toast.success(text);\n    const notifyError = (text) => toast.error(text);\n\n    const [validated, setValidated] = useState(false);\n    const [advisingStart, setadvisingStart] = useState(new Date());\n    const [advisingEnd, setadvisingEnd] = useState(new Date());\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        \n\n        const formData = {\n            advisingStart : form.elements.advisingStart.value,\n            advisingEnd : form.elements.advisingEnd.value,\n            semester : form.elements.semester.value\n        }\n\n        if(advisingStart > advisingEnd){\n            notifyError(\"Error, Start Date After End Date\");\n        } else {\n            setValidated(true);\n            setWindow(formData);\n        }\n\n        \n    };\n\n    async function setWindow(data) {\n        try {\n          const res = await fetch(\"http://localhost:5000/admin/academic-advising/window\", {\n            method: \"POST\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n\n          const status = await res.statusText;\n          notifyEdit(\"Advising Window Updated!\");\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    return (\n        <>\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"advisingStart\">\n                    <Form.Label >Start Date</Form.Label>\n                    <DatePicker required selected={advisingStart} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingStart(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingStart\" />}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"advisingEnd\">\n                    <Form.Label>End Date</Form.Label>\n                    <DatePicker required selected={advisingEnd} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingEnd(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingEnd\" />}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"semester\">\n                    <Form.Label>Semester</Form.Label>\n                    <Form.Control required as=\"select\">\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                    </Form.Control>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Save</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default SetAdvisingWindow;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/EditCourse.js",["249"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction EditCourse({setShow, row, refreshTable}) {\n    const [validated, setValidated] = useState(false);\n\n    //Toast\n    const notifyEdit = (text) => toast.success(text);\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        setValidated(true);\n\n        const formData = {\n            courseCode : (form.elements.courseCode.value).replace(/\\s+/g, ''),\n            courseTitle : form.elements.courseTitle.value,\n            credits : form.elements.credits.value,\n            semester : form.elements.semester.value,\n            level : form.elements.level.value,\n            prerequisites : form.elements.prerequisites.value,\n            description: form.elements.description.value\n        }\n\n        editCourse(formData, row.courseCode)\n    };\n\n    async function editCourse(data, code) {\n        try {\n          const res = await fetch(\"http://localhost:5000/courses/edit/\" + code, {\n            method: \"PUT\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n    \n          setShow(false);\n          refreshTable();\n          notifyEdit(data.courseCode + \" Edited!\")\n\n          const status = await res.statusText;\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n\n    return (\n        <>\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"courseCode\">\n                    <Form.Label>Course Code</Form.Label>\n                    <Form.Control required type=\"text\" defaultValue={row.courseCode}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"courseTitle\">\n                    <Form.Label>Course Title</Form.Label>\n                    <Form.Control required type=\"text\" defaultValue={row.courseTitle}/>\n                </Form.Group>\n\n                <Form.Row>\n                    <Form.Group as={Col} md=\"4\" controlId=\"credits\">\n                        <Form.Label>Credits</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.credits}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"4\" controlId=\"semester\">\n                        <Form.Label>Semester</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.semester}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"4\" controlId=\"level\">\n                        <Form.Label>Level</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.level}>\n                            <option>I</option>\n                            <option>II</option>\n                            <option>III</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                </Form.Row>\n\n                <Form.Group controlId=\"prerequisites\">\n                    <Form.Label>Prerequisites</Form.Label>\n                    <Form.Control required type=\"text\" defaultValue={row.prerequisites}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"description\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control required as=\"textarea\" rows={4} defaultValue={row.description}/>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default EditCourse;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlock.js",[],{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","severity":1,"message":"255","line":1,"column":50,"nodeType":"256","messageId":"257","endLine":1,"endColumn":58},{"ruleId":"254","severity":1,"message":"258","line":6,"column":8,"nodeType":"256","messageId":"257","endLine":6,"endColumn":28},{"ruleId":"254","severity":1,"message":"259","line":2,"column":27,"nodeType":"256","messageId":"257","endLine":2,"endColumn":33},{"ruleId":"260","severity":1,"message":"261","line":103,"column":13,"nodeType":"262","messageId":"263","endLine":103,"endColumn":15},{"ruleId":"260","severity":1,"message":"261","line":110,"column":41,"nodeType":"262","messageId":"263","endLine":110,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":112,"column":49,"nodeType":"262","messageId":"263","endLine":112,"endColumn":51},{"ruleId":"260","severity":1,"message":"261","line":128,"column":49,"nodeType":"262","messageId":"263","endLine":128,"endColumn":51},{"ruleId":"260","severity":1,"message":"261","line":130,"column":49,"nodeType":"262","messageId":"263","endLine":130,"endColumn":51},{"ruleId":"260","severity":1,"message":"261","line":144,"column":41,"nodeType":"262","messageId":"263","endLine":144,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":158,"column":41,"nodeType":"262","messageId":"263","endLine":158,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":172,"column":41,"nodeType":"262","messageId":"263","endLine":172,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":186,"column":41,"nodeType":"262","messageId":"263","endLine":186,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":200,"column":41,"nodeType":"262","messageId":"263","endLine":200,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":215,"column":41,"nodeType":"262","messageId":"263","endLine":215,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":237,"column":41,"nodeType":"262","messageId":"263","endLine":237,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":251,"column":41,"nodeType":"262","messageId":"263","endLine":251,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":265,"column":41,"nodeType":"262","messageId":"263","endLine":265,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":279,"column":41,"nodeType":"262","messageId":"263","endLine":279,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":293,"column":41,"nodeType":"262","messageId":"263","endLine":293,"endColumn":43},{"ruleId":"260","severity":1,"message":"261","line":307,"column":41,"nodeType":"262","messageId":"263","endLine":307,"endColumn":43},{"ruleId":"254","severity":1,"message":"264","line":8,"column":11,"nodeType":"256","messageId":"257","endLine":8,"endColumn":15},{"ruleId":"254","severity":1,"message":"265","line":10,"column":14,"nodeType":"256","messageId":"257","endLine":10,"endColumn":23},{"ruleId":"260","severity":1,"message":"261","line":18,"column":34,"nodeType":"262","messageId":"263","endLine":18,"endColumn":36},{"ruleId":"260","severity":1,"message":"261","line":21,"column":34,"nodeType":"262","messageId":"263","endLine":21,"endColumn":36},{"ruleId":"254","severity":1,"message":"266","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":26},{"ruleId":"254","severity":1,"message":"267","line":6,"column":8,"nodeType":"256","messageId":"257","endLine":6,"endColumn":21},{"ruleId":"254","severity":1,"message":"268","line":10,"column":12,"nodeType":"256","messageId":"257","endLine":10,"endColumn":19},{"ruleId":"254","severity":1,"message":"269","line":11,"column":12,"nodeType":"256","messageId":"257","endLine":11,"endColumn":18},{"ruleId":"254","severity":1,"message":"270","line":12,"column":11,"nodeType":"256","messageId":"257","endLine":12,"endColumn":18},{"ruleId":"271","severity":1,"message":"272","line":45,"column":77,"nodeType":"273","messageId":"274","endLine":45,"endColumn":79},{"ruleId":"254","severity":1,"message":"266","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":26},{"ruleId":"254","severity":1,"message":"275","line":4,"column":10,"nodeType":"256","messageId":"257","endLine":4,"endColumn":19},{"ruleId":"260","severity":1,"message":"261","line":24,"column":36,"nodeType":"262","messageId":"263","endLine":24,"endColumn":38},{"ruleId":"254","severity":1,"message":"266","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":26},{"ruleId":"276","severity":1,"message":"277","line":27,"column":5,"nodeType":"256","endLine":27,"endColumn":14,"suggestions":"278"},{"ruleId":"260","severity":1,"message":"261","line":44,"column":44,"nodeType":"262","messageId":"263","endLine":44,"endColumn":46},{"ruleId":"254","severity":1,"message":"279","line":55,"column":20,"nodeType":"256","messageId":"257","endLine":55,"endColumn":30},{"ruleId":"254","severity":1,"message":"280","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":25},{"ruleId":"254","severity":1,"message":"255","line":2,"column":16,"nodeType":"256","messageId":"257","endLine":2,"endColumn":24},{"ruleId":"254","severity":1,"message":"281","line":44,"column":17,"nodeType":"256","messageId":"257","endLine":44,"endColumn":20},{"ruleId":"254","severity":1,"message":"275","line":1,"column":27,"nodeType":"256","messageId":"257","endLine":1,"endColumn":36},{"ruleId":"254","severity":1,"message":"282","line":6,"column":22,"nodeType":"256","messageId":"257","endLine":6,"endColumn":33},{"ruleId":"254","severity":1,"message":"283","line":11,"column":21,"nodeType":"256","messageId":"257","endLine":11,"endColumn":31},{"ruleId":"284","severity":1,"message":"285","line":5,"column":1,"nodeType":"286","endLine":9,"endColumn":3},{"ruleId":"254","severity":1,"message":"287","line":1,"column":8,"nodeType":"256","messageId":"257","endLine":1,"endColumn":13},{"ruleId":"254","severity":1,"message":"287","line":1,"column":8,"nodeType":"256","messageId":"257","endLine":1,"endColumn":13},{"ruleId":"254","severity":1,"message":"287","line":1,"column":8,"nodeType":"256","messageId":"257","endLine":1,"endColumn":13},{"ruleId":"254","severity":1,"message":"266","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":26},{"ruleId":"254","severity":1,"message":"287","line":1,"column":8,"nodeType":"256","messageId":"257","endLine":1,"endColumn":13},{"ruleId":"276","severity":1,"message":"288","line":23,"column":8,"nodeType":"289","endLine":23,"endColumn":10,"suggestions":"290"},{"ruleId":"254","severity":1,"message":"287","line":1,"column":8,"nodeType":"256","messageId":"257","endLine":1,"endColumn":13},{"ruleId":"276","severity":1,"message":"291","line":23,"column":8,"nodeType":"289","endLine":23,"endColumn":10,"suggestions":"292"},{"ruleId":"254","severity":1,"message":"293","line":5,"column":17,"nodeType":"256","messageId":"257","endLine":5,"endColumn":23},{"ruleId":"254","severity":1,"message":"294","line":41,"column":11,"nodeType":"256","messageId":"257","endLine":41,"endColumn":21},{"ruleId":"254","severity":1,"message":"295","line":57,"column":17,"nodeType":"256","messageId":"257","endLine":57,"endColumn":23},{"ruleId":"254","severity":1,"message":"280","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":25},{"ruleId":"254","severity":1,"message":"296","line":56,"column":7,"nodeType":"256","messageId":"257","endLine":56,"endColumn":16},{"ruleId":"254","severity":1,"message":"297","line":57,"column":12,"nodeType":"256","messageId":"257","endLine":57,"endColumn":26},{"ruleId":"254","severity":1,"message":"294","line":61,"column":11,"nodeType":"256","messageId":"257","endLine":61,"endColumn":21},{"ruleId":"260","severity":1,"message":"298","line":92,"column":32,"nodeType":"262","messageId":"263","endLine":92,"endColumn":34},{"ruleId":"260","severity":1,"message":"261","line":104,"column":32,"nodeType":"262","messageId":"263","endLine":104,"endColumn":34},{"ruleId":"276","severity":1,"message":"299","line":114,"column":8,"nodeType":"289","endLine":114,"endColumn":10,"suggestions":"300"},{"ruleId":"254","severity":1,"message":"275","line":1,"column":27,"nodeType":"256","messageId":"257","endLine":1,"endColumn":36},{"ruleId":"254","severity":1,"message":"301","line":4,"column":35,"nodeType":"256","messageId":"257","endLine":4,"endColumn":44},{"ruleId":"254","severity":1,"message":"302","line":6,"column":17,"nodeType":"256","messageId":"257","endLine":6,"endColumn":21},{"ruleId":"254","severity":1,"message":"303","line":6,"column":23,"nodeType":"256","messageId":"257","endLine":6,"endColumn":26},{"ruleId":"254","severity":1,"message":"294","line":82,"column":11,"nodeType":"256","messageId":"257","endLine":82,"endColumn":21},{"ruleId":"254","severity":1,"message":"304","line":2,"column":24,"nodeType":"256","messageId":"257","endLine":2,"endColumn":27},{"ruleId":"254","severity":1,"message":"295","line":57,"column":17,"nodeType":"256","messageId":"257","endLine":57,"endColumn":23},{"ruleId":"254","severity":1,"message":"295","line":53,"column":17,"nodeType":"256","messageId":"257","endLine":53,"endColumn":23},"no-native-reassign",["305"],"no-negated-in-lhs",["306"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'PermanentDrawerRight' is defined but never used.","'Router' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'desc' is assigned a value but never used.","'setCharAt' is defined but never used.","'Component' is defined but never used.","'CourseDetails' is defined but never used.","'clicked' is assigned a value but never used.","'course' is assigned a value but never used.","'history' is assigned a value but never used.","array-callback-return","Array.from() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setUploaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props, processed, details.length, details.degree, details.progress, details.credits, programmes, determineCourses] as a second argument to the useEffect Hook.",["307"],"'getCourses' is defined but never used.","'useState' is defined but never used.","'res' is assigned a value but never used.","'setSessions' is assigned a value but never used.","'setLoading' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'getDetails'. Either include it or remove the dependency array.","ArrayExpression",["308"],"React Hook useEffect has a missing dependency: 'getCourses'. Either include it or remove the dependency array.",["309"],"'Button' is defined but never used.","'handleShow' is assigned a value but never used.","'status' is assigned a value but never used.","'selectRow' is assigned a value but never used.","'studentCourses' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'getStudentCourses'. Either include it or remove the dependency array.",["310"],"'CSVExport' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Col' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},"Add dependencies array: [props, processed, details.length, details.degree, details.progress, details.credits, programmes, determineCourses]",{"range":"319","text":"320"},"Update the dependencies array to be: [getDetails]",{"range":"321","text":"322"},"Update the dependencies array to be: [getCourses]",{"range":"323","text":"324"},"Update the dependencies array to be: [getStudentCourses]",{"range":"325","text":"326"},[1789,1789],", [props, processed, details.length, details.degree, details.progress, details.credits, programmes, determineCourses]",[582,584],"[getDetails]",[591,593],"[getCourses]",[3297,3299],"[getStudentCourses]"]