[{"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/index.js":"1","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/App.js":"2","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/sidebar.js":"3","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Main.js":"4","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseDetails.js":"5","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Career.js":"6","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseList.js":"7","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Start.js":"8","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/StudentProfile.js":"9","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/login.js":"10","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/TopBar.js":"11","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Courses.js":"12","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/StaffDashboard.js":"13","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Students.js":"14","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Reports.js":"15","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Programmes.js":"16","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Settings.js":"17","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Bot Framework/webChat.js":"18","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CareerCheck.js":"19","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullCareers.js":"20","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullCourses.js":"21","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullProgrammes.js":"22","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseNode.js":"23","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/DetailsCard.js":"24","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/NoTranscript.js":"25","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/StudentCoursesCard.js":"26","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullDetails.js":"27","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullStudentCourses.js":"28","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/CoursesTable.js":"29","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/AddCourse.js":"30","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlocks.js":"31","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/ReportsTable.js":"32","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/StudentsTable.js":"33","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Calendar.js":"34","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/ProgrammesTable.js":"35","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/SetAdvisingWindow.js":"36","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/EditCourse.js":"37","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlock.js":"38","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/AddAccount.js":"39","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/BeforeBot.js":"40","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Finish.js":"41","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Sessions.js":"42","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/SessionsTable.js":"43"},{"size":378,"mtime":1615323037211,"results":"44","hashOfConfig":"45"},{"size":456,"mtime":1615912878983,"results":"46","hashOfConfig":"45"},{"size":7002,"mtime":1618455643652,"results":"47","hashOfConfig":"45"},{"size":11797,"mtime":1618442960388,"results":"48","hashOfConfig":"45"},{"size":10089,"mtime":1618420841534,"results":"49","hashOfConfig":"45"},{"size":6601,"mtime":1618420841532,"results":"50","hashOfConfig":"45"},{"size":10897,"mtime":1618420841534,"results":"51","hashOfConfig":"45"},{"size":9603,"mtime":1618455643650,"results":"52","hashOfConfig":"45"},{"size":23956,"mtime":1618455643651,"results":"53","hashOfConfig":"45"},{"size":5655,"mtime":1618443913508,"results":"54","hashOfConfig":"45"},{"size":1263,"mtime":1617739457305,"results":"55","hashOfConfig":"45"},{"size":4963,"mtime":1618442960389,"results":"56","hashOfConfig":"45"},{"size":1133,"mtime":1618442960391,"results":"57","hashOfConfig":"45"},{"size":1952,"mtime":1618442960392,"results":"58","hashOfConfig":"45"},{"size":2927,"mtime":1618442960390,"results":"59","hashOfConfig":"45"},{"size":2190,"mtime":1618442960389,"results":"60","hashOfConfig":"45"},{"size":1215,"mtime":1618442960391,"results":"61","hashOfConfig":"45"},{"size":498,"mtime":1618350408464,"results":"62","hashOfConfig":"45"},{"size":917,"mtime":1618244214752,"results":"63","hashOfConfig":"45"},{"size":618,"mtime":1615776866263,"results":"64","hashOfConfig":"45"},{"size":618,"mtime":1615776866263,"results":"65","hashOfConfig":"45"},{"size":627,"mtime":1617739457302,"results":"66","hashOfConfig":"45"},{"size":2539,"mtime":1618420841535,"results":"67","hashOfConfig":"45"},{"size":8648,"mtime":1618420841536,"results":"68","hashOfConfig":"45"},{"size":3080,"mtime":1618420841538,"results":"69","hashOfConfig":"45"},{"size":1554,"mtime":1617739457305,"results":"70","hashOfConfig":"45"},{"size":661,"mtime":1615858598291,"results":"71","hashOfConfig":"45"},{"size":677,"mtime":1615858598291,"results":"72","hashOfConfig":"45"},{"size":5459,"mtime":1618350436112,"results":"73","hashOfConfig":"45"},{"size":5833,"mtime":1618350436109,"results":"74","hashOfConfig":"45"},{"size":2052,"mtime":1618442960389,"results":"75","hashOfConfig":"45"},{"size":4463,"mtime":1618442960390,"results":"76","hashOfConfig":"45"},{"size":8610,"mtime":1618350436120,"results":"77","hashOfConfig":"45"},{"size":1820,"mtime":1618350436110,"results":"78","hashOfConfig":"45"},{"size":7335,"mtime":1618350436116,"results":"79","hashOfConfig":"45"},{"size":4099,"mtime":1618350436118,"results":"80","hashOfConfig":"45"},{"size":5021,"mtime":1618350436113,"results":"81","hashOfConfig":"45"},{"size":747,"mtime":1618350436115,"results":"82","hashOfConfig":"45"},{"size":4428,"mtime":1618350436107,"results":"83","hashOfConfig":"45"},{"size":1924,"mtime":1618420841531,"results":"84","hashOfConfig":"45"},{"size":3047,"mtime":1618420841536,"results":"85","hashOfConfig":"45"},{"size":2304,"mtime":1618442960390,"results":"86","hashOfConfig":"45"},{"size":3814,"mtime":1618442960390,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"8hlocg",{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"90"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"90"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"90"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"90"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"90"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"90"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"90"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"90"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"90"},"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/index.js",[],["202","203"],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/App.js",["204","205"],"import { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport React from \"react\";\nimport Main from './components/Main';\n\nimport './App.css';\nimport PermanentDrawerRight from \"./components/sidebar\";\n\nfunction App () {\n\n  return (\n      <Router>\n        <Switch>\n          <Route\n            path=\"/\"\n            render={(props) => <Main {...props} />}\n          />\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/sidebar.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Main.js",["206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226"],"import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\n\n//Student Imports\nimport StudentProfile from './StudentProfile';\nimport CourseList from './CourseList';\nimport CourseDetails from './CourseDetails';\nimport Career from './Career';\nimport Start from './Start';\nimport BeforeBot from './BeforeBot';\nimport Finish from './Finish';\nimport PermanentDrawerRight from \"./sidebar\";\n\n//Staff Imports\nimport StaffDashboard from './Staff/StaffDashboard';\nimport StaffCourses from './Staff/Courses';\nimport Students from './Staff/Students';\nimport Settings from './Staff/Settings';\nimport Reports from './Staff/Reports';\nimport Programmes from './Staff/Programmes';\nimport Sessions from './Staff/Sessions';\n\n//Global Imports\nimport \"../App.css\"\nimport \"../assets/css/Staff.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Login from \"./login\";\nimport TopBar from '../components/TopBar';\nimport ReactWebChat from \"../components/Bot Framework/webChat\";\n\nfunction Main() {\n  const [isAuthenticated, setIsAuthenticated] = useState(localStorage.getItem(\"auth\")); // Get authenticated status from localStorage\n  const [user, setUser] = useState(localStorage.getItem(\"user\")); // Get type of user from localStorage\n  const [recCourses, setRecCourses] = useState(null); // Store recommended courses generated on StudentProfile.js\n  const [careerRecCourses, setCareerRecCourses] = useState(null); // Store recommended courses generated on Career.js\n  const [chosenCourses, setChosenCourses] = useState([]); // Store courses chosen by the user on CourseList.js\n  const [show, setShow] = useState(true); // Boolean value to determine whether or not to show the \"Begin Advising\" button\n  const [progress, setProgress] = useState(0); // Value of the user's advising progress percentage\n  const [degProgress, setDegProgress] = useState(0); // Value of the user's degree progress percentage\n  const [newDeg, setNewDeg] = useState(0); // Value of the user's updated degree progress credits\n  const [credits, setCredits] = useState(0); // Value of how much credits the user needs to complete their degree\n  const [hide, setHide] = useState(false); // Boolean value to determine whether or not to show the sidebar or not\n  const [showBackBtn, setShowBackBtn] = useState(true); // Boolean value to determine whether or not to show the back button on the course list page\n  const [loading, setLoading] = useState(true); // Boolean value to determine whether or not to show a loading circle on the sidebar\n  const [year, setYear] = useState(1); // Value of the user's current level\n  const [warning, setWarning] = useState(false); // Boolean value to indicate whether or not that the user is on academic warning\n  const [botButtons, setBotButtons] = useState(false); // Boolean value to indicate whether or not to show \"Back to Courses\" and \"Finish Advising\" buttons on sidebar\n  const [programme, setProgramme] = useState(null); // Store what programme a student is current doing\n\n  /* Setter methods for use by the other pages */\n  const setAuth = (boolean) => {\n    setIsAuthenticated(boolean);\n  };\n\n  const setType = (value) => {\n    setUser(value);\n  };\n\n  const setRecommended = (value) => {\n    setRecCourses(value);\n  };\n\n  const setCareerRecommended = (value) => {\n    setCareerRecCourses(value);\n  };\n\n  const setDisplay = (value) => {\n    setShow(value);\n  };\n\n  const setProg = (value) => {\n    setProgress(value);\n  };\n\n  const setDegProg = (value) => {\n    setDegProgress(value);\n  };\n\n  const setNewDegProg = (value) => {\n    setNewDeg(value);\n  };\n\n  const setCreds = (value) => {\n    setCredits(value);\n  };\n\n  const setHidden = (value) => {\n    setHide(value);\n  };\n\n  const setShowBack = (value) => {\n    setShowBackBtn(value);\n  };\n\n  const setLoad = (value) => {\n    setLoading(value);\n  };\n\n  const setLevel = (value) => {\n    setYear(value);\n  };\n\n  const setAcWarning = (value) => {\n    setWarning(value);\n  };\n\n  const setChosen = (value) => {\n    setChosenCourses(value);\n  };\n\n  const setShowBotButtons = (value) => {\n    setBotButtons(value);\n  };\n\n  const setStudentProgramme = (value) => {\n    setProgramme(value);\n  };\n\n  return (\n    <div className=\"main-panel\">\n      {user ? <TopBar hide={hide}></TopBar> : null}\n      {user == \"student\" ? <PermanentDrawerRight hide={hide} recCourses={recCourses} progress={progress} degProgress={degProgress} credits={credits} show={show} setDisplay={setDisplay} setShowBotButtons={setShowBotButtons} loading={loading} warning={warning} newDeg={newDeg} botButtons={botButtons}/> : null}\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return(<Redirect to=\"/home\"/>)\n              } else if (isAuthenticated && user==\"admin\"){\n                return(<Redirect to=\"/staff\"/>)\n              } else {\n                return(<Redirect to=\"/login\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/login\"\n          render={(props) =>\n            {\n              if(!isAuthenticated){\n                return <Login {...props} setAuth={setAuth} setType={setType}/>\n              } else if (isAuthenticated && user==\"admin\"){\n                return(<Redirect to=\"/staff\" />)\n              } else if (isAuthenticated && user==\"student\"){\n                return(<Redirect to=\"/home\" />)\n              }\n            }\n          }\n        />\n\n        {/*Student Routes*/}\n\n        <Route\n          exact\n          path=\"/home\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <StudentProfile {...props} setRecommended={setRecommended} setDisplay={setDisplay} setProg={setProg} setDegProg={setDegProg} setCreds={setCreds} setHidden={setHidden} setLoad={setLoad} setLevel={setLevel} setAcWarning={setAcWarning} setShowBotButtons={setShowBotButtons} recCourses={recCourses} programme={programme}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/courses\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <CourseList {...props} setProg={setProg} setHidden={setHidden} setDisplay={setDisplay} setChosen={setChosen} setNewDegProg={setNewDegProg} showBackBtn={showBackBtn} setShowBotButtons={setShowBotButtons} recCourses={recCourses} careerRecCourses={careerRecCourses} chosenCourses={chosenCourses} newDeg={newDeg}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/coursedetails\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <CourseDetails {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/career\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <Career {...props} setDisplay={setDisplay} setProg={setProg} setCareerRecommended={setCareerRecommended} year={year} recCourses={recCourses}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/start\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <Start {...props} setHidden={setHidden} setDegProg={setDegProg} setCreds={setCreds} setShowBack={setShowBack} setRecommended={setRecommended} setShowBotButtons={setShowBotButtons} setStudentProgramme={setStudentProgramme} recCourses={recCourses}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/almostdone\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <BeforeBot setShowBotButtons={setShowBotButtons}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/finish\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return <Finish chosenCourses={chosenCourses} setProg={setProg} setShowBotButtons={setShowBotButtons}/>\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />    \n\n        {/*Bot Route*/}\n        <Route\n          exact\n          path=\"/bot\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"student\"){\n                return (\n                <div className=\"row\">\n                  <div className=\"col-sm-10\">\n                    <ReactWebChat {...props} />\n                  </div>\n                </div>\n               )\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />  \n\n\n        {/*Staff Routes*/}\n        <Route\n          exact\n          path=\"/staff\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <StaffDashboard {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />        \n\n        <Route\n          exact\n          path=\"/staff/courses\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <StaffCourses {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/staff/programmes\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <Programmes {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/staff/students\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <Students {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n\n        <Route\n          exact\n          path=\"/staff/settings\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <Settings {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />\n        \n        <Route\n          exact\n          path=\"/staff/reports\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <Reports {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />                        \n\n        <Route\n          exact\n          path=\"/staff/sessions\"\n          render={(props) =>\n            {\n              if(isAuthenticated && user==\"admin\"){\n                return <Sessions {...props} />\n              } else {\n                return(<Redirect to=\"/\" />)\n              }\n            }\n          }\n        />  \n\n\n\n      </Switch>\n\n    </div>\n  );\n}\n\nexport default Main;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseDetails.js",["227","228","229","230"],"import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom'\nimport axios from \"axios\";\n\nclass CourseDetails extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            courseCareers: []\n        }\n        this.getCourseCareers = this.getCourseCareers.bind(this);\n        this.determineCourseCareers = this.determineCourseCareers.bind(this);\n    }\n\n    componentDidMount() {\n        this.determineCourseCareers();\n    }\n\n    async getCourseCareers(id) {\n        try {\n            const {data:response} = await axios.get(`/courses/careers/${id}`) //use data destructuring to get data from the promise object\n            return response\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n\n    async determineCourseCareers() {\n        var courseCareers = [];\n        courseCareers = await this.getCourseCareers(this.props.location.state.course.id);\n        this.setState({\n            courseCareers: courseCareers\n        });\n    }\n\n    render() {\n\n        const prereqs = () => {\n            var prereq = this.props.location.state.course.prerequisites;\n            if (prereq.length > 8) {\n                if (prereq.charAt(9) == \"|\") {\n                    prereq = prereq.slice(0, 8) + \" OR \" + prereq.slice(-8);\n                }\n                if (prereq.charAt(9) == \"&\") {\n                    prereq = prereq.slice(0, 8) + \" AND \" + prereq.slice(-8);\n                }\n            }\n            return prereq;\n        }\n\n    return (\n      <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <p className=\"header blue-txt\">Select Courses</p>\n                        <div className=\"card details-card\">\n                            <div className=\"card-body\">\n                                <p className=\"course-code blue-txt\">{this.props.location.state.course.courseCode}</p>\n                                <p className=\"course-title\">{this.props.location.state.course.courseTitle}</p>\n                                <div className=\"prereqs\">\n                                    <span className=\"prereq-header blue-txt\">Pre-requisites: </span>\n                                    <span className=\"prereq-courses\">{prereqs()}</span>\n                                </div>\n                                <div className=\"career\">\n                                    <span className=\"career-header blue-txt\">Career Tags: </span>\n                                    {\n                                        Array.from({ length: this.state.courseCareers.length }, (_, k) => {\n                                            if (k !== this.state.courseCareers.length-1 )\n                                                return <span className=\"career-tags\">{this.state.courseCareers[k]}, </span>\n                                            else \n                                                return <span className=\"career-tags\">{this.state.courseCareers[k]}</span>\n                                        }) \n                                    }\n                                </div>\n                                <p className=\"course-desc\">{this.props.location.state.course.description}</p>\n                                <p className=\"assessment-header blue-txt\">Assessment</p>\n                                {this.props.location.state.course.coursework != null ? (\n                                    <div className=\"row assessment\">\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-type\">Coursework:</p>\n                                        </div>\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.coursework}</p>\n                                        </div>\n                                    </div> ) : null\n                                }\n                                {this.props.location.state.course.finalExam != null ? (\n                                    <div className=\"row assessment\">\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-type\">Final Exam:</p>\n                                        </div>\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.finalExam}</p>\n                                        </div>\n                                    </div> ) : null\n                                }\n                                {this.props.location.state.course.individualProjectPres != null ? (\n                                    <div className=\"row assessment\">\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-type\">Individual Project Presentation:</p>\n                                        </div>\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.individualProjectPres}</p>\n                                        </div>\n                                    </div> ) : null\n                                }\n                                {this.props.location.state.course.groupProjectPres != null ? (\n                                    <div className=\"row assessment\">\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-type\">Group Project Presentation:</p>\n                                        </div>\n                                        <div className=\"col-sm-2\">\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.groupProjectPres}</p>\n                                        </div>\n                                    </div> ) : null\n                                }\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-sm-2\">\n                                <Link to=\"/courses\">\n                                    <button type=\"button\" class=\"btn btn-custom back-button blue-button\">Back</button>\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n      </div>\n    );\n  }\n}\n\nexport default CourseDetails;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Career.js",["231"],"import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport CareerCheck from './CareerCheck';\nimport \"../assets/css/Career.css\";\nimport { Link } from 'react-router-dom'\nimport PullCareers from \"./PullCareers\";\nimport axios from \"axios\";\nimport { useHistory } from 'react-router-dom';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Career = (props) => {\n\n  const [careerList, setCareerList] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  var careers = PullCareers();\n  const history = useHistory();\n  props.setDisplay(false);\n  props.setProg(40);\n  if (props.recCourses === null) {\n    history.push({\n      pathname: '/home'\n    })\n  }\n\n  function onChange(event) { \n    var careerArray = careerList;\n    if (event.currentTarget.checked === true) {\n      careerArray.push(event.currentTarget.value);\n    }\n    else {\n      var index = careerArray.indexOf(event.currentTarget.value);\n      if (index > -1) {\n        careerArray.splice(index, 1);\n      }\n    }\n    setCareerList(careerArray);\n  }\n\n  function onClick() {\n    setLoading(true);\n    determineCourses(careerList);\n  }\n\n  async function getCareerCourses(id) {\n    try {\n      const {data:response} = await axios.get(`/careers/courses/${id}`) //use data destructuring to get data from the promise object\n      return response\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function determineCourses(careerArray){\n\n      var recCourses = [];\n      var today = new Date();\n      var currentSem;\n      var level;\n      \n      if (today.getMonth() < 4) {\n          currentSem = \"2\";\n      }\n      else if (today.getMonth() < 6) {\n          currentSem = \"3\";\n      }\n      else {\n          currentSem = \"1\";\n      }\n\n      if (props.year === 1) {\n        level = \"I\";\n      }\n      else if (props.year === 2) {\n        level = \"II\";\n      }\n      else if (props.year === 3) {\n        level = \"III\"\n      }\n      else {\n        level = \"I\";\n      }\n\n      for (var i=0; i<careerArray.length; i++) {\n        var courses = await getCareerCourses(careerArray[i]);\n        for (var j=0; j<courses.length; j++) {\n          if (courses[j].semester === currentSem && courses[j].level === level) {\n            recCourses.push(courses[j].courseCode);\n          }\n        }\n    }\n    props.setCareerRecommended(recCourses);\n    \n    history.push({\n      pathname: '/courses'\n    })\n\n  }\n\n\n  return (\n    <div className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-sm-10\">\n                <p className=\"header blue-txt\">Career Path</p>\n                  <form>\n                    <div className=\"card details-card outer-card\">\n                      <div className=\"card-body career-card custom-scroll\">\n                        <p className=\"career-card-text\">Select any career paths you may be interested in pursuing</p>\n                          <table class=\"table table-borderless table-striped\">\n                            <thead>\n                                <tr class=\"d-flex blue-txt\">\n                                    <th class=\"col-3 name-header\">Career Title</th>\n                                    <th class=\"col-9 desc-header\">Description</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                              <CareerCheck careers={careers} onChange={onChange}></CareerCheck>\n                            </tbody>\n                          </table>\n                        </div>\n                    </div>\n                    <div className=\"row button-row\">\n                      <div className=\"col-sm-2\">\n                        <Link to=\"/home\">\n                          <button type=\"submit\" class=\"btn btn-custom back-button blue-button\">Back</button>\n                        </Link>\n                      </div>\n                      { loading ? (\n                        <div className=\"col-sm-2\">\n                          <CircularProgress className=\"circ-prog career-prog\" size={30}/>\n                        </div>\n                      ) : (null)}\n                      { loading ? (\n                        <div className=\"col-sm-2 offset-sm-6\">\n                          <button type=\"button\" class=\"btn btn-custom next-button blue-button\" onClick={onClick}>Next</button>\n                        </div> ) : (\n                        <div className=\"col-sm-2 offset-sm-8\">\n                          <button type=\"button\" class=\"btn btn-custom next-button blue-button\" onClick={onClick}>Next</button>\n                        </div>\n                        ) }\n                    </div>\n                  </form>\n                </div>\n              </div>\n          </div>\n    </div>\n  );\n}\n\nexport default Career;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseList.js",["232","233","234","235","236"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport CourseNode from './CourseNode'\nimport PullCourses from \"./PullCourses\";\nimport \"../assets/css/Courses.css\";\nimport CourseDetails from \"./CourseDetails\";\nimport { Link } from 'react-router-dom'\n\nconst CourseList = (props) => { \n    const [clicked, setClicked] = useState(false);\n    const [course, setCourse] = useState(null);\n    const [all, setAll] = useState(true);\n    const [core, setCore] = useState(false);\n    const [career, setCareer] = useState(false);\n    const [chosen, setChosen] = useState(false);\n    const [chosenList, setChosenList] = useState([]);\n\n    const history = useHistory();\n\n    const nodeClickHandler = (course) => {\n      setClicked(true)\n      setCourse(course)\n    }\n \n    var courses = PullCourses();\n\n    let recCourses = undefined;\n    let careerRecCourses = undefined;\n    \n    if (props.recCourses) {\n      recCourses = props.recCourses;\n    }\n    else {\n      history.push({\n        pathname: '/home'\n      })\n    }\n\n    if (props.careerRecCourses) {\n      careerRecCourses = props.careerRecCourses;\n    }\n    else {\n      careerRecCourses = [];\n    }\n\n    useEffect(() => {\n      props.setProg(60);\n      props.setHidden(false);\n      props.setDisplay(false);\n    })\n\n    function allClick() {\n      if (core || career || chosen) {\n        setAll(true);\n        setCore(false);\n        setCareer(false);\n        setChosen(false);\n      }\n    }\n\n    function coreClick() {\n      if (all || career || chosen) {\n        setAll(false);\n        setCore(true);\n        setCareer(false);\n        setChosen(false);\n      }\n    }\n\n    function careerClick() {\n      if (core || all || chosen) {\n        setAll(false);\n        setCore(false);\n        setCareer(true);\n        setChosen(false);\n      }\n    }\n\n    function chosenClick() {\n      if (core || all || career) {\n        setAll(false);\n        setCore(false);\n        setCareer(false);\n        setChosen(true);\n      }\n    }\n\n    function onChange(event) { \n      var chosenArray = props.chosenCourses;\n      var clear = false;\n      if (event.currentTarget.checked === true) {\n        chosenArray.push(event.currentTarget.value);\n      }\n      else {\n        while (!clear) {\n          var index = chosenArray.indexOf(event.currentTarget.value);\n          if (index > -1) {\n            chosenArray.splice(index, 1);\n          }\n          else {\n            clear = true;\n          }\n        }\n        clear = false;\n      }\n      setChosenList(chosenArray);\n      props.setChosen(chosenArray);\n    }\n\n    return (\n      <div className=\"content\">\n            <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-sm-10\">\n                <p className=\"header blue-txt\">Select Courses</p>\n                <div className=\"card details-card outer-card\">\n                    <div className=\"card-body\">\n                        <p className=\"courselist-card-text\">Click on a course to see more details</p>\n                        <p className=\"courselist-card-text\">Check the Add box if you are interested in pursuing a course</p>\n                        <div className=\"row tab-group\">\n                          { all ? (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={allClick}>All Courses</button>\n                            </div> ) : (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={allClick}>All Courses</button>\n                            </div>\n\n                          ) }\n                          { core ? (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={coreClick}>Core Courses</button>\n                            </div> ) : ( \n                            \n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={coreClick}>Core Courses</button>\n                            </div>\n\n                          ) }\n                          { career ? (\n\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={careerClick}>Career Specific Courses</button>\n                            </div> ) : (\n\n                            <div className=\"col-sm-3\">\n                             <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={careerClick}>Career Specific Courses</button>\n                            </div>\n                          ) }\n                          { chosen ? (\n                            <div className=\"col-sm-3\">\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={chosenClick}>Your Chosen Courses</button>\n                            </div> ) : (\n\n                            <div className=\"col-sm-3\">\n                            <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={chosenClick}>Your Chosen Courses</button>\n                            </div>\n                          ) }\n                        </div>\n                        <div className=\"card courselist-card custom-scroll\">\n                            <div className=\"card-body\">{\n                              all ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (recCourses.includes(courses[k].courseCode)) {\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : core ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (recCourses.includes(courses[k].courseCode) && courses[k].type === \"Core\") {\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : career ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (careerRecCourses.includes(courses[k].courseCode)) {\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : chosen ? (\n                              Array.from({ length: courses.length }, (_, k) => {\n                                if (props.chosenCourses.includes(courses[k].courseCode)) {\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \n                                }\n                              }) \n                              ) : (null)\n                            }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                { props.showBackBtn ? (\n                  <div className=\"row button-row\">\n                      <div className=\"col-sm-2\">\n                        <Link to=\"/career\">\n                          <button type=\"submit\" class=\"btn btn-custom back-button blue-button\">Back</button>\n                        </Link>\n                      </div>          \n                      <div className=\"col-sm-2 offset-sm-8\">\n                      <Link to=\"/bot\">\n                        <button type=\"submit\" class=\"btn btn-customnext-button blue-button\">Next</button>\n                        </Link>\n                      </div>\n                  </div>\n                ) : (\n                  <div className=\"row button-row\">        \n                      <div className=\"col-sm-2 offset-sm-8\">\n                        <Link to=\"/bot\">\n                          <button type=\"submit\" class=\"btn btn-custom next-button blue-button\">Next</button>\n                        </Link>\n                      </div>\n                  </div>\n                ) }\n            </div>\n            </div>\n            </div>\n      </div>\n    );\n  \n}\n\nexport default CourseList;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Start.js",["237","238","239"],"import React, { Component } from \"react\";\nimport \"../assets/css/Start.css\";\nimport { Link } from 'react-router-dom'\nimport { useEffect, useState } from \"react\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport { useHistory } from 'react-router-dom';\nimport axios from \"axios\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Start = (props) => { \n\n    const [radio, setRadio] = useState(null);\n    const [programme, setProgramme] = useState(\"None\");\n    const [loading, setLoading] = useState(false);\n\n    props.setHidden(true);\n    var programmes = PullProgrammes();\n\n    const history = useHistory();\n\n    const onClickFunction = () => {\n        setLoading(true);\n        for (var i=0; i<programmes.length; i++) {\n            if (programmes[i].name == programme) {\n                var programmeId = programmes[i].id;\n            }\n        }\n        if (programmeId) {\n            determineCourses(programmeId);\n        }\n    }\n\n    async function getProgrammeCourses(id) {\n        try {\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    async function determineCourses(programmeId){\n\n        var recCourses = [];\n        var today = new Date();\n        var currentSem;\n        \n        if (today.getMonth() < 4) {\n            currentSem = \"2\";\n        }\n        else if (today.getMonth() < 6) {\n            currentSem = \"3\";\n        }\n        else {\n            currentSem = \"1\";\n        }\n\n        var courses = await getProgrammeCourses(programmeId);\n\n        for (var i=0; i<courses.length; i++) {\n            if (courses[i].type === \"Core\" && courses[i].semester === currentSem && courses[i].level === \"I\") {\n                recCourses.push(courses[i].courseCode);\n            }\n        }\n\n        props.setRecommended(recCourses);\n    \n        history.push({\n            pathname: '/courses'\n        })\n        \n    }\n\n\n    function onRadioChange(event) { \n        setRadio(event.currentTarget.value);\n        if (event.currentTarget.value === \"new\") {\n            props.setDegProg(0);\n            props.setCreds(93);\n            props.setShowBack(false);\n        }\n    }\n\n    function onSelectChange(event) { \n        setProgramme(event.currentTarget.value);\n    }\n\n \n    return (\n        <div className=\"content\">\n                <div className=\"container-fluid\">\n                    <div className=\"header\">\n                        <p className=\"welcome blue-txt\">Welcome to myAdvisor</p>\n                        <p className=\"started blue-txt\">Let's get started.</p>\n                    </div>\n                    <div className=\"card start-card\">\n                        <div className=\"card-body\">\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"studentRadio\" id=\"studentRadiosCont\" value=\"cont\"  onChange={onRadioChange}/>\n                                <label class=\"form-check-label\" for=\"studentRadiosCont\">\n                                    I am a continuing student\n                                </label>\n                            </div>\n                            <div class=\"form-check\">\n                                <input class=\"form-check-input\" type=\"radio\" name=\"studentRadio\" id=\"studentRadiosNew\" value=\"new\"  onChange={onRadioChange}/>\n                                <label class=\"form-check-label new-label\" for=\"studentRadiosNew\">\n                                    I am a new student in my first semester of my programme\n                                </label>\n                                { radio === \"new\" ? (\n                                    <div className=\"row select-row\">\n                                        <div className=\"col-sm-6\">\n                                            <div class=\"form-group\">\n                                                <select class=\"form-control\" id=\"exampleFormControlSelect1\" onChange={onSelectChange}>\n                                                <option value=\"None\">Select your programme</option>\n                                                {\n                                                 Array.from({ length: programmes.length }, (_, k) => {\n                                                    return <option value={programmes[k].name}>{programmes[k].name}</option> \n                                                })}\n                                                </select>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    ) : (null) }\n                            </div>\n                           \n                        </div>\n                        <div className=\"row\">\n                        { radio === \"new\" && programme !== \"None\" ? (\n\n                                <div className=\"col-sm-2\">\n                                    <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\" onClick={onClickFunction}>Next</button>\n                                </div>\n                            ) :\n\n                            radio === \"new\" && programme === \"None\" ? (\n                            <div className=\"col-sm-2\">\n                                <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\n                            </div>) : \n                            \n                            radio === \"cont\" ? (\n                              <div className=\"col-sm-2\">\n                                <Link to=\"/home\">\n                                  <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\n                                </Link>\n                              </div>\n                            ) : \n\n                            (\n                              <div className=\"col-sm-2\">\n                                  <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\n                              </div>\n                            )\n                        }\n                        { loading ? (\n                            <div className=\"col-sm-2\">\n                                <CircularProgress className=\"circ-prog start-prog\" size={30}/>\n                            </div>\n                        ) : (null)\n                        }\n                        </div>\n                    </div>\n                </div>\n        </div>\n        );\n    \n}\n\nexport default Start;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/StudentProfile.js",["240","241","242","243"],"import React, { Component } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"../assets/css/StudentProfile.css\"\nimport DetailsCard from \"./DetailsCard\";\nimport NoTranscript from \"./NoTranscript\";\nimport PullDetails from \"./PullDetails\";\nimport PullStudentCourses from \"./PullStudentCourses\";\nimport PullProgrammes from \"./PullProgrammes\";\nimport StudentCoursesCard from \"./StudentCoursesCard\";\nimport axios from \"axios\"\n\nconst StudentProfile = (props) => {\n\n    const [uploaded, setUploaded] = useState(true);\n    const [processed, setProcessed] = useState(false);\n   \n\n\n    function uploadedHandler() {\n        window.location.reload();\n    }\n\n    var details = PullDetails(localStorage.getItem(\"username\"));\n    var studentCourses = PullStudentCourses(localStorage.getItem(\"username\"));\n    var programmes = PullProgrammes();\n \n    useEffect(() => {\n        props.setDisplay(true);\n        props.setHidden(false);\n        if (!processed) {\n            if (details.gpa < 2.0 && details.gpa != 0) {\n                props.setAcWarning(true);\n            }\n            if (details.length === 0) {\n                setUploaded(false);\n                props.setDegProg(0);\n                props.setCreds(93);\n            }\n            else {\n                setUploaded(true);\n                props.setDegProg(details.progress);\n                props.setCreds(93 - details.credits);\n            }\n            if (details.degree === \"Comp Science (Special) BSC S\") {\n                var studentProgramme = \"Computer Science (Special)\"\n                for (var i=0; i<programmes.length; i++) {\n                    if (programmes[i].name == studentProgramme) {\n                        var programmeId = programmes[i].id;\n                    }\n                }\n                if (programmeId) {\n                    determineCourses(programmeId)\n                }\n            }\n        }\n    })\n\n    async function getCourses() {\n        try {\n          const {data:response} = await axios.get('/courses/all') //use data destructuring to get data from the promise object\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    async function getProgrammeCourses(id) {\n        try {\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\n          return response\n        }\n    \n        catch (error) {\n          console.log(error);\n        }\n    }\n\n    let noCreditGrade = [\"F1\", \"F2\", \"F3\", \"DIS\", \"EI\", \"FA\", \"FAS\", \"FC\", \"FE\", \"FO\", \"FP\", \"FT\", \"FWS\", \"FTS\", \"AB\", \"AM\", \"AMS\", \"DB\", \"DEF\", \"EQ\", \"FM\", \"FMS\", \"FWR\", \"I\", \"LW\", \"NCR\", \"NFC\", \"NP\", \"NR\", \"NV\", \"W\"]\n\n    \n    function splitBySem(coreRes, courses) {\n        var semesterArr = [[]];\n        for (var key in coreRes) {\n            for (var i=0; i<courses.length; i++) {\n                if (key === courses[i].courseCode) {\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"I\")) {\n                        if (!semesterArr[0]) {\n                            semesterArr[0] = [];\n                        }\n                        semesterArr[0].push({\n                            courseCode: key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"I\")) {\n                        if (!semesterArr[1]) {\n                            semesterArr[1] = [];\n                        }\n                        semesterArr[1].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"II\")) {\n                        if (!semesterArr[2]) {\n                            semesterArr[2] = [];\n                        }\n                        semesterArr[2].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"II\")) {\n                        if (!semesterArr[3]) {\n                            semesterArr[3] = [];\n                        }\n                        semesterArr[3].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"III\")) {\n                        if (!semesterArr[4]) {\n                            semesterArr[4] = [];\n                        }\n                        semesterArr[4].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"III\")) {\n                        if (!semesterArr[5]) {\n                            semesterArr[5] = [];\n                        }\n                        semesterArr[5].push({\n                            courseCode:   key,\n                            grade: coreRes[key]\n                        });\n                        break;\n                    }\n                }\n            }\n        }\n        return semesterArr;\n    }\n\n    function getCoreCourses(courses) {\n        var core = [];\n        for (var i=0; i<courses.length; i++) {\n            if (courses[i].type === \"Core\") {\n                core.push(courses[i]);\n            }\n        }\n        return core;\n    }\n\n    function recommendCoreCourses(coreSemesterArr, year, currentSem, courses) {\n        var coreY1S1 = coreSemesterArr[0]; // Core courses offered in Year 1 Semester 1\n        var coreY1S2 = coreSemesterArr[1];\n        var coreY2S1 = coreSemesterArr[2];\n        var coreY2S2 = coreSemesterArr[3];\n        var coreY3S1 = coreSemesterArr[4];\n        var coreY3S2 = coreSemesterArr[5];\n        var recCourses = courses;\n        var key;\n\n        if (year === 1 && currentSem === 1) { //If student is in Year 1 Semester 1\n            for (key in coreY1S1) { // Iterate core courses offered in year 1 semester 1\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") { // If course has not been done before or student failed it in the past\n                    if (!courses.includes(coreY1S1[key].courseCode)) // If course wasn't already recommended\n                        recCourses.push(coreY1S1[key].courseCode) // Add course to recommended course array\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) { // Look for courses being offered in Year 1 Semester 1 that student didnt do or failed\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in coreY3S1) {\n                if (coreY3S1[key].grade === \"N\" || coreY3S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S1[key].courseCode))\n                        recCourses.push(coreY3S1[key].courseCode)\n                }\n            }\n            for (key in coreY2S1) {\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S1[key].courseCode))\n                        recCourses.push(coreY2S1[key].courseCode)\n                }\n            }\n            for (key in coreY1S1) {\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S1[key].courseCode))\n                        recCourses.push(coreY1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in coreY3S2) {\n                if (coreY3S2[key].grade === \"N\" || coreY3S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY3S2[key].courseCode))\n                        recCourses.push(coreY3S2[key].courseCode)\n                }\n            }\n            for (key in coreY2S2) {\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY2S2[key].courseCode))\n                        recCourses.push(coreY2S2[key].courseCode)\n                }\n            }\n            for (key in coreY1S2) {\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\n                    if (!courses.includes(coreY1S2[key].courseCode))\n                        recCourses.push(coreY1S2[key].courseCode)\n                }\n            }\n        }\n        return recCourses;\n    }\n\n    function removeCoursesNoPrereq(recCourses, courses, studentCourses) {\n        var index;\n        for (var i=0; i<courses.length; i++) {\n            if(recCourses.includes(courses[i].courseCode)) {\n                var prereq = courses[i].prerequisites;\n                if (prereq.length === 8) {\n                    if (!(studentCourses[prereq] === \"P\")) {\n                        index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                    }\n                }\n                if (prereq.length > 8) {\n                    var prereq1 = prereq.slice(0, 8);\n                    var prereq2 = prereq.slice(-8);\n                    if (prereq.charAt(9) === \"|\") {\n                        if (!((studentCourses[prereq1] === \"P\") || (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                    if (prereq.charAt(9) === \"&\") {\n                        if (!((studentCourses[prereq1] === \"P\") && (studentCourses[prereq2] === \"P\"))) {\n                            index = recCourses.indexOf(courses[i].courseCode);\n                            if (index > -1) {\n                                recCourses.splice(index, 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function determineStudentCourses(core) {\n        var coreRes = {};\n        for (var i=0; i<core.length; i++){\n            for (var j=0; j<studentCourses.length; j++) {\n                if ((studentCourses[j].courseCode === core[i].courseCode) && (studentCourses[j].grade === \"IP\")){\n                    coreRes[`${core[i].courseCode}`] = \"IP\";\n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && !(noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"P\";\n                }\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && (noCreditGrade.includes(studentCourses[j].grade))){\n                    coreRes[`${core[i].courseCode}`] = \"F\";\n                }\n                else {\n                    if (!coreRes[`${core[i].courseCode}`]) {\n                        coreRes[`${core[i].courseCode}`] = \"N\";\n                    }\n                }\n            }\n        }\n        return coreRes;\n    }\n\n    async function determineCourses(programmeId){\n        \n        let Y1S1 = {}; // List of all courses for Year 1 Semester 1\n        let Y1S2 = {}; // List of all courses for Year 1 Semester 2\n        let Y2S1 = {}; // List of all courses for Year 2 Semester 1\n        let Y2S2 = {}; // List of all courses for Year 2 Semester 2\n        let Y3S1 = {}; // List of all courses for Year 3 Semester 1\n        let Y3S2 = {}; // List of all courses for Year 3 Semester 2\n        var programmeCourses = {};\n        var semesterArr = [];\n        var coreSemesterArr = [];\n        var today = new Date();\n        var currentSem;\n\n        //var courses = await getCourses();\n        var courses = await getProgrammeCourses(programmeId);\n\n        \n        for (var i=0; i<courses.length; i++) { // Initialise Courses for Degree using thier Level and Semester\n            if (courses[i].level === \"I\") {\n                if (courses[i].semester === \"1\") {\n                    Y1S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y1S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"II\") {\n                if (courses[i].semester === \"1\") {\n                    Y2S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y2S2[courses[i].courseCode] = \"N\";\n                }\n            }\n            if (courses[i].level === \"III\") {\n                if (courses[i].semester === \"1\") {\n                    Y3S1[courses[i].courseCode] = \"N\";\n                }\n                if (courses[i].semester === \"2\") {\n                    Y3S2[courses[i].courseCode] = \"N\";\n                }\n            }\n        }\n\n        programmeCourses = determineStudentCourses(courses);\n        semesterArr = splitBySem(programmeCourses, courses);\n        var coreCourses = getCoreCourses(courses);\n        coreSemesterArr = splitBySem(programmeCourses, coreCourses);\n\n        var recCourses = [];\n        var counter = 0;\n        var year = 1;\n        var sem = 1;\n        var key;\n\n        \n        Y1S1 = semesterArr[0];\n        Y1S2 = semesterArr[1];\n        Y2S1 = semesterArr[2];\n        Y2S2 = semesterArr[3];\n        Y3S1 = semesterArr[4];\n        Y3S2 = semesterArr[5];\n\n        counter = 0;\n        for (key in Y1S1) {\n            if (Y1S1[key].grade === \"P\" || Y1S1[key].grade === \"F\" || Y1S1[key].grade === \"IP\") {\n                counter+=1;\n            }\n        }\n        if (counter > 1) {\n            sem = 2;\n        }\n        counter = 0;\n        if (year === 1 && sem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"P\" || Y1S2[key].grade === \"F\" || Y1S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"P\" || Y2S1[key].grade === \"F\" || Y2S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n        counter = 0;\n        if (year === 2 && sem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"P\" || Y2S2[key].grade === \"F\" || Y3S1[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 1;\n                year = 3;\n            }\n        }\n        counter = 0;\n        if (year === 3 && sem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"P\" || Y3S1[key].grade === \"F\" || Y3S2[key].grade === \"IP\") {\n                    counter+=1;\n                }\n            }\n            if (counter > 1) {\n                sem = 2;\n            }\n        }\n\n        if (today.getMonth() < 4) {\n            currentSem = 2;\n        }\n        else if (today.getMonth() < 6) {\n            currentSem = 3;\n        }\n        else {\n            currentSem = 1;\n        }\n\n        if (year === 1 && currentSem === 1) {\n            for (key in Y1S1) {\n                if (Y1S1[key].grade === \"N\") {\n                    recCourses.push(Y1S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 1 && currentSem === 2) {\n            for (key in Y1S2) {\n                if (Y1S2[key].grade === \"N\") {\n                    recCourses.push(Y1S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 1) {\n            for (key in Y2S1) {\n                if (Y2S1[key].grade === \"N\") {\n                    recCourses.push(Y2S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 2 && currentSem === 2) {\n            for (key in Y2S2) {\n                if (Y2S2[key].grade === \"N\") {\n                    recCourses.push(Y2S2[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 1) {\n            for (key in Y3S1) {\n                if (Y3S1[key].grade === \"N\") {\n                    recCourses.push(Y3S1[key].courseCode)\n                }\n            }\n        }\n        if (year === 3 && currentSem === 2) {\n            for (key in Y3S2) {\n                if (Y3S2[key].grade === \"N\") {\n                    recCourses.push(Y3S2[key].courseCode)\n                }\n            }\n        }\n\n        recCourses = recommendCoreCourses(coreSemesterArr, year, currentSem, recCourses);\n        removeCoursesNoPrereq(recCourses, courses, programmeCourses);\n        props.setRecommended(recCourses);\n        props.setLevel(year);\n        if (props.recCourses !== null) {\n            props.setLoad(false);\n        }\n        setProcessed(true);\n    }\n\n \n\n    return (\n        <div className=\"content\">\n                <div className=\"container-fluid\">\n                <div className=\"row\">\n                        <div className=\"col-sm-10\">\n                    <p className=\"header blue-txt\">Student Details</p>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            { uploaded ? (\n                                <DetailsCard details={details} uploadedHandler={uploadedHandler} setProg={props.setProg}></DetailsCard> ) : (\n                                <NoTranscript uploadedHandler={uploadedHandler} setProg={props.setProg}></NoTranscript>\n                            ) }\n                        </div>\n                    </div>\n                    <p className=\"header blue-txt\">Courses Completed</p>\n                     { uploaded ? (\n                        <StudentCoursesCard courses={studentCourses}></StudentCoursesCard> ) : (\n                        <div className=\"card details-card\">\n                            <div className=\"card-body\">\n                                <table class=\"table table-borderless table-striped\">\n                                    <thead>\n                                        <tr class=\"d-flex blue-txt\">\n                                            <th class=\"col-1 level-cell\">Level</th>\n                                            <th class=\"col-2 code-cell\">Course Code</th>\n                                            <th class=\"col-8 title-cell\">Course Title</th>\n                                            <th class=\"col-1 credit-cell\">Grade</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                        )\n                     } \n                     </div>\n                     </div>                 \n                </div>\n        </div>\n    );\n\n}\n\nexport default StudentProfile;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/login.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/TopBar.js",["244","245"],"import React, { useState } from \"react\";\nimport { Link, Redirect } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Nav, Navbar, Button } from 'react-bootstrap';\n\nfunction TopBar(props) {\n\n  function logOut(){\n    localStorage.clear();\n    window.location.reload(false);\n  }\n\n  const user = localStorage.getItem(\"user\")\n\n\n\n  return (\n    <div>\n      { user === \"admin\" || props.hide ? (\n        <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand><Link to=\"/\" className=\"top-bar-text\">myAdvisor</Link></Navbar.Brand>\n          \n            <Nav className=\"ml-auto\">\n              <Button variant=\"outline-light\" onClick={logOut}>Log Out</Button>\n            </Nav>\n        \n        </Navbar>\n        ) : ( \n        <div className=\"row\">\n          <div className=\"col-sm-10\">\n            <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\">\n              <Navbar.Brand><Link to=\"/\" className=\"top-bar-text\">myAdvisor</Link></Navbar.Brand>\n              \n                <Nav className=\"ml-auto\">\n                  <Button variant=\"outline-light\" onClick={logOut}>Log Out</Button>\n                </Nav>\n            </Navbar>\n          </div>\n        </div> \n      )\n      }\n    </div>\n  );\n}\n\nexport default TopBar;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Courses.js",["246"],"import React, { useState, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport CoursesTable from \"./CoursesTable\";\nimport AddCourse from \"./AddCourse\";\nimport {Jumbotron, Container} from 'react-bootstrap';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\n/*\n    Courses is a component that displays the courses table and addCourses component.\n*/\n\nfunction Courses() {\n    /*\n        The show state is used to keep track of the visibility of the addCourses modal.\n        It's initial state is false.\n        handleShow sets the show state to true, which displays the modal.\n        handleShow sets the show state to false, which closes the modal.\n    */ \n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    /*\n        The courses state is used store all the courses that will be displayed in the table.\n        The loading state is used to  keep track of getting the courses from the server. \n        It's initial state is true, so the table will not be displayed until the system has fetched all courses.\n    */ \n    const [courses, setCourses] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    /*\n        notifyDelete is used to display a toast notifications when a course is deleted. It displays a red toast.\n    */\n    const notifyDelete = (text) => toast.error(text);\n\n    /*\n        getCourses creates a get request to the server that gets all the courses on the system and stores it in the courses state.\n    */\n    async function getCourses() {\n        try {\n          const res = await fetch(\"/courses/all\", {\n            method: \"GET\",\n          });\n    \n          const parseData = await res.json();\n          setCourses(parseData);\n          setLoading(false);\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    /*\n        deleteCourse creates a delete request to the server that deletes the course with the specified course id\n    */\n    async function deleteCourse(courseCode) {\n        try {\n          const res = await fetch(\"/courses/delete/\" + courseCode, {\n            method: \"DELETE\",\n            headers: {\n                token: localStorage.getItem(\"token\")\n            },\n          });\n    \n            setLoading(false);\n            refreshTable();\n            notifyDelete(courseCode + \" Deleted\")\n          \n        } catch (err) {\n            notifyDelete(err.message)\n            console.error(err.message);\n        }\n    }\n\n    /*\n        confirmDelete is a popup that asks the user to confirm that they want to delete a course\n    */\n    function confirmDelete(courseCode){\n        confirmAlert({\n          title: 'Delete Confirmation',\n          message: 'Are you sure to do delete ' + courseCode + \"?\",\n          buttons: [\n            {\n              label: 'Yes',\n              onClick: () => deleteCourse(courseCode)\n            },\n            {\n              label: 'No',\n            }\n          ]\n        });\n    };\n\n    useEffect(() => {\n        getCourses();\n    }, []);\n\n    /*\n        refreshTable sets the loading state to true and gets the courses from the system.\n    */\n    function refreshTable(){\n        setLoading(true);\n        getCourses();\n    }\n\n    return (\n        <>\n            <Jumbotron fluid>\n                <Container>\n                    <h2>Courses</h2>\n                </Container>\n            </Jumbotron>\n            <div class=\"container\">\n                <div class=\"row mt-4\">\n                    {/* Courses Table */}\n                    <div class=\"col-10\">\n                        <div class=\"card h-100\">\n                            <div class=\"card-body shadow-sm\">\n                                <CoursesTable courses={courses} loading={loading} confirmDelete={confirmDelete} refreshTable={refreshTable}/>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Buttons */}\n                    <div class=\"col\">\n                        <button type=\"button\" class=\"btn btn-custom add-course\" onClick={handleShow}>Add Course</button>\n                    </div>\n\n                    <Modal show={show} onHide={handleClose} size=\"lg\">\n                        <Modal.Header closeButton>\n                            <Modal.Title>Add Course</Modal.Title>\n                        </Modal.Header>\n\n                        <Modal.Body>\n                            <AddCourse setShow={setShow} refreshTable={refreshTable}/>\n                        </Modal.Body>\n                    </Modal>\n                </div>\n            </div>\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default Courses;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/StaffDashboard.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Students.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Reports.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Programmes.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Settings.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Bot Framework/webChat.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CareerCheck.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullCareers.js",["247"],"import React, { useEffect, useState } from \"react\";\n\nconst PullCareers = () => {\n    const [careers, setCareers] = useState([]);\n  \n    async function getCareers() {\n      try {\n        const res = await fetch(\"/careers/all\", {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setCareers(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get career data\n    useEffect(() => {\n      getCareers();\n    }, []);\n\n    return (\n        careers\n      );\n    };\n\nexport default PullCareers;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullCourses.js",["248"],"import React, { useEffect, useState } from \"react\";\n\nconst PullCourses = () => {\n    const [courses, setCourses] = useState([]);\n  \n    async function getCourses() {\n      try {\n        const res = await fetch(\"/courses/all\", {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setCourses(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get course data\n    useEffect(() => {\n      getCourses();\n    }, []);\n\n    return (\n        courses\n      );\n    };\n\nexport default PullCourses;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullProgrammes.js",["249"],"import React, { useEffect, useState } from \"react\";\n\nconst PullProgrammes = () => {\n    const [programmes, setProgrammes] = useState([]);\n  \n    async function getProgrammes() {\n      try {\n        const res = await fetch(`/programmes/all`, {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setProgrammes(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n\n    useEffect(() => {\n        getProgrammes();\n      }, []);\n  \n    return (\n        programmes\n      );\n    };\n\nexport default PullProgrammes;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/CourseNode.js",["250"],"import React, { Component } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport { useEffect, useState } from \"react\";\n\nfunction CourseNode(props) {\n    const history = useHistory();\n    const [selected, setSelected] = useState(false);\n\n    const onClickFunction = () => {\n        history.push({\n            pathname: `/coursedetails`,\n            state: { course: props.course }\n          })\n    }\n                          \n    const onChange = (event) => {\n        setSelected(!selected);\n        props.onChange(event);\n    }\n    \n\n    return (\n        <div className=\"course-node\">\n            <div className=\"row\">\n                <div className=\"col-lg-9 col-sm-7\" onClick={() => onClickFunction()}>\n                    <p className=\"course-code blue-txt\">{props.course.courseCode}</p>\n                </div>\n                <div className=\"col-lg-2 col-sm-3\" onClick={() => onClickFunction()}>\n                    <p className=\"credit-header blue-txt\">Credits</p>\n                </div>\n                <div className=\"col-lg-1 col-sm-2\">\n                    <p className=\"add-header blue-txt\">Add</p>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-lg-9 col-sm-7\" onClick={() => onClickFunction()}>\n                    <p className=\"course-title\">{props.course.courseTitle}</p>\n                </div>\n                <div className=\"col-lg-2 col-sm-3\" onClick={() => onClickFunction()}>\n                    <p className=\"credits\">{props.course.credits}</p>\n                </div>\n                <div className=\"col-lg-1 col-sm-2 check-div\">\n                    { props.chosen.includes(props.course.courseCode) ? (\n                        <input type=\"checkbox\" class=\"form-check-input course-check\" id={props.course.courseCode} value={props.course.courseCode} onChange={onChange} checked></input>         \n                    ) : (\n                        <input type=\"checkbox\" class=\"form-check-input course-check\" id={props.course.courseCode} value={props.course.courseCode} onChange={onChange}></input>        \n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CourseNode;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/DetailsCard.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/NoTranscript.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/StudentCoursesCard.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullDetails.js",["251","252"],"import React, { useEffect, useState } from \"react\";\n\nconst PullDetails = (studentId) => {\n    const [details, setDetails] = useState([]);\n  \n    async function getDetails() {\n      try {\n        const res = await fetch(`/transcript/details/view/${studentId}`, {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setDetails(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get student details data\n    useEffect(() => {\n      getDetails();\n    }, []);\n\n    return (\n        details\n      );\n    };\n\nexport default PullDetails;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/PullStudentCourses.js",["253","254"],"import React, { useEffect, useState } from \"react\";\n\nconst PullStudentCourses = (studentId) => {\n    const [courses, setCourses] = useState([]);\n  \n    async function getCourses() {\n      try {\n        const res = await fetch(`/transcript/courses/viewAll/${studentId}`, {\n          method: \"GET\",\n          headers: { token: localStorage.token },\n        });\n  \n        const parseData = await res.json();\n        setCourses(parseData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    }\n  \n    //Get student course data\n    useEffect(() => {\n      getCourses();\n    }, []);\n\n    return (\n        courses\n      );\n    };\n\nexport default PullStudentCourses;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/CoursesTable.js",["255","256"],"import React, { useState } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport { Modal, Button } from \"react-bootstrap\";\nimport EditCourse from \"./EditCourse\";\nimport \"../../assets/css/Staff.css\";\n\n//TABLE SETUP\n\nconst columns = [\n    { dataField: 'courseCode', text: 'Course Code', csvText: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', csvText: 'Course Title' },\n    { dataField: 'credits', text: 'Credits', csvText: 'Credits', sort: true },\n    { dataField: 'semester', text: 'Semester', csvText: 'Semester', sort: true },\n]\n\nconst defaultSorted = [{\n  dataField: 'courseCode',\n  order: 'asec'\n}];\n\nconst options = {\n  custom: true,\n  paginationSize: 5,\n  pageStartIndex: 1,\n  firstPageText: 'First',\n  prePageText: 'Back',\n  nextPageText: 'Next',\n  lastPageText: 'Last',\n  sizePerPage: 8,\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\nfunction CoursesTable({courses, loading, refreshTable, confirmDelete}) {\n\n    //Edit Course Modal\n    const [show, setShow] = useState(false);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    const [row, setRow] = useState();\n\n    //REQUESTS\n\n    function eCourse(row) {\n      setShow(true);\n      setRow(row);\n    }\n\n    function dCourse(courseCode) {\n      confirmDelete(courseCode);\n    }\n\n    //EXPANDED TABLE ROW\n\n    const expandRow = {\n        onlyOneExpanding: true,\n        renderer: row => (\n          <div>\n            <h3>{ `${row.courseCode}` } - { `${row.courseTitle}` }</h3>\n            <br/>\n            <h4>Description</h4>\n            <p>{ `${row.description}` }</p>\n\n            <h4>Prerequisites</h4>\n            <p>{ `${row.prerequisites}` }</p>\n\n            <h4>Coursework</h4>\n            <p>{ `${row.coursework}` }</p>\n\n            <h4>Final Exam</h4>\n            <p>{ `${row.finalExam}` }</p>\n\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-custom edit-course\" onClick={() => eCourse(row)}>Edit</button>\n              <button type=\"button\" class=\"btn btn-danger delete-course\" onClick={() => dCourse(row.courseCode)}>Delete</button>\n            </div>\n          </div>\n        )\n    };\n\n    //TABLE\n\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"courseCode\"\n                    data={ courses }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                      fileName: 'courses.csv',\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } expandRow={ expandRow } defaultSorted={ defaultSorted } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n  );\n\n  return (\n      <>\n          {loading ? (\n            <div class=\"d-flex justify-content-center\">\n              <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n              { table }\n            </PaginationProvider>\n          )}\n\n          <Modal show={show} onHide={handleClose} size=\"lg\">\n              <Modal.Header closeButton>\n                  <Modal.Title>Edit Course</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                <EditCourse setShow={setShow} row={row} refreshTable={refreshTable}/>\n              </Modal.Body>\n          </Modal>\n        \n      </>\n\n  );\n}\n\nexport default CoursesTable;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/AddCourse.js",["257"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction AddCourse({setShow, refreshTable}) {\n    const [validated, setValidated] = useState(false);\n\n    //Toast\n    const notifyAdded = (text) => toast.success(text);\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        setValidated(true);\n\n        const formData = {\n            courseCode : (form.elements.courseCode.value).replace(/\\s+/g, ''),\n            courseTitle : form.elements.courseTitle.value,\n            credits : form.elements.credits.value,\n            semester : form.elements.semester.value,\n            level : form.elements.level.value,\n            prerequisites : form.elements.prerequisites.value,\n            description: form.elements.description.value,\n            coursework: String(form.elements.coursework.value) + \"%\",\n            finalExam: String(form.elements.finalExam.value) + \"%\",\n            type: form.elements.type.value\n        }\n\n        addCourse(formData)\n    };\n\n\n    async function addCourse(data) {\n        try {\n          const res = await fetch(\"http://localhost:5000/courses/add\", {\n            method: \"POST\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n    \n          setShow(false);\n          refreshTable();\n          notifyAdded(data.courseCode + \" Added!\")\n\n          const status = await res.statusText;\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    return (\n        <>\n            <Form validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"courseCode\">\n                    <Form.Label>Course Code</Form.Label>\n                    <Form.Control required type=\"text\"/>\n                </Form.Group>\n\n                <Form.Group controlId=\"courseTitle\">\n                    <Form.Label>Course Title</Form.Label>\n                    <Form.Control required type=\"text\"/>\n                </Form.Group>\n\n                <Form.Row>\n                    <Form.Group as={Col} md=\"4\" controlId=\"credits\">\n                        <Form.Label>Credits</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"4\" controlId=\"semester\">\n                        <Form.Label>Semester</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"4\" controlId=\"level\">\n                        <Form.Label>Level</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>I</option>\n                            <option>II</option>\n                            <option>III</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"coursework\">\n                        <Form.Label>Coursework</Form.Label>\n                        <Form.Control required type=\"number\" min=\"1\" max=\"100\" />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"finalExam\">\n                        <Form.Label>Final Exam</Form.Label>\n                        <Form.Control required type=\"number\" min=\"1\" max=\"100\" />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"type\">\n                        <Form.Label>Type</Form.Label>\n                        <Form.Control required as=\"select\">\n                            <option>Core</option>\n                            <option>Elective</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Group controlId=\"prerequisites\">\n                    <Form.Label>Prerequisites</Form.Label>\n                    <Form.Control required type=\"text\"/>\n                </Form.Group>\n\n                <Form.Group controlId=\"description\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control required as=\"textarea\" rows={3}/>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default AddCourse;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlocks.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/ReportsTable.js",["258","259","260","261","262"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\n\n\n//TABLE SETUP\n\n/*\n    selectYearOptions allows you to filter the year table column\n*/\n\nconst selectYearOptions = {\n    1: '1',\n    2: '2',\n    3: '3'\n};\n\n/*\n    columns is used to display specific columns of the data on the reports table.\n    It also contains code that enables the columns to be filtered.\n*/\nconst columns = [\n    { dataField: 'studentID', text: 'Student ID', csvText: 'Student ID', sort: true },\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\n    { dataField: 'admitTerm', text: 'Admit Term', csvText: 'Admit Term', sort: true},\n    { dataField: 'id', text: 'Session ID', csvText: 'Session ID', sort: true },\n    { dataField: 'sessionDate', text: 'Session Date', csvText: 'Session Date', sort: true },\n]\n\n/*\n    defaultSorted sorts the table is ascending order based on the status column.\n*/\nconst defaultSorted = [{\n    dataField: 'status',\n    order: 'asec'\n}];\n\n\n/*\n    options is used to configure the tables pagination.\n*/\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\n/*\n    selectRow allows you to select specific rows in the table.\n*/\nconst selectRow = {\n    mode: 'checkbox',\n    clickToSelect: true\n};\n  \n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\n/*\n    ReportsTable is a component that displays the advising sessions in a table where staff can generate reports and export them.\n*/\nfunction ReportsTable({sessions, students}) {\n    const [loading, setLoading] = useState(true);\n    const [studentSessionsDetails, setStudentSessionsDetails] = useState([]);    \n\n    /*\n        ToolkitProvider is a wrapper for the BootstrapTable context and the related search, export csv and clear search react contexts.  \n    */\n\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"id\"\n                    data={ studentSessionsDetails }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                      fileName: 'report.csv',\n                      onlyExportFiltered: true,\n                      onlyExportSelection: true,\n                      exportAll: true\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } selectRow={ selectRow } defaultSorted={ defaultSorted } filter={ filterFactory()} hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    function studentDetails(){\n        let temp = [];\n\n        for (var i in sessions){\n            for(var j in students){\n                if(sessions[i].studentID == students[j].studentId){\n                    temp.push(Object.assign({}, students[j], sessions[i]));\n                }\n            }\n        }\n\n        setStudentSessionsDetails(temp);\n\n\n        if(temp.length != 0){\n            setLoading(false);\n        }\n        \n    };\n\n    useEffect(() => {\n        studentDetails();\n    },[sessions, students]);    \n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n        </>\n    );\n}\n\nexport default ReportsTable;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/StudentsTable.js",["263","264","265","266","267"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport { Modal, Tabs, Tab } from \"react-bootstrap\";\n\n//TABLE SETUP\n\nconst columns = [\n    { dataField: 'studentId', text: 'Student ID', csvText: 'Student ID', sort: true },\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\n    { dataField: 'gpa', text: 'GPA', csvText: 'GPA', sort: true },\n    { dataField: 'degree', text: 'Degree', csvText: 'Degree', sort: true },\n    { dataField: 'credits', text: 'Credits', csvText: 'Credits', sort: true },\n]\n\nconst coursesColumns = [\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n    { dataField: 'grade', text: 'Grade', sort: true },\n]\n\nconst inprogressCoursesColumns = [\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n]\n\nconst defaultSorted = [{\n    dataField: 'name',\n    order: 'asec'\n}];\n\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst courseOptions = {\n    sizePerPage: 8,\n    hideSizePerPage: true,\n    hidePageListOnlyOnePage: true\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n\nfunction StudentsTable({students, loading}) {\n    //Modal\n    const [show, setShow] = useState(false);\n    const [studentName, setStudentName] = useState([]);\n    const [studentCourses, setStudentCourses] = useState([]);\n    const [completedCourses, setCompletedCourses] = useState([]);\n    const [inprogressCourses, setInprogressCourses] = useState([]);\n\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n\n    const rowEvents = {\n        onClick: (e, row, rowIndex) => {\n            setStudentName(row.name);\n            getStudentCourses(row.studentId);\n        }\n    };\n\n    //Get Student Courses\n    async function getStudentCourses(studentId) {\n        try {\n            const res = await fetch(\"http://localhost:5000/transcript/courses/viewAll/\" + studentId, {\n            method: \"GET\",\n        });\n            const parseData = await res.json();\n            setStudentCourses(parseData);\n            getCompleted(parseData);\n            getInprogress(parseData);\n            setShow(true);\n            \n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    function getCompleted(data){\n        let arr = []\n\n        for (var key in data){\n            if(data[key].grade != 'IP'){\n                arr.push(data[key])\n            }\n        }\n\n        setCompletedCourses(arr);\n    }\n\n    function getInprogress(data){\n        let arr = []\n\n        for (var key in data){\n            if(data[key].grade == 'IP'){\n                arr.push(data[key])\n            }\n        }\n\n        setInprogressCourses(arr);\n    }\n\n    useEffect(() => {\n        getStudentCourses();\n    }, []);    \n\n    //TABLE\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"studentID\"\n                    data={ students }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                        fileName: 'students.csv',\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } rowEvents={ rowEvents } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n\n            <Modal show={show} onHide={handleClose} size=\"lg\">\n              <Modal.Header closeButton>\n                  <Modal.Title>{studentName}</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                <Tabs defaultActiveKey=\"completed\" id=\"uncontrolled-tab-example\">\n                    <Tab eventKey=\"completed\" title=\"Completed\">\n                        <ToolkitProvider\n                        keyField=\"courseCode\"\n                        data={ completedCourses }\n                        columns={ coursesColumns }\n                        search\n                        >\n                        {\n                            props => (\n                            <div>\n                                <br/>\n                                <SearchBar { ...props.searchProps } />\n                                <BootstrapTable\n                                { ...props.baseProps } pagination={ paginationFactory(courseOptions) } hover\n                                />\n                            </div>\n                            )\n                        }\n                        </ToolkitProvider>                           \n                    </Tab>\n                    <Tab eventKey=\"incomplete\" title=\"Inprogress\">\n                        <ToolkitProvider\n                        keyField=\"courseCode\"\n                        data={ inprogressCourses }\n                        columns={ inprogressCoursesColumns }\n                        search\n                        >\n                        {\n                            props => (\n                            <div>\n                                <br/>\n                                <SearchBar { ...props.searchProps } />\n                                <BootstrapTable\n                                { ...props.baseProps } pagination={ paginationFactory(courseOptions) } hover\n                                />\n                            </div>\n                            )\n                        }\n                        </ToolkitProvider>  \n                    </Tab>\n                </Tabs>\n              </Modal.Body>\n          </Modal>            \n        </>\n    );\n}\n\nexport default StudentsTable;\n\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Calendar.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/ProgrammesTable.js",["268","269","270","271","272"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\nimport { Modal, Tabs, Tab } from \"react-bootstrap\";\n\nconst columns = [\n    { dataField: 'name', text: 'Programme', csvText: 'name', sort: true },\n]\n\nconst selectLevelOptions = {\n    I: 'I',\n    II: 'II',\n    III: 'III'\n};\n\nconst selectSemesterOptions = {\n    1: '1',\n    2: '2',\n    3: '3'\n};\n\nconst coursesColumns = [\n    { \n        dataField: 'level', \n        text: 'Level', \n        sort: true,\n        formatter: cell => selectLevelOptions[cell],\n        filter: selectFilter({\n            options: selectLevelOptions,\n        })\n    },\n    { \n        dataField: 'semester', \n        text: 'Semester', \n        sort: true,\n        formatter: cell => selectSemesterOptions[cell],\n        filter: selectFilter({\n            options: selectSemesterOptions,\n        })\n    },\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\n]\n\nconst defaultSorted = [{\n    dataField: 'name',\n    order: 'asec'\n}];\n\nconst coursesSorted = [{\n    dataField: 'level',\n    order: 'asec'\n}];\n\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst courseOptions = {\n    sizePerPage: 8,\n    hideSizePerPage: true,\n    hidePageListOnlyOnePage: true\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\n\nfunction ProgrammesTable({programmes, loading}) {\n\n    //Modal\n    const [show, setShow] = useState(false);\n    const [programmeName, setprogrammeName] = useState([]);\n    const [programmeCourses, setProgrammeCourses] = useState([]);\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n    const [loadingCourses, setLoadingCourses] = useState(true);\n\n    const rowEvents = {\n        onClick: (e, row, rowIndex) => {\n            setprogrammeName(row.name);\n            getProgrammeCourses(row.id);\n        }\n    };    \n\n    //Get Programme Courses\n    async function getProgrammeCourses(id) {\n        try {\n            setShow(true);\n            setProgrammeCourses([]);\n            setLoadingCourses(true);\n\n            const res = await fetch(\"http://localhost:5000/programmes/offered-courses/\" + id, {\n            method: \"GET\",\n        });\n            const parseData = await res.json();\n            setProgrammeCourses(parseData);\n            setLoadingCourses(false);\n            \n            \n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n\n    //TABLE\n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"name\"\n                    data={ programmes }\n                    columns={ columns }\n                    search\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } rowEvents={ rowEvents } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n\n            <Modal show={show} onHide={handleClose} size=\"xl\">\n              <Modal.Header closeButton>\n                  <Modal.Title>{programmeName}</Modal.Title>\n              </Modal.Header>\n\n              <Modal.Body>\n                {loadingCourses ? (\n                <div class=\"d-flex justify-content-center\">\n                    <div class=\"spinner-border text-primary\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n                ) : (\n                <ToolkitProvider\n                    keyField=\"courseCode\"\n                    data={ programmeCourses }\n                    columns={ coursesColumns }\n                    search\n                    >\n                    {\n                        props => (\n                        <div>\n                            <SearchBar { ...props.searchProps } />\n                            <BootstrapTable\n                            { ...props.baseProps } pagination={ paginationFactory(courseOptions) } defaultSorted={ coursesSorted } filter={ filterFactory() }\n                            />\n                        </div>\n                        )\n                    }\n                </ToolkitProvider>\n                )}                           \n              </Modal.Body>\n            </Modal>             \n\n        </>\n    );\n\n\n}\n\nexport default ProgrammesTable;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/SetAdvisingWindow.js",["273","274"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction SetAdvisingWindow() {\n    const notifyEdit = (text) => toast.success(text);\n    const notifyError = (text) => toast.error(text);\n\n    const [validated, setValidated] = useState(false);\n    const [advisingStart, setadvisingStart] = useState(new Date());\n    const [advisingEnd, setadvisingEnd] = useState(new Date());\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        \n\n        const formData = {\n            advisingStart : form.elements.advisingStart.value,\n            advisingEnd : form.elements.advisingEnd.value,\n            semester : form.elements.semester.value\n        }\n\n        if(advisingStart > advisingEnd){\n            notifyError(\"Error, Start Date After End Date\");\n        } else {\n            setValidated(true);\n            setWindow(formData);\n        }\n\n        \n    };\n\n    async function setWindow(data) {\n        try {\n          const res = await fetch(\"http://localhost:5000/admin/academic-advising/window\", {\n            method: \"POST\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n\n          const status = await res.statusText;\n          notifyEdit(\"Advising Window Updated!\");\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n    return (\n        <>\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"advisingStart\">\n                    <Form.Label >Start Date</Form.Label>\n                    <DatePicker required selected={advisingStart} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingStart(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingStart\" />}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"advisingEnd\">\n                    <Form.Label>End Date</Form.Label>\n                    <DatePicker required selected={advisingEnd} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingEnd(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingEnd\" />}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"semester\">\n                    <Form.Label>Semester</Form.Label>\n                    <Form.Control required as=\"select\">\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                    </Form.Control>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Save</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default SetAdvisingWindow;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/EditCourse.js",["275"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction EditCourse({setShow, row, refreshTable}) {\n    const [validated, setValidated] = useState(false);\n\n    //Toast\n    const notifyEdit = (text) => toast.success(text);\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if (form.checkValidity() === false) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n        setValidated(true);\n\n        const formData = {\n            courseCode : (form.elements.courseCode.value).replace(/\\s+/g, ''),\n            courseTitle : form.elements.courseTitle.value,\n            credits : form.elements.credits.value,\n            semester : form.elements.semester.value,\n            level : form.elements.level.value,\n            prerequisites : form.elements.prerequisites.value,\n            description: form.elements.description.value\n        }\n\n        editCourse(formData, row.courseCode)\n    };\n\n    async function editCourse(data, code) {\n        try {\n          const res = await fetch(\"http://localhost:5000/courses/edit/\" + code, {\n            method: \"PUT\",\n            headers: {\n                token: localStorage.getItem(\"token\"),\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n    \n          setShow(false);\n          refreshTable();\n          notifyEdit(data.courseCode + \" Edited!\")\n\n          const status = await res.statusText;\n          \n        } catch (err) {\n          console.error(err.message);\n        }\n    }\n\n\n    return (\n        <>\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"courseCode\">\n                    <Form.Label>Course Code</Form.Label>\n                    <Form.Control required type=\"text\" defaultValue={row.courseCode}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"courseTitle\">\n                    <Form.Label>Course Title</Form.Label>\n                    <Form.Control required type=\"text\" defaultValue={row.courseTitle}/>\n                </Form.Group>\n\n                <Form.Row>\n                    <Form.Group as={Col} md=\"4\" controlId=\"credits\">\n                        <Form.Label>Credits</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.credits}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                            <option>4</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"4\" controlId=\"semester\">\n                        <Form.Label>Semester</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.semester}>\n                            <option>1</option>\n                            <option>2</option>\n                            <option>3</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} md=\"4\" controlId=\"level\">\n                        <Form.Label>Level</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue={row.level}>\n                            <option>I</option>\n                            <option>II</option>\n                            <option>III</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                </Form.Row>\n\n                <Form.Group controlId=\"prerequisites\">\n                    <Form.Label>Prerequisites</Form.Label>\n                    <Form.Control required type=\"text\" defaultValue={row.prerequisites}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"description\">\n                    <Form.Label>Description</Form.Label>\n                    <Form.Control required as=\"textarea\" rows={4} defaultValue={row.description}/>\n                </Form.Group>\n\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\n            </Form>\n\n            <ToastContainer \n                pauseOnHover\n                position=\"bottom-right\"\n            />\n        </>\n    );\n}\n\nexport default EditCourse;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/NavigationBlock.js",[],["276","277"],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/AddAccount.js",["278","279","280","281"],"import React, { useState, useRef } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction AddAccount() {\n    const [validated, setValidated] = useState(false);\n    const formRef = useRef(null);\n\n    const notifyError = (text) => toast.error(text);\n    const notifyEdit = (text) => toast.success(text);\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n        const url = \"\";\n\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else{\n\n            event.preventDefault();\n            event.stopPropagation();\n        \n            const formData = {\n                username : form.elements.username.value,\n                password : form.elements.password.value,\n                confirm_password : form.elements.confirm_password.value,\n                account_type: form.elements.account_type.value\n            }\n\n            if(formData.password != formData.confirm_password){\n                notifyError(\"Passwords Don't Match\")\n            } else {\n\n                if(formData.account_type == \"Staff\"){\n                    addAccount(formData, \"/admin/staff/create\"); \n                } else if(formData.account_type == \"Student\") {\n                    addAccount(formData, \"/admin/students/create\"); \n                }\n\n                setValidated(true);\n\n                formRef.current.reset();\n                setValidated(false);\n            }\n        }\n    };\n\n    const options = {\n        headers: { token: localStorage.token, \"Content-Type\": \"application/json\",}\n    };\n\n    async function addAccount(data, url) {\n        try {\n          const res = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                token: localStorage.token,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          });\n\n          const status = await res.statusText;\n\n          if(status == \"OK\"){\n            notifyEdit(\"Account Added!\");\n          }\n          else{\n            notifyError(\"Error, Account Already Exists.\");\n          }\n\n        } catch (err) {\n            notifyError(err.message);\n        }\n    }\n\n    return (\n        <>\n            <Form ref={formRef} validated={validated} onSubmit={handleSubmit}>\n                <Form.Group controlId=\"account_type\">\n                    <Form.Label>Account Type</Form.Label>\n                    <Form.Control as=\"select\">\n                    <option>Staff</option>\n                    <option>Student</option>\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId=\"username\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control type=\"text\" required/>\n                </Form.Group>\n\n                <Form.Row>\n                    <Col>\n                        <Form.Group controlId=\"password\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" required/>\n                        </Form.Group>\n                    </Col>\n\n                    <Col>\n                        <Form.Group controlId=\"confirm_password\">\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control type=\"password\" required/>\n                        </Form.Group>\n                    </Col>\n                </Form.Row>\n \n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Add</Button></div>\n            </Form>\n\n        </> \n    );\n}\n\nexport default AddAccount;","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/BeforeBot.js",["282"],"import React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { Link } from 'react-router-dom'\nimport { useHistory } from 'react-router-dom';\n\nconst BeforeBot = (props) => {\n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n\n    function onClickHandler() {\n        props.setShowBotButtons(true); // Show \"Back to courses\" and \"Finish advising\" buttons on sidebar\n        history.push({\n            pathname: '/bot'\n        })\n    }\n\n    return (\n      <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <div className=\"card almost-card\">\n                            <div className=\"card-body\">\n                                <p className=\"almost-header blue-txt\">You're almost done!</p>\n                                <p className=\"almost-text\">Would you like to talk to the myAdvisor chatbot for any additional questions?</p>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-6\">\n                                        <button type=\"button\" class=\"btn btn-custom blue-button\" onClick={onClickHandler}>Yes, I would like to talk to the bot</button>\n                                    </div>\n                                    <div className=\"col-sm-6\">\n                                        <Link to=\"/finish\">\n                                            <button type=\"submit\" class=\"btn btn-custom blue-button\">No, finish advising</button>\n                                        </Link>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n      </div>\n    );\n}\n\nexport default BeforeBot;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Finish.js",["283","284","285","286"],"import React, { Component } from \"react\";\nimport \"../assets/css/Finish.css\";\nimport { useHistory } from 'react-router-dom';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nconst Finish = (props) => {\n\n    const history = useHistory(); // Used to redirect to a new path without losing state values\n    const [uploaded, setUploaded] = useState(false); // Boolean value to indicate whether or not the advising session has been uploaded\n\n    // If the user's recommended courses has been lost, redirect to start page to generate them again\n    if (props.recCourses === null) { \n        history.push({\n        pathname: '/start'\n        })\n    }\n\n    useEffect(async() => {\n        props.setProg(100); // Set advising progress to 100%\n        props.setShowBotButtons(false); // Hide \"Back to courses\" and \"Finish advising\" buttons on sidebar\n\n        if (!uploaded) { // If advising session has not yet been uploaded\n            var requestOptions = { // Create POST request\n                method: 'POST',\n                headers: {\n                    token: localStorage.getItem(\"token\"),\n                    \"Content-type\": \"application/json\",\n                },\n                redirect: 'follow'\n            };\n\n            fetch(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`, requestOptions) // Make request to server to parse transcript, upload student details and thier courses to the database\n                .then(response => response.text())\n                .then(result => console.log(result))\n                .catch(error => console.log('error', error));\n            \n            setUploaded(true);\n        }\n    });\n\n    async function uploadAdvisingSession() {\n        try {\n          const {data:response} = await axios.post(`/student/academic-advising/session/${localStorage.getItem(\"username\")}`) //use data destructuring to get data from the promise object\n          return response\n        }\n        catch (error) {\n          console.log(error);\n        }\n      }\n \n\n    return (\n        <div className=\"content\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-sm-10\">\n                        <div className=\"card almost-card\">\n                            <div className=\"card-body\">\n                                <p className=\"almost-header blue-txt\">You're all done with advising!</p>\n                                <p className=\"almost-text\">Here's a list of all the courses you chose:</p>\n                                {\n                                    Array.from({ length: props.chosenCourses.length }, (_, k) => {\n                                        return <p className=\"course-chosen blue-txt\">{props.chosenCourses[k]}</p>\n                                    })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n  \n}\n\nexport default Finish;\n","/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/Sessions.js",[],"/Users/nevashgobin/Documents/myAdvisorDev/myadvisor/src/components/Staff/SessionsTable.js",["287","288","289"],"import React, { useState, useEffect } from \"react\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\n\n//TABLE SETUP\n\n/*\n    columns is used to display specific columns of the data on the table.\n*/\nconst columns = [\n    { dataField: 'id', text: 'Session ID', csvText: 'Session ID', sort: true },\n    { dataField: 'studentID', text: 'Student ID', csvText: 'Student ID', sort: true },\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\n    { dataField: 'admitTerm', text: 'Admit Term', csvText: 'Admit Term', sort: true},\n    { dataField: 'sessionDate', text: 'Session Date', csvText: 'Session Date', sort: true },\n]\n\n/*\n    defaultSorted sorts the table is ascending order based on the sessionDate column.\n*/\nconst defaultSorted = [{\n    dataField: 'sessionDate',\n    order: 'asec'\n}];\n\n/*\n    options is used to configure the table pagination.\n*/\nconst options = {\n    custom: true,\n    paginationSize: 5,\n    pageStartIndex: 1,\n    firstPageText: 'First',\n    prePageText: 'Back',\n    nextPageText: 'Next',\n    lastPageText: 'Last',\n    sizePerPage: 8,\n};\n\nconst { SearchBar, ClearSearchButton  } = Search;\nconst { ExportCSVButton } = CSVExport;\n  \n/*\n    SessionsTable is a component that displays the courses in the system in a table.\n*/\nfunction SessionsTable({sessions, students}) {\n    const [loading, setLoading] = useState(true);\n    const [studentSessionsDetails, setStudentSessionsDetails] = useState([]);\n\n    /*\n        ToolkitProvider is a wrapper for the BootstrapTable context and the related search, export csv and clear search react contexts.  \n    */ \n    const table = ({ paginationProps, paginationTableProps }) => (\n        <>\n            <ToolkitProvider\n                    keyField=\"id\"\n                    data={ studentSessionsDetails }\n                    columns={ columns }\n                    search\n                    exportCSV={{\n                      fileName: 'sessions.csv',\n                    }}\n                >\n                {\n                    props => (\n                    <div>\n                        <SearchBar { ...props.searchProps } />\n                        <ClearSearchButton { ...props.searchProps } />\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } hover/>\n                    </div>\n                    )\n                }\n            </ToolkitProvider>\n            <PaginationListStandalone { ...paginationProps } />\n        </>\n    );\n\n    function studentDetails(){\n        let temp = [];\n        \n        for (var i in sessions){\n            for(var j in students){\n                if(sessions[i].studentID == students[j].studentId){\n                    temp.push(Object.assign({}, students[j], sessions[i]))\n                }\n            }\n        }\n\n        setStudentSessionsDetails(temp);\n\n        if(temp.length !=0 ){\n            setLoading(false);\n        }\n\n    };\n\n    useEffect(() => {\n        studentDetails();\n    }, [sessions, students]);\n\n    return (\n        <>\n            {loading ? (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            ) : (\n            <PaginationProvider pagination={paginationFactory(options)}>\n                { table }\n            </PaginationProvider>\n            )}\n        </>\n\n    );        \n\n}\n\nexport default SessionsTable;",{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","severity":1,"message":"295","line":1,"column":50,"nodeType":"296","messageId":"297","endLine":1,"endColumn":58},{"ruleId":"294","severity":1,"message":"298","line":6,"column":8,"nodeType":"296","messageId":"297","endLine":6,"endColumn":28},{"ruleId":"294","severity":1,"message":"299","line":2,"column":27,"nodeType":"296","messageId":"297","endLine":2,"endColumn":33},{"ruleId":"300","severity":1,"message":"301","line":122,"column":13,"nodeType":"302","messageId":"303","endLine":122,"endColumn":15},{"ruleId":"300","severity":1,"message":"301","line":129,"column":41,"nodeType":"302","messageId":"303","endLine":129,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":131,"column":49,"nodeType":"302","messageId":"303","endLine":131,"endColumn":51},{"ruleId":"300","severity":1,"message":"301","line":147,"column":49,"nodeType":"302","messageId":"303","endLine":147,"endColumn":51},{"ruleId":"300","severity":1,"message":"301","line":149,"column":49,"nodeType":"302","messageId":"303","endLine":149,"endColumn":51},{"ruleId":"300","severity":1,"message":"301","line":163,"column":41,"nodeType":"302","messageId":"303","endLine":163,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":177,"column":41,"nodeType":"302","messageId":"303","endLine":177,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":191,"column":41,"nodeType":"302","messageId":"303","endLine":191,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":205,"column":41,"nodeType":"302","messageId":"303","endLine":205,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":219,"column":41,"nodeType":"302","messageId":"303","endLine":219,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":233,"column":41,"nodeType":"302","messageId":"303","endLine":233,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":247,"column":41,"nodeType":"302","messageId":"303","endLine":247,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":262,"column":41,"nodeType":"302","messageId":"303","endLine":262,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":284,"column":41,"nodeType":"302","messageId":"303","endLine":284,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":298,"column":41,"nodeType":"302","messageId":"303","endLine":298,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":312,"column":41,"nodeType":"302","messageId":"303","endLine":312,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":326,"column":41,"nodeType":"302","messageId":"303","endLine":326,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":340,"column":41,"nodeType":"302","messageId":"303","endLine":340,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":354,"column":41,"nodeType":"302","messageId":"303","endLine":354,"endColumn":43},{"ruleId":"300","severity":1,"message":"301","line":368,"column":41,"nodeType":"302","messageId":"303","endLine":368,"endColumn":43},{"ruleId":"294","severity":1,"message":"304","line":8,"column":11,"nodeType":"296","messageId":"297","endLine":8,"endColumn":15},{"ruleId":"294","severity":1,"message":"305","line":10,"column":14,"nodeType":"296","messageId":"297","endLine":10,"endColumn":23},{"ruleId":"300","severity":1,"message":"301","line":18,"column":34,"nodeType":"302","messageId":"303","endLine":18,"endColumn":36},{"ruleId":"300","severity":1,"message":"301","line":21,"column":34,"nodeType":"302","messageId":"303","endLine":21,"endColumn":36},{"ruleId":"294","severity":1,"message":"306","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"294","severity":1,"message":"307","line":6,"column":8,"nodeType":"296","messageId":"297","endLine":6,"endColumn":21},{"ruleId":"294","severity":1,"message":"308","line":10,"column":12,"nodeType":"296","messageId":"297","endLine":10,"endColumn":19},{"ruleId":"294","severity":1,"message":"309","line":11,"column":12,"nodeType":"296","messageId":"297","endLine":11,"endColumn":18},{"ruleId":"294","severity":1,"message":"310","line":12,"column":11,"nodeType":"296","messageId":"297","endLine":12,"endColumn":18},{"ruleId":"311","severity":1,"message":"312","line":45,"column":77,"nodeType":"313","messageId":"314","endLine":45,"endColumn":79},{"ruleId":"294","severity":1,"message":"306","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"294","severity":1,"message":"315","line":4,"column":10,"nodeType":"296","messageId":"297","endLine":4,"endColumn":19},{"ruleId":"300","severity":1,"message":"301","line":24,"column":36,"nodeType":"302","messageId":"303","endLine":24,"endColumn":38},{"ruleId":"294","severity":1,"message":"306","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"316","severity":1,"message":"317","line":27,"column":5,"nodeType":"296","endLine":27,"endColumn":14,"suggestions":"318"},{"ruleId":"300","severity":1,"message":"301","line":44,"column":44,"nodeType":"302","messageId":"303","endLine":44,"endColumn":46},{"ruleId":"294","severity":1,"message":"319","line":55,"column":20,"nodeType":"296","messageId":"297","endLine":55,"endColumn":30},{"ruleId":"294","severity":1,"message":"320","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":25},{"ruleId":"294","severity":1,"message":"295","line":2,"column":16,"nodeType":"296","messageId":"297","endLine":2,"endColumn":24},{"ruleId":"294","severity":1,"message":"321","line":64,"column":17,"nodeType":"296","messageId":"297","endLine":64,"endColumn":20},{"ruleId":"294","severity":1,"message":"322","line":1,"column":8,"nodeType":"296","messageId":"297","endLine":1,"endColumn":13},{"ruleId":"294","severity":1,"message":"322","line":1,"column":8,"nodeType":"296","messageId":"297","endLine":1,"endColumn":13},{"ruleId":"294","severity":1,"message":"322","line":1,"column":8,"nodeType":"296","messageId":"297","endLine":1,"endColumn":13},{"ruleId":"294","severity":1,"message":"306","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"294","severity":1,"message":"322","line":1,"column":8,"nodeType":"296","messageId":"297","endLine":1,"endColumn":13},{"ruleId":"316","severity":1,"message":"323","line":23,"column":8,"nodeType":"324","endLine":23,"endColumn":10,"suggestions":"325"},{"ruleId":"294","severity":1,"message":"322","line":1,"column":8,"nodeType":"296","messageId":"297","endLine":1,"endColumn":13},{"ruleId":"316","severity":1,"message":"326","line":23,"column":8,"nodeType":"324","endLine":23,"endColumn":10,"suggestions":"327"},{"ruleId":"294","severity":1,"message":"328","line":5,"column":17,"nodeType":"296","messageId":"297","endLine":5,"endColumn":23},{"ruleId":"294","severity":1,"message":"329","line":41,"column":11,"nodeType":"296","messageId":"297","endLine":41,"endColumn":21},{"ruleId":"294","severity":1,"message":"330","line":57,"column":17,"nodeType":"296","messageId":"297","endLine":57,"endColumn":23},{"ruleId":"294","severity":1,"message":"331","line":5,"column":25,"nodeType":"296","messageId":"297","endLine":5,"endColumn":37},{"ruleId":"294","severity":1,"message":"332","line":14,"column":7,"nodeType":"296","messageId":"297","endLine":14,"endColumn":24},{"ruleId":"300","severity":1,"message":"301","line":112,"column":42,"nodeType":"302","messageId":"303","endLine":112,"endColumn":44},{"ruleId":"300","severity":1,"message":"333","line":121,"column":24,"nodeType":"302","messageId":"303","endLine":121,"endColumn":26},{"ruleId":"316","severity":1,"message":"334","line":129,"column":7,"nodeType":"324","endLine":129,"endColumn":27,"suggestions":"335"},{"ruleId":"294","severity":1,"message":"336","line":57,"column":12,"nodeType":"296","messageId":"297","endLine":57,"endColumn":26},{"ruleId":"294","severity":1,"message":"329","line":61,"column":11,"nodeType":"296","messageId":"297","endLine":61,"endColumn":21},{"ruleId":"300","severity":1,"message":"333","line":92,"column":32,"nodeType":"302","messageId":"303","endLine":92,"endColumn":34},{"ruleId":"300","severity":1,"message":"301","line":104,"column":32,"nodeType":"302","messageId":"303","endLine":104,"endColumn":34},{"ruleId":"316","severity":1,"message":"337","line":114,"column":8,"nodeType":"324","endLine":114,"endColumn":10,"suggestions":"338"},{"ruleId":"294","severity":1,"message":"315","line":1,"column":27,"nodeType":"296","messageId":"297","endLine":1,"endColumn":36},{"ruleId":"294","severity":1,"message":"339","line":4,"column":35,"nodeType":"296","messageId":"297","endLine":4,"endColumn":44},{"ruleId":"294","severity":1,"message":"340","line":6,"column":17,"nodeType":"296","messageId":"297","endLine":6,"endColumn":21},{"ruleId":"294","severity":1,"message":"341","line":6,"column":23,"nodeType":"296","messageId":"297","endLine":6,"endColumn":26},{"ruleId":"294","severity":1,"message":"329","line":82,"column":11,"nodeType":"296","messageId":"297","endLine":82,"endColumn":21},{"ruleId":"294","severity":1,"message":"342","line":2,"column":24,"nodeType":"296","messageId":"297","endLine":2,"endColumn":27},{"ruleId":"294","severity":1,"message":"330","line":57,"column":17,"nodeType":"296","messageId":"297","endLine":57,"endColumn":23},{"ruleId":"294","severity":1,"message":"330","line":53,"column":17,"nodeType":"296","messageId":"297","endLine":53,"endColumn":23},{"ruleId":"290","replacedBy":"343"},{"ruleId":"292","replacedBy":"344"},{"ruleId":"294","severity":1,"message":"345","line":4,"column":10,"nodeType":"296","messageId":"297","endLine":4,"endColumn":24},{"ruleId":"300","severity":1,"message":"333","line":29,"column":34,"nodeType":"302","messageId":"303","endLine":29,"endColumn":36},{"ruleId":"294","severity":1,"message":"346","line":40,"column":11,"nodeType":"296","messageId":"297","endLine":40,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":57,"column":21,"nodeType":"302","messageId":"303","endLine":57,"endColumn":23},{"ruleId":"294","severity":1,"message":"306","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"294","severity":1,"message":"306","line":1,"column":17,"nodeType":"296","messageId":"297","endLine":1,"endColumn":26},{"ruleId":"316","severity":1,"message":"347","line":19,"column":5,"nodeType":"296","endLine":19,"endColumn":14,"suggestions":"348"},{"ruleId":"316","severity":1,"message":"349","line":19,"column":15,"nodeType":"313","endLine":40,"endColumn":6},{"ruleId":"294","severity":1,"message":"350","line":42,"column":20,"nodeType":"296","messageId":"297","endLine":42,"endColumn":41},{"ruleId":"300","severity":1,"message":"301","line":85,"column":42,"nodeType":"302","messageId":"303","endLine":85,"endColumn":44},{"ruleId":"300","severity":1,"message":"333","line":93,"column":24,"nodeType":"302","messageId":"303","endLine":93,"endColumn":26},{"ruleId":"316","severity":1,"message":"334","line":101,"column":8,"nodeType":"324","endLine":101,"endColumn":28,"suggestions":"351"},"no-native-reassign",["352"],"no-negated-in-lhs",["353"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'PermanentDrawerRight' is defined but never used.","'Router' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'desc' is assigned a value but never used.","'setCharAt' is defined but never used.","'Component' is defined but never used.","'CourseDetails' is defined but never used.","'clicked' is assigned a value but never used.","'course' is assigned a value but never used.","'history' is assigned a value but never used.","array-callback-return","Array.from() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setUploaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props, processed, details.length, details.degree, details.progress, details.credits, programmes, determineCourses] as a second argument to the useEffect Hook.",["354"],"'getCourses' is defined but never used.","'useState' is defined but never used.","'res' is assigned a value but never used.","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'getDetails'. Either include it or remove the dependency array.","ArrayExpression",["355"],"React Hook useEffect has a missing dependency: 'getCourses'. Either include it or remove the dependency array.",["356"],"'Button' is defined but never used.","'handleShow' is assigned a value but never used.","'status' is assigned a value but never used.","'selectFilter' is defined but never used.","'selectYearOptions' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'studentDetails'. Either include it or remove the dependency array.",["357"],"'studentCourses' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStudentCourses'. Either include it or remove the dependency array.",["358"],"'CSVExport' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'Col' is defined but never used.",["352"],["353"],"'ToastContainer' is defined but never used.","'options' is assigned a value but never used.","React Hook useEffect contains a call to 'setUploaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props, uploaded] as a second argument to the useEffect Hook.",["359"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","'uploadAdvisingSession' is defined but never used.",["360"],"no-global-assign","no-unsafe-negation",{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"367","fix":"373"},"Add dependencies array: [props, processed, details.length, details.degree, details.progress, details.credits, programmes, determineCourses]",{"range":"374","text":"375"},"Update the dependencies array to be: [getDetails]",{"range":"376","text":"377"},"Update the dependencies array to be: [getCourses]",{"range":"378","text":"379"},"Update the dependencies array to be: [sessions, studentDetails, students]",{"range":"380","text":"381"},"Update the dependencies array to be: [getStudentCourses]",{"range":"382","text":"383"},"Add dependencies array: [props, uploaded]",{"range":"384","text":"385"},{"range":"386","text":"381"},[1789,1789],", [props, processed, details.length, details.degree, details.progress, details.credits, programmes, determineCourses]",[582,584],"[getDetails]",[591,593],"[getCourses]",[3944,3964],"[sessions, studentDetails, students]",[3297,3299],"[getStudentCourses]",[1675,1675],", [props, uploaded]",[3288,3308]]