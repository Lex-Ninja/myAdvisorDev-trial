[{"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\index.js":"1","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\App.js":"2","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Main.js":"3","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\sidebar.js":"4","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\CourseList.js":"5","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\CourseDetails.js":"6","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\StudentProfile.js":"7","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Start.js":"8","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Career.js":"9","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\login.js":"10","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\StaffDashboard.js":"11","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\TopBar.js":"12","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Courses.js":"13","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Programmes.js":"14","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Students.js":"15","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Settings.js":"16","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Bot Framework\\webChat.js":"17","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Reports.js":"18","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullCourses.js":"19","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullDetails.js":"20","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullStudentCourses.js":"21","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullCareers.js":"22","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\CourseNode.js":"23","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\DetailsCard.js":"24","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\NoTranscript.js":"25","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\CareerCheck.js":"26","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\StudentCoursesCard.js":"27","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullProgrammes.js":"28","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Calendar.js":"29","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\NavigationBlocks.js":"30","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\AddCourse.js":"31","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\StudentsTable.js":"32","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\CoursesTable.js":"33","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\ProgrammesTable.js":"34","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\SetAdvisingWindow.js":"35","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\AddAccount.js":"36","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\ReportsTable.js":"37","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\EditCourse.js":"38","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\NavigationBlock.js":"39"},{"size":392,"mtime":1614039280897,"results":"40","hashOfConfig":"41"},{"size":478,"mtime":1616735481876,"results":"42","hashOfConfig":"41"},{"size":9314,"mtime":1618325454496,"results":"43","hashOfConfig":"41"},{"size":6339,"mtime":1618325454511,"results":"44","hashOfConfig":"41"},{"size":9121,"mtime":1618325454493,"results":"45","hashOfConfig":"41"},{"size":8795,"mtime":1618325454492,"results":"46","hashOfConfig":"41"},{"size":21656,"mtime":1618325454510,"results":"47","hashOfConfig":"41"},{"size":6905,"mtime":1618325454509,"results":"48","hashOfConfig":"41"},{"size":5004,"mtime":1618325454489,"results":"49","hashOfConfig":"41"},{"size":5878,"mtime":1618325454511,"results":"50","hashOfConfig":"41"},{"size":1381,"mtime":1614039280890,"results":"51","hashOfConfig":"41"},{"size":1309,"mtime":1617910270460,"results":"52","hashOfConfig":"41"},{"size":3665,"mtime":1618325454500,"results":"53","hashOfConfig":"41"},{"size":1510,"mtime":1618325454502,"results":"54","hashOfConfig":"41"},{"size":1283,"mtime":1618325454506,"results":"55","hashOfConfig":"41"},{"size":1216,"mtime":1618325454505,"results":"56","hashOfConfig":"41"},{"size":352,"mtime":1618325454487,"results":"57","hashOfConfig":"41"},{"size":1346,"mtime":1617910270450,"results":"58","hashOfConfig":"41"},{"size":647,"mtime":1615427762330,"results":"59","hashOfConfig":"41"},{"size":690,"mtime":1616735481885,"results":"60","hashOfConfig":"41"},{"size":706,"mtime":1616735481886,"results":"61","hashOfConfig":"41"},{"size":647,"mtime":1615427762330,"results":"62","hashOfConfig":"41"},{"size":2295,"mtime":1618325454494,"results":"63","hashOfConfig":"41"},{"size":7968,"mtime":1618325454495,"results":"64","hashOfConfig":"41"},{"size":2716,"mtime":1618325454497,"results":"65","hashOfConfig":"41"},{"size":939,"mtime":1618325454490,"results":"66","hashOfConfig":"41"},{"size":1590,"mtime":1617910270457,"results":"67","hashOfConfig":"41"},{"size":655,"mtime":1617910270444,"results":"68","hashOfConfig":"41"},{"size":1436,"mtime":1618325454499,"results":"69","hashOfConfig":"41"},{"size":1993,"mtime":1617910270447,"results":"70","hashOfConfig":"41"},{"size":5443,"mtime":1618325454499,"results":"71","hashOfConfig":"41"},{"size":7190,"mtime":1618325454507,"results":"72","hashOfConfig":"41"},{"size":4445,"mtime":1617910270446,"results":"73","hashOfConfig":"41"},{"size":5780,"mtime":1618325454503,"results":"74","hashOfConfig":"41"},{"size":3400,"mtime":1618325454504,"results":"75","hashOfConfig":"41"},{"size":3869,"mtime":1618325454498,"results":"76","hashOfConfig":"41"},{"size":3473,"mtime":1617910270452,"results":"77","hashOfConfig":"41"},{"size":4604,"mtime":1618325454501,"results":"78","hashOfConfig":"41"},{"size":583,"mtime":1614830769290,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1if068b",{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"82"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"82"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"82"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"82"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"82"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"82"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"82"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\index.js",[],["185","186"],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\App.js",["187","188"],"import { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport Main from './components/Main';\r\n\r\nimport './App.css';\r\nimport PermanentDrawerRight from \"./components/sidebar\";\r\n\r\nfunction App () {\r\n\r\n  return (\r\n      <Router>\r\n        <Switch>\r\n          <Route\r\n            path=\"/\"\r\n            render={(props) => <Main {...props} />}\r\n          />\r\n        </Switch>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Main.js",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],"import React, { useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\r\n\r\n//Student Imports\r\nimport StudentProfile from './StudentProfile';\r\nimport CourseList from './CourseList';\r\nimport CourseDetails from './CourseDetails';\r\nimport Career from './Career';\r\nimport Start from './Start';\r\nimport PermanentDrawerRight from \"./sidebar\";\r\n\r\n//Staff Imports\r\nimport StaffDashboard from './Staff/StaffDashboard';\r\nimport StaffCourses from './Staff/Courses';\r\nimport Students from './Staff/Students';\r\nimport Settings from './Staff/Settings';\r\nimport Reports from './Staff/Reports';\r\nimport Programmes from './Staff/Programmes';\r\n\r\n//Global Imports\r\nimport \"../App.css\"\r\nimport \"../assets/css/Staff.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Login from \"./login\";\r\nimport TopBar from '../components/TopBar';\r\nimport ReactWebChat from \"../components/Bot Framework/webChat\";\r\n\r\nfunction Main() {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(localStorage.getItem(\"auth\"));\r\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\r\n  const [recCourses, setRecCourses] = useState(null);\r\n  const [careerRecCourses, setCareerRecCourses] = useState(null);\r\n  const [chosenCourses, setChosenCourses] = useState([]);\r\n  const [show, setShow] = useState(true);\r\n  const [progress, setProgress] = useState(0);\r\n  const [degProgress, setDegProgress] = useState(0);\r\n  const [newDeg, setNewDeg] = useState(0);\r\n  const [credits, setCredits] = useState(0);\r\n  const [hide, setHide] = useState(false);\r\n  const [showBackBtn, setShowBackBtn] = useState(true);\r\n  const [loading, setLoading] = useState(true);\r\n  const [year, setYear] = useState(1);\r\n  const [warning, setWarning] = useState(false);\r\n\r\n  const setAuth = (boolean) => {\r\n    setIsAuthenticated(boolean);\r\n  };\r\n\r\n  const setType = (value) => {\r\n    setUser(value);\r\n  };\r\n\r\n  const setRecommended = (value) => {\r\n    setRecCourses(value);\r\n  };\r\n\r\n  const setCareerRecommended = (value) => {\r\n    setCareerRecCourses(value);\r\n  };\r\n\r\n  const setDisplay = (value) => {\r\n    setShow(value);\r\n  };\r\n\r\n  const setProg = (value) => {\r\n    setProgress(value);\r\n  };\r\n\r\n  const setDegProg = (value) => {\r\n    setDegProgress(value);\r\n  };\r\n\r\n  const setNewDegProg = (value) => {\r\n    setNewDeg(value);\r\n  };\r\n\r\n  const setCreds = (value) => {\r\n    setCredits(value);\r\n  };\r\n\r\n  const setHidden = (value) => {\r\n    setHide(value);\r\n  };\r\n\r\n  const setShowBack = (value) => {\r\n    setShowBackBtn(value);\r\n  };\r\n\r\n  const setLoad = (value) => {\r\n    setLoading(value);\r\n  };\r\n\r\n  const setLevel = (value) => {\r\n    setYear(value);\r\n  };\r\n\r\n  const setAcWarning = (value) => {\r\n    setWarning(value);\r\n  };\r\n\r\n  const setChosen = (value) => {\r\n    setChosenCourses(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-panel\">\r\n      {user ? <TopBar hide={hide}></TopBar> : null}\r\n      {user == \"student\" ? <PermanentDrawerRight hide={hide} recCourses={recCourses} progress={progress} degProgress={degProgress} credits={credits} show={show} setDisplay={setDisplay} loading={loading} warning={warning} newDeg={newDeg}/> : null}\r\n      <Switch>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"student\"){\r\n                return(<Redirect to=\"/home\"/>)\r\n              } else if (isAuthenticated && user==\"admin\"){\r\n                return(<Redirect to=\"/staff\"/>)\r\n              } else {\r\n                return(<Redirect to=\"/login\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n\r\n        <Route\r\n          exact\r\n          path=\"/login\"\r\n          render={(props) =>\r\n            {\r\n              if(!isAuthenticated){\r\n                return <Login {...props} setAuth={setAuth} setType={setType}/>\r\n              } else if (isAuthenticated && user==\"admin\"){\r\n                return(<Redirect to=\"/staff\" />)\r\n              } else if (isAuthenticated && user==\"student\"){\r\n                return(<Redirect to=\"/home\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n\r\n        {/*Student Routes*/}\r\n\r\n        <Route\r\n          exact\r\n          path=\"/home\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"student\"){\r\n                return <StudentProfile {...props} setRecommended={setRecommended} setDisplay={setDisplay} setProg={setProg} setDegProg={setDegProg} setCreds={setCreds} setHidden={setHidden} setLoad={setLoad} setLevel={setLevel} setAcWarning={setAcWarning} recCourses={recCourses}/>\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n\r\n        <Route\r\n          exact\r\n          path=\"/courses\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"student\"){\r\n                return <CourseList {...props} setProg={setProg} setHidden={setHidden} setDisplay={setDisplay} setChosen={setChosen} setNewDegProg={setNewDegProg} showBackBtn={showBackBtn} recCourses={recCourses} careerRecCourses={careerRecCourses} chosenCourses={chosenCourses} newDeg={newDeg}/>\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n\r\n        <Route\r\n          exact\r\n          path=\"/coursedetails\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"student\"){\r\n                return <CourseDetails {...props} />\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n\r\n        <Route\r\n          exact\r\n          path=\"/career\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"student\"){\r\n                return <Career {...props} setDisplay={setDisplay} setProg={setProg} setCareerRecommended={setCareerRecommended} year={year} recCourses={recCourses}/>\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n\r\n        <Route\r\n          exact\r\n          path=\"/start\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"student\"){\r\n                return <Start {...props} setHidden={setHidden} setDegProg={setDegProg} setCreds={setCreds} setShowBack={setShowBack} setRecommended={setRecommended} recCourses={recCourses}/>\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />   \r\n\r\n        {/*Bot Route*/}\r\n        <Route\r\n          exact\r\n          path=\"/bot\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"student\"){\r\n                return (\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-10\">\r\n                    <ReactWebChat {...props} />\r\n                  </div>\r\n                </div>\r\n               )\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />  \r\n\r\n\r\n        {/*Staff Routes*/}\r\n        <Route\r\n          exact\r\n          path=\"/staff\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"admin\"){\r\n                return <StaffDashboard {...props} />\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />        \r\n\r\n        <Route\r\n          exact\r\n          path=\"/staff/courses\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"admin\"){\r\n                return <StaffCourses {...props} />\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n\r\n        <Route\r\n          exact\r\n          path=\"/staff/programmes\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"admin\"){\r\n                return <Programmes {...props} />\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n\r\n        <Route\r\n          exact\r\n          path=\"/staff/students\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"admin\"){\r\n                return <Students {...props} />\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n\r\n        <Route\r\n          exact\r\n          path=\"/staff/settings\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"admin\"){\r\n                return <Settings {...props} />\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />\r\n        \r\n        <Route\r\n          exact\r\n          path=\"/staff/reports\"\r\n          render={(props) =>\r\n            {\r\n              if(isAuthenticated && user==\"admin\"){\r\n                return <Reports {...props} />\r\n              } else {\r\n                return(<Redirect to=\"/\" />)\r\n              }\r\n            }\r\n          }\r\n        />                        \r\n\r\n\r\n\r\n\r\n      </Switch>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\sidebar.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\CourseList.js",["207","208","209","210","211","212","213","214"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport CourseNode from './CourseNode'\r\nimport PullCourses from \"./PullCourses\";\r\nimport \"../assets/css/Courses.css\";\r\nimport CourseDetails from \"./CourseDetails\";\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CourseList = (props) => { \r\n    const [clicked, setClicked] = useState(false);\r\n    const [course, setCourse] = useState(null);\r\n    const [all, setAll] = useState(true);\r\n    const [core, setCore] = useState(false);\r\n    const [career, setCareer] = useState(false);\r\n    const [chosen, setChosen] = useState(false);\r\n    const [chosenList, setChosenList] = useState([]);\r\n\r\n    const history = useHistory();\r\n\r\n    const nodeClickHandler = (course) => {\r\n      setClicked(true)\r\n      setCourse(course)\r\n    }\r\n \r\n    var courses = PullCourses();\r\n\r\n    let recCourses = undefined;\r\n    let careerRecCourses = undefined;\r\n    \r\n    if (props.recCourses) {\r\n      recCourses = props.recCourses;\r\n    }\r\n    else {\r\n      history.push({\r\n        pathname: '/home'\r\n      })\r\n    }\r\n\r\n    if (props.careerRecCourses) {\r\n      careerRecCourses = props.careerRecCourses;\r\n    }\r\n    else {\r\n      careerRecCourses = [];\r\n    }\r\n\r\n    useEffect(() => {\r\n      props.setProg(60);\r\n      props.setHidden(false);\r\n      props.setDisplay(false);\r\n    })\r\n\r\n    function allClick() {\r\n      if (core || career || chosen) {\r\n        setAll(true);\r\n        setCore(false);\r\n        setCareer(false);\r\n        setChosen(false);\r\n      }\r\n    }\r\n\r\n    function coreClick() {\r\n      if (all || career || chosen) {\r\n        setAll(false);\r\n        setCore(true);\r\n        setCareer(false);\r\n        setChosen(false);\r\n      }\r\n    }\r\n\r\n    function careerClick() {\r\n      if (core || all || chosen) {\r\n        setAll(false);\r\n        setCore(false);\r\n        setCareer(true);\r\n        setChosen(false);\r\n      }\r\n    }\r\n\r\n    function chosenClick() {\r\n      if (core || all || career) {\r\n        setAll(false);\r\n        setCore(false);\r\n        setCareer(false);\r\n        setChosen(true);\r\n      }\r\n    }\r\n\r\n    function onChange(event, credits) { \r\n      var chosenArray = props.chosenCourses;\r\n      var clear = false;\r\n      if (event.currentTarget.checked === true) {\r\n        chosenArray.push(event.currentTarget.value);\r\n        props.setNewDegProg(props.newDeg + credits);\r\n      }\r\n      else {\r\n        while (!clear) {\r\n          var index = chosenArray.indexOf(event.currentTarget.value);\r\n          if (index > -1) {\r\n            chosenArray.splice(index, 1);\r\n            props.setNewDegProg(props.newDeg - credits);\r\n          }\r\n          else {\r\n            clear = true;\r\n          }\r\n        }\r\n        clear = false;\r\n      }\r\n      setChosenList(chosenArray);\r\n      props.setChosen(chosenArray);\r\n    }\r\n\r\n    return (\r\n      <div className=\"content\">\r\n            <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-10\">\r\n                <p className=\"header blue-txt\">Select Courses</p>\r\n                <div className=\"card details-card outer-card\">\r\n                    <div className=\"card-body\">\r\n                        <p className=\"courselist-card-text\">Click on a course to see more details</p>\r\n                        <p className=\"courselist-card-text\">Check the Add box if you are interested in pursuing a course</p>\r\n                        <div className=\"row tab-group\">\r\n                          { all ? (\r\n\r\n                            <div className=\"col-sm-3\">\r\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={allClick}>All Courses</button>\r\n                            </div> ) : (\r\n\r\n                            <div className=\"col-sm-3\">\r\n                              <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={allClick}>All Courses</button>\r\n                            </div>\r\n\r\n                          ) }\r\n                          { core ? (\r\n\r\n                            <div className=\"col-sm-3\">\r\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={coreClick}>Core Courses</button>\r\n                            </div> ) : ( \r\n                            \r\n                            <div className=\"col-sm-3\">\r\n                              <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={coreClick}>Core Courses</button>\r\n                            </div>\r\n\r\n                          ) }\r\n                          { career ? (\r\n\r\n                            <div className=\"col-sm-3\">\r\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={careerClick}>Career Specific Courses</button>\r\n                            </div> ) : (\r\n\r\n                            <div className=\"col-sm-3\">\r\n                             <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={careerClick}>Career Specific Courses</button>\r\n                            </div>\r\n                          ) }\r\n                          { chosen ? (\r\n                            <div className=\"col-sm-3\">\r\n                              <button type=\"button\" class=\"btn btn-custom tab-button blue-button\" onClick={chosenClick}>Your Chosen Courses</button>\r\n                            </div> ) : (\r\n\r\n                            <div className=\"col-sm-3\">\r\n                            <button type=\"button\" class=\"btn btn-custom tab-button fade-button\" onClick={chosenClick}>Your Chosen Courses</button>\r\n                            </div>\r\n                          ) }\r\n                        </div>\r\n                        <div className=\"card courselist-card custom-scroll\">\r\n                            <div className=\"card-body\">{\r\n                              all ? (\r\n                              Array.from({ length: courses.length }, (_, k) => {\r\n                                if (recCourses.includes(courses[k].courseCode)) {\r\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \r\n                                }\r\n                              }) \r\n                              ) : core ? (\r\n                              Array.from({ length: courses.length }, (_, k) => {\r\n                                if (recCourses.includes(courses[k].courseCode) && courses[k].type === \"Core\") {\r\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \r\n                                }\r\n                              }) \r\n                              ) : career ? (\r\n                              Array.from({ length: courses.length }, (_, k) => {\r\n                                if (careerRecCourses.includes(courses[k].courseCode)) {\r\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \r\n                                }\r\n                              }) \r\n                              ) : chosen ? (\r\n                              Array.from({ length: courses.length }, (_, k) => {\r\n                                if (props.chosenCourses.includes(courses[k].courseCode)) {\r\n                                  return <CourseNode course={courses[k]} clickHandler={nodeClickHandler} onChange={onChange} chosen={props.chosenCourses}></CourseNode>    \r\n                                }\r\n                              }) \r\n                              ) : (null)\r\n                            }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                { props.showBackBtn ? (\r\n                  <div className=\"row button-row\">\r\n                      <div className=\"col-sm-2\">\r\n                        <Link to=\"/career\">\r\n                          <button type=\"submit\" class=\"btn btn-custom back-button blue-button\">Back</button>\r\n                        </Link>\r\n                      </div>          \r\n                      <div className=\"col-sm-2 offset-sm-8\">\r\n                      <Link to=\"/bot\">\r\n                        <button type=\"submit\" class=\"btn btn-customnext-button blue-button\">Next</button>\r\n                        </Link>\r\n                      </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"row button-row\">        \r\n                      <div className=\"col-sm-2 offset-sm-8\">\r\n                        <Link to=\"/bot\">\r\n                          <button type=\"submit\" class=\"btn btn-custom next-button blue-button\">Next</button>\r\n                        </Link>\r\n                      </div>\r\n                  </div>\r\n                ) }\r\n            </div>\r\n            </div>\r\n            </div>\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default CourseList;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\CourseDetails.js",["215","216"],"import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport axios from \"axios\";\r\n\r\nclass CourseDetails extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            courseCareers: [],\r\n            reqFor: []\r\n        }\r\n        this.getCourseCareers = this.getCourseCareers.bind(this);\r\n        this.determineCourseCareers = this.determineCourseCareers.bind(this);\r\n        this.getCourseRequisitesFor = this.getCourseRequisitesFor.bind(this);\r\n        this.determineCourseRequisitesFor = this.determineCourseRequisitesFor.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.determineCourseCareers();\r\n        this.determineCourseRequisitesFor();\r\n    }\r\n\r\n    async getCourseCareers(id) {\r\n        try {\r\n            const {data:response} = await axios.get(`/courses/careers/${id}`) //use data destructuring to get data from the promise object\r\n            return response\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async getCourseRequisitesFor(courseCode) {\r\n        try {\r\n            const {data:response} = await axios.get(`/courses/prereqs/${courseCode}`) //use data destructuring to get data from the promise object\r\n            return response\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async determineCourseCareers() {\r\n        var courseCareers = [];\r\n        courseCareers = await this.getCourseCareers(this.props.location.state.course.id);\r\n        this.setState({\r\n            courseCareers: courseCareers\r\n        });\r\n    }\r\n\r\n    async determineCourseRequisitesFor() {\r\n        var reqFor = [];\r\n        var reqForResponse;\r\n        reqForResponse = await this.getCourseRequisitesFor(this.props.location.state.course.courseCode);\r\n        for (var i=0; i<reqForResponse.length; i++) {\r\n            reqFor.push(reqForResponse[i].courseCode);\r\n        }\r\n        if (reqFor.length === 0) {\r\n            reqFor.push(\"None\");\r\n        }\r\n        this.setState({\r\n            reqFor: reqFor\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const prereqs = () => {\r\n            var prereq = this.props.location.state.course.prerequisites;\r\n            if (prereq.length > 8) {\r\n                if (prereq.charAt(9) == \"|\") {\r\n                    prereq = prereq.slice(0, 8) + \" OR \" + prereq.slice(-8);\r\n                }\r\n                if (prereq.charAt(9) == \"&\") {\r\n                    prereq = prereq.slice(0, 8) + \" AND \" + prereq.slice(-8);\r\n                }\r\n            }\r\n            return prereq;\r\n        }\r\n\r\n    return (\r\n      <div className=\"content\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-10\">\r\n                        <p className=\"header blue-txt\">Select Courses</p>\r\n                        <div className=\"card details-card\">\r\n                            <div className=\"card-body\">\r\n                                <p className=\"course-code blue-txt\">{this.props.location.state.course.courseCode}</p>\r\n                                <p className=\"course-title\">{this.props.location.state.course.courseTitle}</p>\r\n                                <div className=\"prereqs\">\r\n                                    <span className=\"prereq-header blue-txt\">Pre-requisites: </span>\r\n                                    <span className=\"prereq-courses\">{prereqs()}</span>\r\n                                </div>\r\n                                <div className=\"reqfor\">\r\n                                    <span className=\"reqfor-header blue-txt\">Required for: </span>\r\n                                    {\r\n                                        Array.from({ length: this.state.reqFor.length }, (_, k) => {\r\n                                            if (k !== this.state.reqFor.length-1 )\r\n                                                return <span className=\"reqfor-courses\">{this.state.reqFor[k]}, </span>\r\n                                            else \r\n                                                return <span className=\"reqfor-courses\">{this.state.reqFor[k]}</span>\r\n                                        }) \r\n                                    }\r\n                                </div>\r\n                                <div className=\"career\">\r\n                                    <span className=\"career-header blue-txt\">Career Tags: </span>\r\n                                    {\r\n                                        Array.from({ length: this.state.courseCareers.length }, (_, k) => {\r\n                                            if (k !== this.state.courseCareers.length-1 )\r\n                                                return <span className=\"career-tags\">{this.state.courseCareers[k]}, </span>\r\n                                            else \r\n                                                return <span className=\"career-tags\">{this.state.courseCareers[k]}</span>\r\n                                        }) \r\n                                    }\r\n                                </div>\r\n                                <p className=\"course-desc\">{this.props.location.state.course.description}</p>\r\n                                <p className=\"assessment-header blue-txt\">Assessment</p>\r\n                                {this.props.location.state.course.coursework != null ? (\r\n                                    <div className=\"row assessment\">\r\n                                        <div className=\"col-sm-2\">\r\n                                            <p className=\"assessment-type\">Coursework:</p>\r\n                                        </div>\r\n                                        <div className=\"col-sm-2\">\r\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.coursework}</p>\r\n                                        </div>\r\n                                    </div> ) : null\r\n                                }\r\n                                {this.props.location.state.course.finalExam != null ? (\r\n                                    <div className=\"row assessment\">\r\n                                        <div className=\"col-sm-2\">\r\n                                            <p className=\"assessment-type\">Final Exam:</p>\r\n                                        </div>\r\n                                        <div className=\"col-sm-2\">\r\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.finalExam}</p>\r\n                                        </div>\r\n                                    </div> ) : null\r\n                                }\r\n                                {this.props.location.state.course.individualProjectPres != null ? (\r\n                                    <div className=\"row assessment\">\r\n                                        <div className=\"col-sm-2\">\r\n                                            <p className=\"assessment-type\">Individual Project Presentation:</p>\r\n                                        </div>\r\n                                        <div className=\"col-sm-2\">\r\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.individualProjectPres}</p>\r\n                                        </div>\r\n                                    </div> ) : null\r\n                                }\r\n                                {this.props.location.state.course.groupProjectPres != null ? (\r\n                                    <div className=\"row assessment\">\r\n                                        <div className=\"col-sm-2\">\r\n                                            <p className=\"assessment-type\">Group Project Presentation:</p>\r\n                                        </div>\r\n                                        <div className=\"col-sm-2\">\r\n                                            <p className=\"assessment-weight\">{this.props.location.state.course.groupProjectPres}</p>\r\n                                        </div>\r\n                                    </div> ) : null\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-2\">\r\n                                <Link to=\"/courses\">\r\n                                    <button type=\"button\" class=\"btn btn-custom back-button blue-button\">Back</button>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CourseDetails;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\StudentProfile.js",["217","218","219","220","221"],"import React, { Component } from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"../assets/css/StudentProfile.css\"\r\nimport DetailsCard from \"./DetailsCard\";\r\nimport NoTranscript from \"./NoTranscript\";\r\nimport PullDetails from \"./PullDetails\";\r\nimport PullStudentCourses from \"./PullStudentCourses\";\r\nimport PullProgrammes from \"./PullProgrammes\";\r\nimport StudentCoursesCard from \"./StudentCoursesCard\";\r\nimport axios from \"axios\"\r\n\r\nconst StudentProfile = (props) => {\r\n\r\n    const [uploaded, setUploaded] = useState(true);\r\n    const [processed, setProcessed] = useState(false);\r\n   \r\n\r\n\r\n    function uploadedHandler() {\r\n        window.location.reload();\r\n    }\r\n\r\n    var details = PullDetails(localStorage.getItem(\"username\"));\r\n    var studentCourses = PullStudentCourses(localStorage.getItem(\"username\"));\r\n    var programmes = PullProgrammes();\r\n \r\n    useEffect(() => {\r\n        props.setDisplay(true);\r\n        props.setHidden(false);\r\n        if (!processed) {\r\n            if (details.gpa < 2.0 && details.gpa != 0) {\r\n                props.setAcWarning(true);\r\n            }\r\n            if (details.length === 0) {\r\n                setUploaded(false);\r\n                props.setDegProg(0);\r\n                props.setCreds(93);\r\n            }\r\n            else {\r\n                setUploaded(true);\r\n                props.setDegProg(details.progress);\r\n                props.setCreds(93 - details.credits);\r\n            }\r\n            if (details.degree === \"Comp Science (Special) BSC S\") {\r\n                var studentProgramme = \"Computer Science (Special)\"\r\n                for (var i=0; i<programmes.length; i++) {\r\n                    if (programmes[i].name == studentProgramme) {\r\n                        var programmeId = programmes[i].id;\r\n                    }\r\n                }\r\n                if (programmeId) {\r\n                    determineCourses(programmeId)\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    async function getCourses() {\r\n        try {\r\n          const {data:response} = await axios.get('/courses/all') //use data destructuring to get data from the promise object\r\n          return response\r\n        }\r\n    \r\n        catch (error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n\r\n    async function getProgrammeCourses(id) {\r\n        try {\r\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\r\n          return response\r\n        }\r\n    \r\n        catch (error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n\r\n    let noCreditGrade = [\"F1\", \"F2\", \"F3\", \"DIS\", \"EI\", \"FA\", \"FAS\", \"FC\", \"FE\", \"FO\", \"FP\", \"FT\", \"FWS\", \"FTS\", \"AB\", \"AM\", \"AMS\", \"DB\", \"DEF\", \"EQ\", \"FM\", \"FMS\", \"FWR\", \"I\", \"LW\", \"NCR\", \"NFC\", \"NP\", \"NR\", \"NV\", \"W\"]\r\n\r\n    \r\n    function splitBySem(coreRes, courses) {\r\n        var semesterArr = [[]];\r\n        for (var key in coreRes) {\r\n            for (var i=0; i<courses.length; i++) {\r\n                if (key === courses[i].courseCode) {\r\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"I\")) {\r\n                        if (!semesterArr[0]) {\r\n                            semesterArr[0] = [];\r\n                        }\r\n                        semesterArr[0].push({\r\n                            courseCode: key,\r\n                            grade: coreRes[key]\r\n                        });\r\n                        break;\r\n                    }\r\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"I\")) {\r\n                        if (!semesterArr[1]) {\r\n                            semesterArr[1] = [];\r\n                        }\r\n                        semesterArr[1].push({\r\n                            courseCode:   key,\r\n                            grade: coreRes[key]\r\n                        });\r\n                        break;\r\n                    }\r\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"II\")) {\r\n                        if (!semesterArr[2]) {\r\n                            semesterArr[2] = [];\r\n                        }\r\n                        semesterArr[2].push({\r\n                            courseCode:   key,\r\n                            grade: coreRes[key]\r\n                        });\r\n                        break;\r\n                    }\r\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"II\")) {\r\n                        if (!semesterArr[3]) {\r\n                            semesterArr[3] = [];\r\n                        }\r\n                        semesterArr[3].push({\r\n                            courseCode:   key,\r\n                            grade: coreRes[key]\r\n                        });\r\n                        break;\r\n                    }\r\n                    if ((courses[i].semester === \"1\" && courses[i].level === \"III\")) {\r\n                        if (!semesterArr[4]) {\r\n                            semesterArr[4] = [];\r\n                        }\r\n                        semesterArr[4].push({\r\n                            courseCode:   key,\r\n                            grade: coreRes[key]\r\n                        });\r\n                        break;\r\n                    }\r\n                    if ((courses[i].semester === \"2\" && courses[i].level === \"III\")) {\r\n                        if (!semesterArr[5]) {\r\n                            semesterArr[5] = [];\r\n                        }\r\n                        semesterArr[5].push({\r\n                            courseCode:   key,\r\n                            grade: coreRes[key]\r\n                        });\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return semesterArr;\r\n    }\r\n\r\n    function getCoreCourses(courses) {\r\n        var core = [];\r\n        for (var i=0; i<courses.length; i++) {\r\n            if (courses[i].type === \"Core\") {\r\n                core.push(courses[i]);\r\n            }\r\n        }\r\n        return core;\r\n    }\r\n\r\n    function recommendCoreCourses(coreSemesterArr, year, currentSem, courses) {\r\n        var coreY1S1 = coreSemesterArr[0]; // Core courses offered in Year 1 Semester 1\r\n        var coreY1S2 = coreSemesterArr[1];\r\n        var coreY2S1 = coreSemesterArr[2];\r\n        var coreY2S2 = coreSemesterArr[3];\r\n        var coreY3S1 = coreSemesterArr[4];\r\n        var coreY3S2 = coreSemesterArr[5];\r\n        var recCourses = courses;\r\n        var key;\r\n\r\n        if (year === 1 && currentSem === 1) { //If student is in Year 1 Semester 1\r\n            for (key in coreY1S1) { // Iterate core courses offered in year 1 semester 1\r\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") { // If course has not been done before or student failed it in the past\r\n                    if (!courses.includes(coreY1S1[key].courseCode)) // If course wasn't already recommended\r\n                        recCourses.push(coreY1S1[key].courseCode) // Add course to recommended course array\r\n                }\r\n            }\r\n        }\r\n        if (year === 1 && currentSem === 2) {\r\n            for (key in coreY1S2) {\r\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY1S2[key].courseCode))\r\n                        recCourses.push(coreY1S2[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        if (year === 2 && currentSem === 1) {\r\n            for (key in coreY2S1) {\r\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY2S1[key].courseCode))\r\n                        recCourses.push(coreY2S1[key].courseCode)\r\n                }\r\n            }\r\n            for (key in coreY1S1) { // Look for courses being offered in Year 1 Semester 1 that student didnt do or failed\r\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY1S1[key].courseCode))\r\n                        recCourses.push(coreY1S1[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        if (year === 2 && currentSem === 2) {\r\n            for (key in coreY2S2) {\r\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY2S2[key].courseCode))\r\n                        recCourses.push(coreY2S2[key].courseCode)\r\n                }\r\n            }\r\n            for (key in coreY1S2) {\r\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY1S2[key].courseCode))\r\n                        recCourses.push(coreY1S2[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        if (year === 3 && currentSem === 1) {\r\n            for (key in coreY3S1) {\r\n                if (coreY3S1[key].grade === \"N\" || coreY3S1[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY3S1[key].courseCode))\r\n                        recCourses.push(coreY3S1[key].courseCode)\r\n                }\r\n            }\r\n            for (key in coreY2S1) {\r\n                if (coreY2S1[key].grade === \"N\" || coreY2S1[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY2S1[key].courseCode))\r\n                        recCourses.push(coreY2S1[key].courseCode)\r\n                }\r\n            }\r\n            for (key in coreY1S1) {\r\n                if (coreY1S1[key].grade === \"N\" || coreY1S1[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY1S1[key].courseCode))\r\n                        recCourses.push(coreY1S1[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        if (year === 3 && currentSem === 2) {\r\n            for (key in coreY3S2) {\r\n                if (coreY3S2[key].grade === \"N\" || coreY3S2[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY3S2[key].courseCode))\r\n                        recCourses.push(coreY3S2[key].courseCode)\r\n                }\r\n            }\r\n            for (key in coreY2S2) {\r\n                if (coreY2S2[key].grade === \"N\" || coreY2S2[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY2S2[key].courseCode))\r\n                        recCourses.push(coreY2S2[key].courseCode)\r\n                }\r\n            }\r\n            for (key in coreY1S2) {\r\n                if (coreY1S2[key].grade === \"N\" || coreY1S2[key].grade === \"F\") {\r\n                    if (!courses.includes(coreY1S2[key].courseCode))\r\n                        recCourses.push(coreY1S2[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        return recCourses;\r\n    }\r\n\r\n    function removeCoursesNoPrereq(recCourses, courses, studentCourses) {\r\n        var index;\r\n        for (var i=0; i<courses.length; i++) {\r\n            if(recCourses.includes(courses[i].courseCode)) {\r\n                var prereq = courses[i].prerequisites;\r\n                if (prereq.length === 8) {\r\n                    if (!(studentCourses[prereq] === \"P\")) {\r\n                        index = recCourses.indexOf(courses[i].courseCode);\r\n                            if (index > -1) {\r\n                                recCourses.splice(index, 1);\r\n                            }\r\n                    }\r\n                }\r\n                if (prereq.length > 8) {\r\n                    var prereq1 = prereq.slice(0, 8);\r\n                    var prereq2 = prereq.slice(-8);\r\n                    if (prereq.charAt(9) === \"|\") {\r\n                        if (!((studentCourses[prereq1] === \"P\") || (studentCourses[prereq2] === \"P\"))) {\r\n                            index = recCourses.indexOf(courses[i].courseCode);\r\n                            if (index > -1) {\r\n                                recCourses.splice(index, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (prereq.charAt(9) === \"&\") {\r\n                        if (!((studentCourses[prereq1] === \"P\") && (studentCourses[prereq2] === \"P\"))) {\r\n                            index = recCourses.indexOf(courses[i].courseCode);\r\n                            if (index > -1) {\r\n                                recCourses.splice(index, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function determineStudentCourses(core) {\r\n        var coreRes = {};\r\n        for (var i=0; i<core.length; i++){\r\n            for (var j=0; j<studentCourses.length; j++) {\r\n                if ((studentCourses[j].courseCode === core[i].courseCode) && (studentCourses[j].grade === \"IP\")){\r\n                    coreRes[`${core[i].courseCode}`] = \"IP\";\r\n                }\r\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && !(noCreditGrade.includes(studentCourses[j].grade))){\r\n                    coreRes[`${core[i].courseCode}`] = \"P\";\r\n                }\r\n                else if ((studentCourses[j].courseCode === core[i].courseCode) && (noCreditGrade.includes(studentCourses[j].grade))){\r\n                    coreRes[`${core[i].courseCode}`] = \"F\";\r\n                }\r\n                else {\r\n                    if (!coreRes[`${core[i].courseCode}`]) {\r\n                        coreRes[`${core[i].courseCode}`] = \"N\";\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return coreRes;\r\n    }\r\n\r\n    async function determineCourses(programmeId){\r\n        \r\n        let Y1S1 = {}; // List of all courses for Year 1 Semester 1\r\n        let Y1S2 = {}; // List of all courses for Year 1 Semester 2\r\n        let Y2S1 = {}; // List of all courses for Year 2 Semester 1\r\n        let Y2S2 = {}; // List of all courses for Year 2 Semester 2\r\n        let Y3S1 = {}; // List of all courses for Year 3 Semester 1\r\n        let Y3S2 = {}; // List of all courses for Year 3 Semester 2\r\n        var programmeCourses = {};\r\n        var semesterArr = [];\r\n        var coreSemesterArr = [];\r\n        var today = new Date();\r\n        var currentSem;\r\n\r\n        //var courses = await getCourses();\r\n        var courses = await getProgrammeCourses(programmeId);\r\n\r\n        \r\n        for (var i=0; i<courses.length; i++) { // Initialise Courses for Degree using thier Level and Semester\r\n            if (courses[i].level === \"I\") {\r\n                if (courses[i].semester === \"1\") {\r\n                    Y1S1[courses[i].courseCode] = \"N\";\r\n                }\r\n                if (courses[i].semester === \"2\") {\r\n                    Y1S2[courses[i].courseCode] = \"N\";\r\n                }\r\n            }\r\n            if (courses[i].level === \"II\") {\r\n                if (courses[i].semester === \"1\") {\r\n                    Y2S1[courses[i].courseCode] = \"N\";\r\n                }\r\n                if (courses[i].semester === \"2\") {\r\n                    Y2S2[courses[i].courseCode] = \"N\";\r\n                }\r\n            }\r\n            if (courses[i].level === \"III\") {\r\n                if (courses[i].semester === \"1\") {\r\n                    Y3S1[courses[i].courseCode] = \"N\";\r\n                }\r\n                if (courses[i].semester === \"2\") {\r\n                    Y3S2[courses[i].courseCode] = \"N\";\r\n                }\r\n            }\r\n        }\r\n\r\n        programmeCourses = determineStudentCourses(courses);\r\n        semesterArr = splitBySem(programmeCourses, courses);\r\n        var coreCourses = getCoreCourses(courses);\r\n        coreSemesterArr = splitBySem(programmeCourses, coreCourses);\r\n\r\n        var recCourses = [];\r\n        var counter = 0;\r\n        var year = 1;\r\n        var sem = 1;\r\n        var key;\r\n\r\n        \r\n        Y1S1 = semesterArr[0];\r\n        Y1S2 = semesterArr[1];\r\n        Y2S1 = semesterArr[2];\r\n        Y2S2 = semesterArr[3];\r\n        Y3S1 = semesterArr[4];\r\n        Y3S2 = semesterArr[5];\r\n\r\n        counter = 0;\r\n        for (key in Y1S1) {\r\n            if (Y1S1[key].grade === \"P\" || Y1S1[key].grade === \"F\" || Y1S1[key].grade === \"IP\") {\r\n                counter+=1;\r\n            }\r\n        }\r\n        if (counter > 1) {\r\n            sem = 2;\r\n        }\r\n        counter = 0;\r\n        if (year === 1 && sem === 2) {\r\n            for (key in Y1S2) {\r\n                if (Y1S2[key].grade === \"P\" || Y1S2[key].grade === \"F\" || Y1S2[key].grade === \"IP\") {\r\n                    counter+=1;\r\n                }\r\n            }\r\n            if (counter > 1) {\r\n                sem = 1;\r\n                year = 2;\r\n            }\r\n        }\r\n        counter = 0;\r\n        if (year === 2 && sem === 1) {\r\n            for (key in Y2S1) {\r\n                if (Y2S1[key].grade === \"P\" || Y2S1[key].grade === \"F\" || Y2S1[key].grade === \"IP\") {\r\n                    counter+=1;\r\n                }\r\n            }\r\n            if (counter > 1) {\r\n                sem = 2;\r\n            }\r\n        }\r\n        counter = 0;\r\n        if (year === 2 && sem === 2) {\r\n            for (key in Y2S2) {\r\n                if (Y2S2[key].grade === \"P\" || Y2S2[key].grade === \"F\" || Y3S1[key].grade === \"IP\") {\r\n                    counter+=1;\r\n                }\r\n            }\r\n            if (counter > 1) {\r\n                sem = 1;\r\n                year = 3;\r\n            }\r\n        }\r\n        counter = 0;\r\n        if (year === 3 && sem === 1) {\r\n            for (key in Y3S1) {\r\n                if (Y3S1[key].grade === \"P\" || Y3S1[key].grade === \"F\" || Y3S2[key].grade === \"IP\") {\r\n                    counter+=1;\r\n                }\r\n            }\r\n            if (counter > 1) {\r\n                sem = 2;\r\n            }\r\n        }\r\n\r\n        if (today.getMonth() < 4) {\r\n            currentSem = 2;\r\n        }\r\n        else if (today.getMonth() < 6) {\r\n            currentSem = 3;\r\n        }\r\n        else {\r\n            currentSem = 1;\r\n        }\r\n\r\n        if (year === 1 && currentSem === 1) {\r\n            for (key in Y1S1) {\r\n                if (Y1S1[key].grade === \"N\") {\r\n                    recCourses.push(Y1S1[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        if (year === 1 && currentSem === 2) {\r\n            for (key in Y1S2) {\r\n                if (Y1S2[key].grade === \"N\") {\r\n                    recCourses.push(Y1S2[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        if (year === 2 && currentSem === 1) {\r\n            for (key in Y2S1) {\r\n                if (Y2S1[key].grade === \"N\") {\r\n                    recCourses.push(Y2S1[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        if (year === 2 && currentSem === 2) {\r\n            for (key in Y2S2) {\r\n                if (Y2S2[key].grade === \"N\") {\r\n                    recCourses.push(Y2S2[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        if (year === 3 && currentSem === 1) {\r\n            for (key in Y3S1) {\r\n                if (Y3S1[key].grade === \"N\") {\r\n                    recCourses.push(Y3S1[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n        if (year === 3 && currentSem === 2) {\r\n            for (key in Y3S2) {\r\n                if (Y3S2[key].grade === \"N\") {\r\n                    recCourses.push(Y3S2[key].courseCode)\r\n                }\r\n            }\r\n        }\r\n\r\n        recCourses = recommendCoreCourses(coreSemesterArr, year, currentSem, recCourses);\r\n        removeCoursesNoPrereq(recCourses, courses, programmeCourses);\r\n        props.setRecommended(recCourses);\r\n        props.setLevel(year);\r\n        if (props.recCourses !== null) {\r\n            props.setLoad(false);\r\n        }\r\n        setProcessed(true);\r\n    }\r\n\r\n \r\n\r\n    return (\r\n        <div className=\"content\">\r\n                <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                        <div className=\"col-sm-10\">\r\n                    <p className=\"header blue-txt\">Student Details</p>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12\">\r\n                            { uploaded ? (\r\n                                <DetailsCard details={details} uploadedHandler={uploadedHandler} setProg={props.setProg}></DetailsCard> ) : (\r\n                                <NoTranscript uploadedHandler={uploadedHandler} setProg={props.setProg}></NoTranscript>\r\n                            ) }\r\n                        </div>\r\n                    </div>\r\n                    <p className=\"header blue-txt\">Courses Completed</p>\r\n                     { uploaded ? (\r\n                        <StudentCoursesCard courses={studentCourses}></StudentCoursesCard> ) : (\r\n                        <div className=\"card details-card\">\r\n                            <div className=\"card-body\">\r\n                                <table class=\"table table-borderless table-striped\">\r\n                                    <thead>\r\n                                        <tr class=\"d-flex blue-txt\">\r\n                                            <th class=\"col-1 level-cell\">Level</th>\r\n                                            <th class=\"col-2 code-cell\">Course Code</th>\r\n                                            <th class=\"col-8 title-cell\">Course Title</th>\r\n                                            <th class=\"col-1 credit-cell\">Grade</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n                        )\r\n                     } \r\n                     </div>\r\n                     </div>                 \r\n                </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default StudentProfile;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Start.js",["222","223","224"],"import React, { Component } from \"react\";\r\nimport \"../assets/css/Start.css\";\r\nimport { Link } from 'react-router-dom'\r\nimport { useEffect, useState } from \"react\";\r\nimport PullProgrammes from \"./PullProgrammes\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst Start = (props) => { \r\n\r\n    const [radio, setRadio] = useState(null);\r\n    const [programme, setProgramme] = useState(\"None\");\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    props.setHidden(true);\r\n    var programmes = PullProgrammes();\r\n\r\n    const history = useHistory();\r\n\r\n    const onClickFunction = () => {\r\n        setLoading(true);\r\n        for (var i=0; i<programmes.length; i++) {\r\n            if (programmes[i].name == programme) {\r\n                var programmeId = programmes[i].id;\r\n            }\r\n        }\r\n        if (programmeId) {\r\n            determineCourses(programmeId);\r\n        }\r\n    }\r\n\r\n    async function getProgrammeCourses(id) {\r\n        try {\r\n          const {data:response} = await axios.get(`/programmes/offered-courses/${id}`) //use data destructuring to get data from the promise object\r\n          return response\r\n        }\r\n    \r\n        catch (error) {\r\n          console.log(error);\r\n        }\r\n    }\r\n\r\n    async function determineCourses(programmeId){\r\n\r\n        var recCourses = [];\r\n        var today = new Date();\r\n        var currentSem;\r\n        \r\n        if (today.getMonth() < 4) {\r\n            currentSem = \"2\";\r\n        }\r\n        else if (today.getMonth() < 6) {\r\n            currentSem = \"3\";\r\n        }\r\n        else {\r\n            currentSem = \"1\";\r\n        }\r\n\r\n        var courses = await getProgrammeCourses(programmeId);\r\n\r\n        for (var i=0; i<courses.length; i++) {\r\n            if (courses[i].type === \"Core\" && courses[i].semester === currentSem && courses[i].level === \"I\") {\r\n                recCourses.push(courses[i].courseCode);\r\n            }\r\n        }\r\n\r\n        props.setRecommended(recCourses);\r\n    \r\n        history.push({\r\n            pathname: '/courses'\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    function onRadioChange(event) { \r\n        setRadio(event.currentTarget.value);\r\n        if (event.currentTarget.value === \"new\") {\r\n            props.setDegProg(0);\r\n            props.setCreds(93);\r\n            props.setShowBack(false);\r\n        }\r\n    }\r\n\r\n    function onSelectChange(event) { \r\n        setProgramme(event.currentTarget.value);\r\n    }\r\n\r\n \r\n    return (\r\n        <div className=\"content\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"header\">\r\n                        <p className=\"welcome blue-txt\">Welcome to myAdvisor</p>\r\n                        <p className=\"started blue-txt\">Let's get started.</p>\r\n                    </div>\r\n                    <div className=\"card start-card\">\r\n                        <div className=\"card-body\">\r\n                            <div class=\"form-check\">\r\n                                <input class=\"form-check-input\" type=\"radio\" name=\"studentRadio\" id=\"studentRadiosCont\" value=\"cont\"  onChange={onRadioChange}/>\r\n                                <label class=\"form-check-label\" for=\"studentRadiosCont\">\r\n                                    I am a continuing student\r\n                                </label>\r\n                            </div>\r\n                            <div class=\"form-check\">\r\n                                <input class=\"form-check-input\" type=\"radio\" name=\"studentRadio\" id=\"studentRadiosNew\" value=\"new\"  onChange={onRadioChange}/>\r\n                                <label class=\"form-check-label new-label\" for=\"studentRadiosNew\">\r\n                                    I am a new student in my first semester of my programme\r\n                                </label>\r\n                                { radio === \"new\" ? (\r\n                                    <div className=\"row select-row\">\r\n                                        <div className=\"col-sm-6\">\r\n                                            <div class=\"form-group\">\r\n                                                <select class=\"form-control\" id=\"exampleFormControlSelect1\" onChange={onSelectChange}>\r\n                                                <option value=\"None\">Select your programme</option>\r\n                                                {\r\n                                                 Array.from({ length: programmes.length }, (_, k) => {\r\n                                                    return <option value={programmes[k].name}>{programmes[k].name}</option> \r\n                                                })}\r\n                                                </select>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    ) : (null) }\r\n                            </div>\r\n                           \r\n                        </div>\r\n                        <div className=\"row\">\r\n                        { radio === \"new\" && programme !== \"None\" ? (\r\n\r\n                                <div className=\"col-sm-2\">\r\n                                    <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\" onClick={onClickFunction}>Next</button>\r\n                                </div>\r\n                            ) :\r\n\r\n                            radio === \"new\" && programme === \"None\" ? (\r\n                            <div className=\"col-sm-2\">\r\n                                <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\r\n                            </div>) : \r\n                            \r\n                            radio === \"cont\" ? (\r\n                              <div className=\"col-sm-2\">\r\n                                <Link to=\"/home\">\r\n                                  <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\r\n                                </Link>\r\n                              </div>\r\n                            ) : \r\n\r\n                            (\r\n                              <div className=\"col-sm-2\">\r\n                                  <button type=\"submit\" class=\"btn btn-custom start-next-button blue-button\">Next</button>\r\n                              </div>\r\n                            )\r\n                        }\r\n                        { loading ? (\r\n                            <div className=\"col-sm-2\">\r\n                                <CircularProgress className=\"circ-prog start-prog\" size={30}/>\r\n                            </div>\r\n                        ) : (null)\r\n                        }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default Start;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Career.js",["225","226"],"import React, { Component } from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport CareerCheck from './CareerCheck';\r\nimport \"../assets/css/Career.css\";\r\nimport { Link } from 'react-router-dom'\r\nimport PullCareers from \"./PullCareers\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst Career = (props) => {\r\n\r\n  const [careerList, setCareerList] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  var careers = PullCareers();\r\n  const history = useHistory();\r\n  props.setDisplay(false);\r\n  props.setProg(40);\r\n  if (props.recCourses === null) {\r\n    history.push({\r\n      pathname: '/home'\r\n    })\r\n  }\r\n\r\n  function onChange(event) { \r\n    var careerArray = careerList;\r\n    if (event.currentTarget.checked === true) {\r\n      careerArray.push(event.currentTarget.value);\r\n    }\r\n    else {\r\n      var index = careerArray.indexOf(event.currentTarget.value);\r\n      if (index > -1) {\r\n        careerArray.splice(index, 1);\r\n      }\r\n    }\r\n    setCareerList(careerArray);\r\n  }\r\n\r\n  function onClick() {\r\n    setLoading(true);\r\n    determineCourses(careerList);\r\n  }\r\n\r\n  async function getCareerCourses(id) {\r\n    try {\r\n      const {data:response} = await axios.get(`/careers/courses/${id}`) //use data destructuring to get data from the promise object\r\n      return response\r\n    }\r\n    catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function determineCourses(careerArray){\r\n\r\n      var recCourses = [];\r\n      var today = new Date();\r\n      var currentSem;\r\n      var level;\r\n      \r\n      if (today.getMonth() < 4) {\r\n          currentSem = \"2\";\r\n      }\r\n      else if (today.getMonth() < 6) {\r\n          currentSem = \"3\";\r\n      }\r\n      else {\r\n          currentSem = \"1\";\r\n      }\r\n\r\n      if (props.year === 1) {\r\n        level = \"I\";\r\n      }\r\n      else if (props.year === 2) {\r\n        level = \"II\";\r\n      }\r\n      else if (props.year === 3) {\r\n        level = \"III\"\r\n      }\r\n      else {\r\n        level = \"I\";\r\n      }\r\n\r\n      for (var i=0; i<careerArray.length; i++) {\r\n        var courses = await getCareerCourses(careerArray[i]);\r\n        for (var j=0; j<courses.length; j++) {\r\n          if (courses[j].semester === currentSem && courses[j].level === level) {\r\n            recCourses.push(courses[j].courseCode);\r\n          }\r\n        }\r\n    }\r\n    props.setCareerRecommended(recCourses);\r\n    \r\n    history.push({\r\n      pathname: '/courses'\r\n    })\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"content\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-sm-10\">\r\n                <p className=\"header blue-txt\">Career Path</p>\r\n                  <form>\r\n                    <div className=\"card details-card outer-card\">\r\n                      <div className=\"card-body career-card custom-scroll\">\r\n                        <p className=\"career-card-text\">Select any career paths you may be interested in pursuing</p>\r\n                          <table class=\"table table-borderless table-striped\">\r\n                            <thead>\r\n                                <tr class=\"d-flex blue-txt\">\r\n                                    <th class=\"col-3 name-header\">Career Title</th>\r\n                                    <th class=\"col-9 desc-header\">Description</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              <CareerCheck careers={careers} onChange={onChange}></CareerCheck>\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row button-row\">\r\n                      <div className=\"col-sm-2\">\r\n                        <Link to=\"/home\">\r\n                          <button type=\"submit\" class=\"btn btn-custom back-button blue-button\">Back</button>\r\n                        </Link>\r\n                      </div>\r\n                      { loading ? (\r\n                        <div className=\"col-sm-2\">\r\n                          <CircularProgress className=\"circ-prog career-prog\" size={30}/>\r\n                        </div>\r\n                      ) : (null)}\r\n                      { loading ? (\r\n                        <div className=\"col-sm-2 offset-sm-6\">\r\n                          <button type=\"button\" class=\"btn btn-custom next-button blue-button\" onClick={onClick}>Next</button>\r\n                        </div> ) : (\r\n                        <div className=\"col-sm-2 offset-sm-8\">\r\n                          <button type=\"button\" class=\"btn btn-custom next-button blue-button\" onClick={onClick}>Next</button>\r\n                        </div>\r\n                        ) }\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n          </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Career;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\login.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\StaffDashboard.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\TopBar.js",["227","228"],"import React, { useState } from \"react\";\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Nav, Navbar, Button } from 'react-bootstrap';\r\n\r\nfunction TopBar(props) {\r\n\r\n  function logOut(){\r\n    localStorage.clear();\r\n    window.location.reload(false);\r\n  }\r\n\r\n  const user = localStorage.getItem(\"user\")\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      { user === \"admin\" || props.hide ? (\r\n        <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\">\r\n          <Navbar.Brand><Link to=\"/\" className=\"top-bar-text\">myAdvisor</Link></Navbar.Brand>\r\n          \r\n            <Nav className=\"ml-auto\">\r\n              <Button variant=\"outline-light\" onClick={logOut}>Log Out</Button>\r\n            </Nav>\r\n        \r\n        </Navbar>\r\n        ) : ( \r\n        <div className=\"row\">\r\n          <div className=\"col-sm-10\">\r\n            <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\">\r\n              <Navbar.Brand><Link to=\"/\" className=\"top-bar-text\">myAdvisor</Link></Navbar.Brand>\r\n              \r\n                <Nav className=\"ml-auto\">\r\n                  <Button variant=\"outline-light\" onClick={logOut}>Log Out</Button>\r\n                </Nav>\r\n            </Navbar>\r\n          </div>\r\n        </div> \r\n      )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopBar;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Courses.js",["229"],"import React, { useState, useEffect } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport CoursesTable from \"./CoursesTable\";\r\nimport AddCourse from \"./AddCourse\";\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\n\r\nfunction Courses() {\r\n    //Add Course Modal\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n\r\n    //Table\r\n    const [courses, setCourses] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //Toast\r\n    const notifyDelete = (text) => toast.error(text);\r\n\r\n    //Get Courses\r\n    async function getCourses() {\r\n        try {\r\n          const res = await fetch(\"/courses/all\", {\r\n            method: \"GET\",\r\n          });\r\n    \r\n          const parseData = await res.json();\r\n          setCourses(parseData);\r\n          setLoading(false);\r\n          \r\n        } catch (err) {\r\n          console.error(err.message);\r\n        }\r\n    }\r\n\r\n    //Delete Course\r\n    async function deleteCourse(courseCode) {\r\n        try {\r\n          const res = await fetch(\"/courses/delete/\" + courseCode, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                token: localStorage.getItem(\"token\")\r\n            },\r\n          });\r\n    \r\n            setLoading(false);\r\n            refreshTable();\r\n            notifyDelete(courseCode + \" Deleted\")\r\n          \r\n        } catch (err) {\r\n            notifyDelete(err.message)\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    function confirmDelete(courseCode){\r\n        confirmAlert({\r\n          title: 'Delete Confirmation',\r\n          message: 'Are you sure to do delete ' + courseCode + \"?\",\r\n          buttons: [\r\n            {\r\n              label: 'Yes',\r\n              onClick: () => deleteCourse(courseCode)\r\n            },\r\n            {\r\n              label: 'No',\r\n            }\r\n          ]\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getCourses();\r\n    }, []);\r\n\r\n\r\n    function refreshTable(){\r\n        setLoading(true);\r\n        getCourses();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div class=\"container\">\r\n                <div class=\"row mt-4\">\r\n                    {/* Courses Table */}\r\n                    <div class=\"col-10\">\r\n                        <div class=\"card h-100\">\r\n                            <div class=\"card-body shadow-sm\">\r\n                                <CoursesTable courses={courses} loading={loading} confirmDelete={confirmDelete} refreshTable={refreshTable}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Buttons */}\r\n                    <div class=\"col\">\r\n                        <button type=\"button\" class=\"btn btn-custom add-course\" onClick={handleShow}>Add Course</button>\r\n                    </div>\r\n\r\n                    <Modal show={show} onHide={handleClose} size=\"lg\">\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Add Course</Modal.Title>\r\n                        </Modal.Header>\r\n\r\n                        <Modal.Body>\r\n                            <AddCourse setShow={setShow} refreshTable={refreshTable}/>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n            <ToastContainer \r\n                pauseOnHover\r\n                position=\"bottom-right\"\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Courses;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Programmes.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Students.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Settings.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Bot Framework\\webChat.js",["230"],"\r\nimport React, { useMemo } from 'react';\r\nimport ReactWebChat, { createDirectLine } from 'botframework-webchat';\r\n\r\nexport default () => {\r\n  const directLine = useMemo(() => createDirectLine({ token: '62vtFFB3kyk.SDMvOliF963GN1Hm7MG-7XJ9qLGNKB-Unv1L_1-9dnc' }), []);\r\n\r\n  return <ReactWebChat directLine={directLine} userID=\"myAdvisorBot\" />;\r\n};\r\n\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Reports.js",["231","232","233"],"import React, { useState, useEffect } from \"react\";\r\nimport ReportsTable from './ReportsTable';\r\n\r\nfunction Reports() {\r\n    //Table\r\n    const [sessions, setSessions] = useState([\r\n        {studentID: 816000000, name: \"Jane Doe\", year: 1, advisingDate: \"1/1/2021\", status: \"Complete\"},\r\n        {studentID: 816000001, name: \"John Doe\", year: 2, advisingDate: \"1/1/2021\", status: \"Complete\"},\r\n        {studentID: 816000002, name: \"Jack Doe\", year: 3, advisingDate: \"1/1/2021\", status: \"Incomplete\"}\r\n    ]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <div class=\"container\">\r\n                <div class=\"row mt-4\">\r\n                    {/* Courses Table */}\r\n                    <div class=\"col-10\">\r\n                        <div class=\"card h-100\">\r\n                            <div class=\"card-body shadow-sm\">\r\n                                <ReportsTable sessions={sessions} loading={loading}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Buttons */}\r\n                    <div class=\"col\">\r\n                        <button type=\"button\" class=\"btn btn-custom add-course\" >Archive</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Reports;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullCourses.js",["234"],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst PullCourses = () => {\r\n    const [courses, setCourses] = useState([]);\r\n  \r\n    async function getCourses() {\r\n      try {\r\n        const res = await fetch(\"/courses/all\", {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        });\r\n  \r\n        const parseData = await res.json();\r\n        setCourses(parseData);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    }\r\n  \r\n    //Get course data\r\n    useEffect(() => {\r\n      getCourses();\r\n    }, []);\r\n\r\n    return (\r\n        courses\r\n      );\r\n    };\r\n\r\nexport default PullCourses;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullDetails.js",["235","236"],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst PullDetails = (studentId) => {\r\n    const [details, setDetails] = useState([]);\r\n  \r\n    async function getDetails() {\r\n      try {\r\n        const res = await fetch(`/transcript/details/view/${studentId}`, {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        });\r\n  \r\n        const parseData = await res.json();\r\n        setDetails(parseData);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    }\r\n  \r\n    //Get student details data\r\n    useEffect(() => {\r\n      getDetails();\r\n    }, []);\r\n\r\n    return (\r\n        details\r\n      );\r\n    };\r\n\r\nexport default PullDetails;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullStudentCourses.js",["237","238"],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst PullStudentCourses = (studentId) => {\r\n    const [courses, setCourses] = useState([]);\r\n  \r\n    async function getCourses() {\r\n      try {\r\n        const res = await fetch(`/transcript/courses/viewAll/${studentId}`, {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        });\r\n  \r\n        const parseData = await res.json();\r\n        setCourses(parseData);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    }\r\n  \r\n    //Get student course data\r\n    useEffect(() => {\r\n      getCourses();\r\n    }, []);\r\n\r\n    return (\r\n        courses\r\n      );\r\n    };\r\n\r\nexport default PullStudentCourses;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullCareers.js",["239"],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst PullCareers = () => {\r\n    const [careers, setCareers] = useState([]);\r\n  \r\n    async function getCareers() {\r\n      try {\r\n        const res = await fetch(\"/careers/all\", {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        });\r\n  \r\n        const parseData = await res.json();\r\n        setCareers(parseData);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    }\r\n  \r\n    //Get career data\r\n    useEffect(() => {\r\n      getCareers();\r\n    }, []);\r\n\r\n    return (\r\n        careers\r\n      );\r\n    };\r\n\r\nexport default PullCareers;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\CourseNode.js",["240","241"],"import React, { Component } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useEffect, useState } from \"react\";\r\n\r\nfunction CourseNode(props) {\r\n    const history = useHistory();\r\n    const [selected, setSelected] = useState(false);\r\n\r\n    const onClickFunction = () => {\r\n        history.push({\r\n            pathname: `/coursedetails`,\r\n            state: { course: props.course }\r\n          })\r\n    }\r\n                          \r\n    const onChange = (event) => {\r\n        setSelected(!selected);\r\n        props.onChange(event, props.course.credits);\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"course-node\">\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-9 col-sm-7\" onClick={() => onClickFunction()}>\r\n                    <p className=\"course-code blue-txt\">{props.course.courseCode}</p>\r\n                </div>\r\n                <div className=\"col-lg-2 col-sm-3\" onClick={() => onClickFunction()}>\r\n                    <p className=\"credit-header blue-txt\">Credits</p>\r\n                </div>\r\n                <div className=\"col-lg-1 col-sm-2\">\r\n                    <p className=\"add-header blue-txt\">Add</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-9 col-sm-7\" onClick={() => onClickFunction()}>\r\n                    <p className=\"course-title\">{props.course.courseTitle}</p>\r\n                </div>\r\n                <div className=\"col-lg-2 col-sm-3\" onClick={() => onClickFunction()}>\r\n                    <p className=\"credits\">{props.course.credits}</p>\r\n                </div>\r\n                <div className=\"col-lg-1 col-sm-2 check-div\">\r\n                    { props.chosen.includes(props.course.courseCode) ? (\r\n                        <input type=\"checkbox\" class=\"form-check-input course-check\" id={props.course.courseCode} value={props.course.courseCode} onChange={onChange} checked></input>         \r\n                    ) : (\r\n                        <input type=\"checkbox\" class=\"form-check-input course-check\" id={props.course.courseCode} value={props.course.courseCode} onChange={onChange}></input>        \r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CourseNode;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\DetailsCard.js",["242"],"import React, { Component } from \"react\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nclass DetailsCard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            file: null,\r\n            data: null,\r\n            editing: false\r\n        }\r\n       props.setProg(20);\r\n    }\r\n\r\n    handleFiles = files => {\r\n        console.log(files[0])\r\n        this.setState({\r\n            file: files[0]\r\n        });\r\n        \r\n    }\r\n\r\n    editingHandler = () => {\r\n        this.setState({\r\n            editing: !this.state.editing\r\n        });\r\n    }\r\n\r\n    onChangeHandler = event =>{\r\n        this.setState({\r\n            file: event.target.files[0]\r\n        })\r\n    }\r\n\r\n    onClickHandler = () => {\r\n        var formdata = new FormData();\r\n        if (this.state.file === null) {\r\n            return;\r\n        }\r\n        formdata.append(\"file\", this.state.file, \"[PROXY]\");\r\n        \r\n        var requestOptions = {\r\n          method: 'DELETE',\r\n          redirect: 'follow'\r\n        };\r\n\r\n        var studentId = localStorage.getItem(\"username\");\r\n\r\n        toast.success(\"Processing transcript...\")\r\n        \r\n        fetch(`/transcript/courses/deleteAll/${studentId}`, requestOptions)\r\n            .then(response => response.text())\r\n            .then(result => console.log(result))\r\n            .then(result => {\r\n                fetch(`/transcript/details/delete/${studentId}`, requestOptions)\r\n                    .then(response => response.text())\r\n                    .then(result => console.log(result))\r\n                    .then(result => {\r\n                        var requestOptions = {\r\n                            method: 'POST',\r\n                            body: formdata,\r\n                            redirect: 'follow'\r\n                        };\r\n            \r\n                        fetch(\"/transcript/parseForm\", requestOptions)\r\n                            .then(response => response.text())\r\n                            .then(result => console.log(result))\r\n                            .then(result => this.props.uploadedHandler())\r\n                            .catch(error => console.log('error', error));        \r\n                    })\r\n                    .catch(error => console.log('error', error));        \r\n            })\r\n          .catch(error => console.log('error', error));\r\n\t}\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"card details-card\">\r\n                    <div className=\"card-body\">\r\n                        {!this.state.editing ? (\r\n                            <div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-2\">\r\n                                        <p className=\"row-title blue-txt\">Student Name:</p>\r\n                                    </div>\r\n                                    <div className=\"col-sm-10\">\r\n                                        <p className=\"row-info\">{this.props.details.name}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-2\">\r\n                                        <p className=\"row-title blue-txt\">Student ID:</p>\r\n                                    </div>\r\n                                    <div className=\"col-sm-10\">\r\n                                        <p className=\"row-info\">{this.props.details.studentId}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-2\">\r\n                                        <p className=\"row-title blue-txt\">Degree:</p>\r\n                                    </div>\r\n                                    <div className=\"col-sm-10\">\r\n                                        <p className=\"row-info\">{this.props.details.degree}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-2\">\r\n                                        <p className=\"row-title blue-txt\">Major:</p>\r\n                                    </div>\r\n                                    <div className=\"col-sm-10\">\r\n                                        <p className=\"row-info\">{this.props.details.major}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-2\">\r\n                                        <p className=\"row-title blue-txt\">Degree GPA:</p>\r\n                                    </div>\r\n                                    <div className=\"col-md-1 col-sm-2\">\r\n                                        <p className=\"row-info\">{this.props.details.gpa}</p>\r\n                                    </div>\r\n                                    { this.props.details.gpa < 2 && this.props.details.gpa != 0 ? (\r\n                                        <div className=\"col-md-9 col-sm-8\">\r\n                                            <p className=\"row-warning\"> Your GPA is below 2.0 and you are on Academic Warning. Please visit the Dean's Office to be Advised. </p>\r\n                                        </div>\r\n                                    ) : (null) }\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-2\">\r\n                                        <p className=\"row-title blue-txt\">Admit Term:</p>\r\n                                    </div>\r\n                                    <div className=\"col-sm-10\">\r\n                                        <p className=\"row-info\">{this.props.details.admitTerm}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm-3 edit-line\">\r\n                                        <i class=\"fas fa-pencil-alt blue-txt\"> </i>\r\n                                        <span className=\"edit-transcript blue-txt\" onClick={this.editingHandler}> Re-upload Transcript</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            ) : (\r\n\r\n                            <div>\r\n                                <p className=\"row-info\">Upload your new transcript.</p>\r\n                                <div class=\"input-field col-sm-12\">\r\n                                    <form action=\"\" enctype=\"multipart/form-data\" method=\"POST\">\r\n                                        <input type=\"file\" name=\"file\" onChange={this.onChangeHandler}/>\r\n                                        <input type=\"button\" value=\"Upload\" class=\"btn btn-custom blue-btn\" onClick={this.onClickHandler}/>\r\n                                    </form>\r\n                                </div>\r\n                                <div className=\"row back-button-row\">\r\n                                    <div className=\"col-sm-2\">\r\n                                        <button type=\"submit\" class=\"btn btn-custom back-button blue-button\" onClick={this.editingHandler}>Cancel</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            ) }\r\n                    </div>\r\n                    <ToastContainer \r\n                        pauseOnHover\r\n                        position=\"top-left\"\r\n                        autoClose={10000}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DetailsCard;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\NoTranscript.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\CareerCheck.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\StudentCoursesCard.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\PullProgrammes.js",["243"],"import React, { useEffect, useState } from \"react\";\r\n\r\nconst PullProgrammes = () => {\r\n    const [programmes, setProgrammes] = useState([]);\r\n  \r\n    async function getProgrammes() {\r\n      try {\r\n        const res = await fetch(`/programmes/all`, {\r\n          method: \"GET\",\r\n          headers: { token: localStorage.token },\r\n        });\r\n  \r\n        const parseData = await res.json();\r\n        setProgrammes(parseData);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getProgrammes();\r\n      }, []);\r\n  \r\n    return (\r\n        programmes\r\n      );\r\n    };\r\n\r\nexport default PullProgrammes;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\Calendar.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\NavigationBlocks.js",[],"C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\AddCourse.js",["244"],"import React, { useState } from \"react\";\r\nimport { Button, Form, Col } from \"react-bootstrap\";\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction AddCourse({setShow, refreshTable}) {\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    //Toast\r\n    const notifyAdded = (text) => toast.success(text);\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n        }\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setValidated(true);\r\n\r\n        const formData = {\r\n            courseCode : (form.elements.courseCode.value).replace(/\\s+/g, ''),\r\n            courseTitle : form.elements.courseTitle.value,\r\n            credits : form.elements.credits.value,\r\n            semester : form.elements.semester.value,\r\n            level : form.elements.level.value,\r\n            prerequisites : form.elements.prerequisites.value,\r\n            description: form.elements.description.value,\r\n            coursework: String(form.elements.coursework.value) + \"%\",\r\n            finalExam: String(form.elements.finalExam.value) + \"%\",\r\n            type: form.elements.type.value\r\n        }\r\n\r\n        addCourse(formData)\r\n    };\r\n\r\n\r\n    async function addCourse(data) {\r\n        try {\r\n          const res = await fetch(\"/courses/add\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                token: localStorage.getItem(\"token\"),\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(data),\r\n          });\r\n    \r\n          setShow(false);\r\n          refreshTable();\r\n          notifyAdded(data.courseCode + \" Added!\")\r\n\r\n          const status = await res.statusText;\r\n          \r\n        } catch (err) {\r\n          console.error(err.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form validated={validated} onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"courseCode\">\r\n                    <Form.Label>Course Code</Form.Label>\r\n                    <Form.Control required type=\"text\"/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"courseTitle\">\r\n                    <Form.Label>Course Title</Form.Label>\r\n                    <Form.Control required type=\"text\"/>\r\n                </Form.Group>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"4\" controlId=\"credits\">\r\n                        <Form.Label>Credits</Form.Label>\r\n                        <Form.Control required as=\"select\">\r\n                            <option>1</option>\r\n                            <option>2</option>\r\n                            <option>3</option>\r\n                            <option>4</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} md=\"4\" controlId=\"semester\">\r\n                        <Form.Label>Semester</Form.Label>\r\n                        <Form.Control required as=\"select\">\r\n                            <option>1</option>\r\n                            <option>2</option>\r\n                            <option>3</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} md=\"4\" controlId=\"level\">\r\n                        <Form.Label>Level</Form.Label>\r\n                        <Form.Control required as=\"select\">\r\n                            <option>I</option>\r\n                            <option>II</option>\r\n                            <option>III</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} controlId=\"coursework\">\r\n                        <Form.Label>Coursework</Form.Label>\r\n                        <Form.Control required type=\"number\" min=\"1\" max=\"100\" />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"finalExam\">\r\n                        <Form.Label>Final Exam</Form.Label>\r\n                        <Form.Control required type=\"number\" min=\"1\" max=\"100\" />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} controlId=\"type\">\r\n                        <Form.Label>Type</Form.Label>\r\n                        <Form.Control required as=\"select\">\r\n                            <option>Core</option>\r\n                            <option>Elective</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Group controlId=\"prerequisites\">\r\n                    <Form.Label>Prerequisites</Form.Label>\r\n                    <Form.Control required type=\"text\"/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control required as=\"textarea\" rows={3}/>\r\n                </Form.Group>\r\n\r\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\r\n            </Form>\r\n\r\n            <ToastContainer \r\n                pauseOnHover\r\n                position=\"bottom-right\"\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddCourse;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\StudentsTable.js",["245","246","247","248","249"],"import React, { useState, useEffect } from \"react\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport { Modal, Tabs, Tab } from \"react-bootstrap\";\r\n\r\n//TABLE SETUP\r\n\r\nconst columns = [\r\n    { dataField: 'studentId', text: 'Student ID', csvText: 'Student ID', sort: true },\r\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\r\n    { dataField: 'gpa', text: 'GPA', csvText: 'GPA', sort: true },\r\n    { dataField: 'degree', text: 'Degree', csvText: 'Degree', sort: true },\r\n    { dataField: 'credits', text: 'Credits', csvText: 'Credits', sort: true },\r\n]\r\n\r\nconst coursesColumns = [\r\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\r\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\r\n    { dataField: 'grade', text: 'Grade', sort: true },\r\n]\r\n\r\nconst inprogressCoursesColumns = [\r\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\r\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\r\n]\r\n\r\nconst defaultSorted = [{\r\n    dataField: 'name',\r\n    order: 'asec'\r\n}];\r\n\r\nconst options = {\r\n    custom: true,\r\n    paginationSize: 5,\r\n    pageStartIndex: 1,\r\n    firstPageText: 'First',\r\n    prePageText: 'Back',\r\n    nextPageText: 'Next',\r\n    lastPageText: 'Last',\r\n    sizePerPage: 8,\r\n};\r\n\r\nconst courseOptions = {\r\n    sizePerPage: 8,\r\n    hideSizePerPage: true,\r\n    hidePageListOnlyOnePage: true\r\n};\r\n\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nfunction StudentsTable({students, loading}) {\r\n    //Modal\r\n    const [show, setShow] = useState(false);\r\n    const [studentName, setStudentName] = useState([]);\r\n    const [studentCourses, setStudentCourses] = useState([]);\r\n    const [completedCourses, setCompletedCourses] = useState([]);\r\n    const [inprogressCourses, setInprogressCourses] = useState([]);\r\n\r\n    const handleShow = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n\r\n    const rowEvents = {\r\n        onClick: (e, row, rowIndex) => {\r\n            setStudentName(row.name);\r\n            getStudentCourses(row.studentId);\r\n        }\r\n    };\r\n\r\n    //Get Student Courses\r\n    async function getStudentCourses(studentId) {\r\n        try {\r\n            const res = await fetch(\"/transcript/courses/viewAll/\" + studentId, {\r\n            method: \"GET\",\r\n        });\r\n            const parseData = await res.json();\r\n            setStudentCourses(parseData);\r\n            getCompleted(parseData);\r\n            getInprogress(parseData);\r\n            setShow(true);\r\n            \r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    function getCompleted(data){\r\n        let arr = []\r\n\r\n        for (var key in data){\r\n            if(data[key].grade != 'IP'){\r\n                arr.push(data[key])\r\n            }\r\n        }\r\n\r\n        setCompletedCourses(arr);\r\n    }\r\n\r\n    function getInprogress(data){\r\n        let arr = []\r\n\r\n        for (var key in data){\r\n            if(data[key].grade == 'IP'){\r\n                arr.push(data[key])\r\n            }\r\n        }\r\n\r\n        setInprogressCourses(arr);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getStudentCourses();\r\n    }, []);    \r\n\r\n    //TABLE\r\n    const table = ({ paginationProps, paginationTableProps }) => (\r\n        <>\r\n            <ToolkitProvider\r\n                    keyField=\"studentID\"\r\n                    data={ students }\r\n                    columns={ columns }\r\n                    search\r\n                    exportCSV={{\r\n                        fileName: 'students.csv',\r\n                    }}\r\n                >\r\n                {\r\n                    props => (\r\n                    <div>\r\n                        <SearchBar { ...props.searchProps } />\r\n                        <ClearSearchButton { ...props.searchProps } />\r\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\r\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } rowEvents={ rowEvents } hover/>\r\n                    </div>\r\n                    )\r\n                }\r\n            </ToolkitProvider>\r\n            <PaginationListStandalone { ...paginationProps } />\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>\r\n            ) : (\r\n            <PaginationProvider pagination={paginationFactory(options)}>\r\n                { table }\r\n            </PaginationProvider>\r\n            )}\r\n\r\n            <Modal show={show} onHide={handleClose} size=\"lg\">\r\n              <Modal.Header closeButton>\r\n                  <Modal.Title>{studentName}</Modal.Title>\r\n              </Modal.Header>\r\n\r\n              <Modal.Body>\r\n                <Tabs defaultActiveKey=\"completed\" id=\"uncontrolled-tab-example\">\r\n                    <Tab eventKey=\"completed\" title=\"Completed\">\r\n                        <ToolkitProvider\r\n                        keyField=\"courseCode\"\r\n                        data={ completedCourses }\r\n                        columns={ coursesColumns }\r\n                        search\r\n                        >\r\n                        {\r\n                            props => (\r\n                            <div>\r\n                                <br/>\r\n                                <SearchBar { ...props.searchProps } />\r\n                                <BootstrapTable\r\n                                { ...props.baseProps } pagination={ paginationFactory(courseOptions) } hover\r\n                                />\r\n                            </div>\r\n                            )\r\n                        }\r\n                        </ToolkitProvider>                           \r\n                    </Tab>\r\n                    <Tab eventKey=\"incomplete\" title=\"Inprogress\">\r\n                        <ToolkitProvider\r\n                        keyField=\"courseCode\"\r\n                        data={ inprogressCourses }\r\n                        columns={ inprogressCoursesColumns }\r\n                        search\r\n                        >\r\n                        {\r\n                            props => (\r\n                            <div>\r\n                                <br/>\r\n                                <SearchBar { ...props.searchProps } />\r\n                                <BootstrapTable\r\n                                { ...props.baseProps } pagination={ paginationFactory(courseOptions) } hover\r\n                                />\r\n                            </div>\r\n                            )\r\n                        }\r\n                        </ToolkitProvider>  \r\n                    </Tab>\r\n                </Tabs>\r\n              </Modal.Body>\r\n          </Modal>            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default StudentsTable;\r\n\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\CoursesTable.js",["250","251"],"import React, { useState } from \"react\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport EditCourse from \"./EditCourse\";\r\nimport \"../../assets/css/Staff.css\";\r\n\r\n//TABLE SETUP\r\n\r\nconst columns = [\r\n    { dataField: 'courseCode', text: 'Course Code', csvText: 'Course Code', sort: true },\r\n    { dataField: 'courseTitle', text: 'Course Title', csvText: 'Course Title' },\r\n    { dataField: 'credits', text: 'Credits', csvText: 'Credits', sort: true },\r\n    { dataField: 'semester', text: 'Semester', csvText: 'Semester', sort: true },\r\n]\r\n\r\nconst defaultSorted = [{\r\n  dataField: 'courseCode',\r\n  order: 'asec'\r\n}];\r\n\r\nconst options = {\r\n  custom: true,\r\n  paginationSize: 5,\r\n  pageStartIndex: 1,\r\n  firstPageText: 'First',\r\n  prePageText: 'Back',\r\n  nextPageText: 'Next',\r\n  lastPageText: 'Last',\r\n  sizePerPage: 8,\r\n};\r\n\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nfunction CoursesTable({courses, loading, refreshTable, confirmDelete}) {\r\n\r\n    //Edit Course Modal\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n\r\n    const [row, setRow] = useState();\r\n\r\n    //REQUESTS\r\n\r\n    function eCourse(row) {\r\n      setShow(true);\r\n      setRow(row);\r\n    }\r\n\r\n    function dCourse(courseCode) {\r\n      confirmDelete(courseCode);\r\n    }\r\n\r\n    //EXPANDED TABLE ROW\r\n\r\n    const expandRow = {\r\n        onlyOneExpanding: true,\r\n        renderer: row => (\r\n          <div>\r\n            <h3>{ `${row.courseCode}` } - { `${row.courseTitle}` }</h3>\r\n            <br/>\r\n            <h4>Description</h4>\r\n            <p>{ `${row.description}` }</p>\r\n\r\n            <h4>Prerequisites</h4>\r\n            <p>{ `${row.prerequisites}` }</p>\r\n\r\n            <h4>Coursework</h4>\r\n            <p>{ `${row.coursework}` }</p>\r\n\r\n            <h4>Final Exam</h4>\r\n            <p>{ `${row.finalExam}` }</p>\r\n\r\n            <div class=\"btn-group\">\r\n              <button type=\"button\" class=\"btn btn-custom edit-course\" onClick={() => eCourse(row)}>Edit</button>\r\n              <button type=\"button\" class=\"btn btn-danger delete-course\" onClick={() => dCourse(row.courseCode)}>Delete</button>\r\n            </div>\r\n          </div>\r\n        )\r\n    };\r\n\r\n    //TABLE\r\n\r\n    const table = ({ paginationProps, paginationTableProps }) => (\r\n        <>\r\n            <ToolkitProvider\r\n                    keyField=\"courseCode\"\r\n                    data={ courses }\r\n                    columns={ columns }\r\n                    search\r\n                    exportCSV={{\r\n                      fileName: 'courses.csv',\r\n                    }}\r\n                >\r\n                {\r\n                    props => (\r\n                    <div>\r\n                        <SearchBar { ...props.searchProps } />\r\n                        <ClearSearchButton { ...props.searchProps } />\r\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\r\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } expandRow={ expandRow } defaultSorted={ defaultSorted } hover/>\r\n                    </div>\r\n                    )\r\n                }\r\n            </ToolkitProvider>\r\n            <PaginationListStandalone { ...paginationProps } />\r\n        </>\r\n  );\r\n\r\n  return (\r\n      <>\r\n          {loading ? (\r\n            <div class=\"d-flex justify-content-center\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <PaginationProvider pagination={paginationFactory(options)}>\r\n              { table }\r\n            </PaginationProvider>\r\n          )}\r\n\r\n          <Modal show={show} onHide={handleClose} size=\"lg\">\r\n              <Modal.Header closeButton>\r\n                  <Modal.Title>Edit Course</Modal.Title>\r\n              </Modal.Header>\r\n\r\n              <Modal.Body>\r\n                <EditCourse setShow={setShow} row={row} refreshTable={refreshTable}/>\r\n              </Modal.Body>\r\n          </Modal>\r\n        \r\n      </>\r\n\r\n  );\r\n}\r\n\r\nexport default CoursesTable;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\ProgrammesTable.js",["252","253","254","255","256"],"import React, { useState, useEffect } from \"react\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory, { PaginationProvider, PaginationListStandalone} from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\r\nimport { Modal, Tabs, Tab } from \"react-bootstrap\";\r\n\r\nconst columns = [\r\n    { dataField: 'name', text: 'Programme', csvText: 'name', sort: true },\r\n]\r\n\r\nconst selectLevelOptions = {\r\n    I: 'I',\r\n    II: 'II',\r\n    III: 'III'\r\n};\r\n\r\nconst selectSemesterOptions = {\r\n    1: '1',\r\n    2: '2',\r\n    3: '3'\r\n};\r\n\r\nconst coursesColumns = [\r\n    { \r\n        dataField: 'level', \r\n        text: 'Level', \r\n        sort: true,\r\n        formatter: cell => selectLevelOptions[cell],\r\n        filter: selectFilter({\r\n            options: selectLevelOptions,\r\n        })\r\n    },\r\n    { \r\n        dataField: 'semester', \r\n        text: 'Semester', \r\n        sort: true,\r\n        formatter: cell => selectSemesterOptions[cell],\r\n        filter: selectFilter({\r\n            options: selectSemesterOptions,\r\n        })\r\n    },\r\n    { dataField: 'courseCode', text: 'Course Code', sort: true },\r\n    { dataField: 'courseTitle', text: 'Course Title', sort: true },\r\n]\r\n\r\nconst defaultSorted = [{\r\n    dataField: 'name',\r\n    order: 'asec'\r\n}];\r\n\r\nconst coursesSorted = [{\r\n    dataField: 'level',\r\n    order: 'asec'\r\n}];\r\n\r\nconst options = {\r\n    custom: true,\r\n    paginationSize: 5,\r\n    pageStartIndex: 1,\r\n    firstPageText: 'First',\r\n    prePageText: 'Back',\r\n    nextPageText: 'Next',\r\n    lastPageText: 'Last',\r\n    sizePerPage: 8,\r\n};\r\n\r\nconst courseOptions = {\r\n    sizePerPage: 8,\r\n    hideSizePerPage: true,\r\n    hidePageListOnlyOnePage: true\r\n};\r\n\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\n\r\nfunction ProgrammesTable({programmes, loading}) {\r\n\r\n    //Modal\r\n    const [show, setShow] = useState(false);\r\n    const [programmeName, setprogrammeName] = useState([]);\r\n    const [programmeCourses, setProgrammeCourses] = useState([]);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n    const [loadingCourses, setLoadingCourses] = useState(true);\r\n\r\n    const rowEvents = {\r\n        onClick: (e, row, rowIndex) => {\r\n            setprogrammeName(row.name);\r\n            getProgrammeCourses(row.id);\r\n        }\r\n    };    \r\n\r\n    //Get Programme Courses\r\n    async function getProgrammeCourses(id) {\r\n        try {\r\n            setShow(true);\r\n            setProgrammeCourses([]);\r\n            setLoadingCourses(true);\r\n\r\n            const res = await fetch(\"/programmes/offered-courses/\" + id, {\r\n            method: \"GET\",\r\n        });\r\n            const parseData = await res.json();\r\n            setProgrammeCourses(parseData);\r\n            setLoadingCourses(false);\r\n            \r\n            \r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    //TABLE\r\n    const table = ({ paginationProps, paginationTableProps }) => (\r\n        <>\r\n            <ToolkitProvider\r\n                    keyField=\"name\"\r\n                    data={ programmes }\r\n                    columns={ columns }\r\n                    search\r\n                >\r\n                {\r\n                    props => (\r\n                    <div>\r\n                        <SearchBar { ...props.searchProps } />\r\n                        <ClearSearchButton { ...props.searchProps } />\r\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } rowEvents={ rowEvents } hover/>\r\n                    </div>\r\n                    )\r\n                }\r\n            </ToolkitProvider>\r\n            <PaginationListStandalone { ...paginationProps } />\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>\r\n            ) : (\r\n            <PaginationProvider pagination={paginationFactory(options)}>\r\n                { table }\r\n            </PaginationProvider>\r\n            )}\r\n\r\n            <Modal show={show} onHide={handleClose} size=\"xl\">\r\n              <Modal.Header closeButton>\r\n                  <Modal.Title>{programmeName}</Modal.Title>\r\n              </Modal.Header>\r\n\r\n              <Modal.Body>\r\n                {loadingCourses ? (\r\n                <div class=\"d-flex justify-content-center\">\r\n                    <div class=\"spinner-border text-primary\" role=\"status\">\r\n                    <span class=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                </div>\r\n                ) : (\r\n                <ToolkitProvider\r\n                    keyField=\"courseCode\"\r\n                    data={ programmeCourses }\r\n                    columns={ coursesColumns }\r\n                    search\r\n                    >\r\n                    {\r\n                        props => (\r\n                        <div>\r\n                            <SearchBar { ...props.searchProps } />\r\n                            <BootstrapTable\r\n                            { ...props.baseProps } pagination={ paginationFactory(courseOptions) } defaultSorted={ coursesSorted } filter={ filterFactory() }\r\n                            />\r\n                        </div>\r\n                        )\r\n                    }\r\n                </ToolkitProvider>\r\n                )}                           \r\n              </Modal.Body>\r\n            </Modal>             \r\n\r\n        </>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default ProgrammesTable;\r\n","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\SetAdvisingWindow.js",["257"],"import React, { useState } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nfunction SetAdvisingWindow() {\r\n    const notifyEdit = (text) => toast.success(text);\r\n    const notifyError = (text) => toast.error(text);\r\n\r\n    const [validated, setValidated] = useState(false);\r\n    const [advisingStart, setadvisingStart] = useState(new Date());\r\n    const [advisingEnd, setadvisingEnd] = useState(new Date());\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n        }\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        \r\n\r\n        const formData = {\r\n            advisingStart : form.elements.advisingStart.value,\r\n            advisingEnd : form.elements.advisingEnd.value,\r\n            semester : form.elements.semester.value\r\n        }\r\n\r\n        if(advisingStart > advisingEnd){\r\n            notifyError(\"Error, Start Date After End Date\");\r\n        } else {\r\n            setValidated(true);\r\n            setWindow(formData);\r\n        }\r\n\r\n        \r\n    };\r\n\r\n    async function setWindow(data) {\r\n        try {\r\n          const res = await fetch(\"/admin/academic-advising/window\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                token: localStorage.getItem(\"token\"),\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(data),\r\n          });\r\n\r\n          const status = await res.statusText;\r\n          notifyEdit(\"Advising Window Updated!\");\r\n          \r\n        } catch (err) {\r\n          console.error(err.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"advisingStart\">\r\n                    <Form.Label >Start Date</Form.Label>\r\n                    <DatePicker required selected={advisingStart} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingStart(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingStart\" />}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"advisingEnd\">\r\n                    <Form.Label>End Date</Form.Label>\r\n                    <DatePicker required selected={advisingEnd} dateFormat=\"yyyy-MM-dd\" onChange={date => setadvisingEnd(date)} customInput={ <Form.Control required type=\"text\" name=\"advisingEnd\" />}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"semester\">\r\n                    <Form.Label>Semester</Form.Label>\r\n                    <Form.Control required as=\"select\">\r\n                        <option>1</option>\r\n                        <option>2</option>\r\n                        <option>3</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Save</Button></div>\r\n            </Form>\r\n\r\n            <ToastContainer \r\n                pauseOnHover\r\n                position=\"bottom-right\"\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SetAdvisingWindow;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\AddAccount.js",["258","259","260","261","262","263","264"],"import React, { useState, useRef } from \"react\";\r\nimport { Button, Form, Col } from \"react-bootstrap\";\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction AddAccount() {\r\n    const [validated, setValidated] = useState(false);\r\n    const formRef = useRef(null);\r\n\r\n    const notifyError = (text) => toast.error(text);\r\n    const notifyEdit = (text) => toast.success(text);\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        const url = \"\";\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        } else{\r\n\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        \r\n            const formData = {\r\n                username : form.elements.username.value,\r\n                password : form.elements.password.value,\r\n                confirm_password : form.elements.confirm_password.value,\r\n                account_type: form.elements.account_type.value\r\n            }\r\n\r\n            if(formData.password != formData.confirm_password){\r\n                notifyError(\"Passwords Don't Match\")\r\n            } else {\r\n\r\n                if(formData.account_type == \"Staff\"){\r\n                    addAccount(formData, \"/admin/staff/create\"); \r\n                } else if(formData.account_type == \"Student\") {\r\n                    addAccount(formData, \"/admin/students/create\"); \r\n                }\r\n\r\n                setValidated(true);\r\n\r\n                formRef.current.reset();\r\n                setValidated(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const options = {\r\n        headers: { token: localStorage.token, \"Content-Type\": \"application/json\",}\r\n    };\r\n\r\n    async function addAccount(data, url) {\r\n        try {\r\n          const res = await fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n                token: localStorage.token,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(data),\r\n          });\r\n\r\n          const status = await res.statusText;\r\n\r\n          if(status == \"OK\"){\r\n            notifyEdit(\"Account Added!\");\r\n          }\r\n          else{\r\n            notifyError(\"Error, Account Already Exists.\");\r\n          }\r\n\r\n        } catch (err) {\r\n            notifyError(err.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Form ref={formRef} validated={validated} onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"account_type\">\r\n                    <Form.Label>Account Type</Form.Label>\r\n                    <Form.Control as=\"select\">\r\n                    <option>Staff</option>\r\n                    <option>Student</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"username\">\r\n                    <Form.Label>Username</Form.Label>\r\n                    <Form.Control type=\"text\" required/>\r\n                </Form.Group>\r\n\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Group controlId=\"password\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type=\"password\" required/>\r\n                        </Form.Group>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <Form.Group controlId=\"confirm_password\">\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <Form.Control type=\"password\" required/>\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Form.Row>\r\n \r\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Add</Button></div>\r\n            </Form>\r\n\r\n        </> \r\n    );\r\n}\r\n\r\nexport default AddAccount;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\ReportsTable.js",["265","266"],"import React, { useState } from \"react\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport filterFactory, { selectFilter  } from 'react-bootstrap-table2-filter';\r\n\r\n\r\n//TABLE SETUP\r\n\r\nconst selectStatusOptions = {\r\n    Complete: 'Complete',\r\n    Incomplete: 'Incomplete'\r\n};\r\n\r\nconst selectYearOptions = {\r\n    1: '1',\r\n    2: '2',\r\n    3: '3'\r\n};\r\n\r\n\r\nconst columns = [\r\n    { dataField: 'studentID', text: 'Student ID', csvText: 'Student ID', sort: true },\r\n    { dataField: 'name', text: 'Name', csvText: 'Name', sort: true },\r\n    { dataField: 'year', text: 'Year', csvText: 'Year', sort: true, \r\n        formatter: cell => selectYearOptions[cell],\r\n        filter: selectFilter({\r\n            options: selectYearOptions,\r\n        })    \r\n    },\r\n    { dataField: 'advisingDate', text: 'Advising Date', csvText: 'Advising Date', sort: true },\r\n    { dataField: 'status', text: 'Status', csvText: 'Status', sort: true,\r\n        formatter: cell => selectStatusOptions[cell],\r\n        filter: selectFilter({\r\n            options: selectStatusOptions,\r\n        })    \r\n    },\r\n]\r\n\r\nconst defaultSorted = [{\r\n    dataField: 'status',\r\n    order: 'asec'\r\n}];\r\n\r\nconst options = {\r\n    custom: true,\r\n    paginationSize: 5,\r\n    pageStartIndex: 1,\r\n    firstPageText: 'First',\r\n    prePageText: 'Back',\r\n    nextPageText: 'Next',\r\n    lastPageText: 'Last',\r\n    sizePerPage: 8,\r\n};\r\n\r\nconst selectRow = {\r\n    mode: 'checkbox',\r\n    clickToSelect: true\r\n};\r\n  \r\n\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nfunction ReportsTable({sessions, loading}) {\r\n\r\n    //TABLE\r\n\r\n    const table = ({ paginationProps, paginationTableProps }) => (\r\n        <>\r\n            <ToolkitProvider\r\n                    keyField=\"studentID\"\r\n                    data={ sessions }\r\n                    columns={ columns }\r\n                    search\r\n                    exportCSV={{\r\n                      fileName: 'report.csv',\r\n                      onlyExportFiltered: true, \r\n                      exportAll: false\r\n                    }}\r\n                >\r\n                {\r\n                    props => (\r\n                    <div>\r\n                        <SearchBar { ...props.searchProps } />\r\n                        <ClearSearchButton { ...props.searchProps } />\r\n                        <ExportCSVButton { ...props.csvProps }>Export CSV</ExportCSVButton>\r\n                        <BootstrapTable { ...props.baseProps } { ...paginationTableProps } defaultSorted={ defaultSorted } filter={ filterFactory()} hover/>\r\n                    </div>\r\n                    )\r\n                }\r\n            </ToolkitProvider>\r\n            <PaginationListStandalone { ...paginationProps } />\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n            <div class=\"d-flex justify-content-center\">\r\n                <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>\r\n            ) : (\r\n            <PaginationProvider pagination={paginationFactory(options)}>\r\n                { table }\r\n            </PaginationProvider>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ReportsTable;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\EditCourse.js",["267"],"import React, { useState } from \"react\";\r\nimport { Button, Form, Col } from \"react-bootstrap\";\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction EditCourse({setShow, row, refreshTable}) {\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    //Toast\r\n    const notifyEdit = (text) => toast.success(text);\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n\r\n        if (form.checkValidity() === false) {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n        }\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setValidated(true);\r\n\r\n        const formData = {\r\n            courseCode : (form.elements.courseCode.value).replace(/\\s+/g, ''),\r\n            courseTitle : form.elements.courseTitle.value,\r\n            credits : form.elements.credits.value,\r\n            semester : form.elements.semester.value,\r\n            level : form.elements.level.value,\r\n            prerequisites : form.elements.prerequisites.value,\r\n            description: form.elements.description.value\r\n        }\r\n\r\n        editCourse(formData, row.courseCode)\r\n    };\r\n\r\n    async function editCourse(data, code) {\r\n        try {\r\n          const res = await fetch(\"/courses/edit/\" + code, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                token: localStorage.getItem(\"token\"),\r\n                \"Content-type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(data),\r\n          });\r\n    \r\n          setShow(false);\r\n          refreshTable();\r\n          notifyEdit(data.courseCode + \" Edited!\")\r\n\r\n          const status = await res.statusText;\r\n          \r\n        } catch (err) {\r\n          console.error(err.message);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <Form.Group controlId=\"courseCode\">\r\n                    <Form.Label>Course Code</Form.Label>\r\n                    <Form.Control required type=\"text\" defaultValue={row.courseCode}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"courseTitle\">\r\n                    <Form.Label>Course Title</Form.Label>\r\n                    <Form.Control required type=\"text\" defaultValue={row.courseTitle}/>\r\n                </Form.Group>\r\n\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md=\"4\" controlId=\"credits\">\r\n                        <Form.Label>Credits</Form.Label>\r\n                        <Form.Control required as=\"select\" defaultValue={row.credits}>\r\n                            <option>1</option>\r\n                            <option>2</option>\r\n                            <option>3</option>\r\n                            <option>4</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} md=\"4\" controlId=\"semester\">\r\n                        <Form.Label>Semester</Form.Label>\r\n                        <Form.Control required as=\"select\" defaultValue={row.semester}>\r\n                            <option>1</option>\r\n                            <option>2</option>\r\n                            <option>3</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} md=\"4\" controlId=\"level\">\r\n                        <Form.Label>Level</Form.Label>\r\n                        <Form.Control required as=\"select\" defaultValue={row.level}>\r\n                            <option>I</option>\r\n                            <option>II</option>\r\n                            <option>III</option>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                </Form.Row>\r\n\r\n                <Form.Group controlId=\"prerequisites\">\r\n                    <Form.Label>Prerequisites</Form.Label>\r\n                    <Form.Control required type=\"text\" defaultValue={row.prerequisites}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"description\">\r\n                    <Form.Label>Description</Form.Label>\r\n                    <Form.Control required as=\"textarea\" rows={4} defaultValue={row.description}/>\r\n                </Form.Group>\r\n\r\n                <div class=\"float-right\"><Button type=\"submit\" class=\"btn btn-custom\">Submit</Button></div>\r\n            </Form>\r\n\r\n            <ToastContainer \r\n                pauseOnHover\r\n                position=\"bottom-right\"\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EditCourse;","C:\\Users\\18687\\Desktop\\myAdvisorDev\\myadvisor\\src\\components\\Staff\\NavigationBlock.js",[],{"ruleId":"268","replacedBy":"269"},{"ruleId":"270","replacedBy":"271"},{"ruleId":"272","severity":1,"message":"273","line":1,"column":50,"nodeType":"274","messageId":"275","endLine":1,"endColumn":58},{"ruleId":"272","severity":1,"message":"276","line":6,"column":8,"nodeType":"274","messageId":"275","endLine":6,"endColumn":28},{"ruleId":"272","severity":1,"message":"277","line":2,"column":27,"nodeType":"274","messageId":"275","endLine":2,"endColumn":33},{"ruleId":"278","severity":1,"message":"279","line":108,"column":13,"nodeType":"280","messageId":"281","endLine":108,"endColumn":15},{"ruleId":"278","severity":1,"message":"279","line":115,"column":41,"nodeType":"280","messageId":"281","endLine":115,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":117,"column":49,"nodeType":"280","messageId":"281","endLine":117,"endColumn":51},{"ruleId":"278","severity":1,"message":"279","line":133,"column":49,"nodeType":"280","messageId":"281","endLine":133,"endColumn":51},{"ruleId":"278","severity":1,"message":"279","line":135,"column":49,"nodeType":"280","messageId":"281","endLine":135,"endColumn":51},{"ruleId":"278","severity":1,"message":"279","line":149,"column":41,"nodeType":"280","messageId":"281","endLine":149,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":163,"column":41,"nodeType":"280","messageId":"281","endLine":163,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":177,"column":41,"nodeType":"280","messageId":"281","endLine":177,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":191,"column":41,"nodeType":"280","messageId":"281","endLine":191,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":205,"column":41,"nodeType":"280","messageId":"281","endLine":205,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":220,"column":41,"nodeType":"280","messageId":"281","endLine":220,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":242,"column":41,"nodeType":"280","messageId":"281","endLine":242,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":256,"column":41,"nodeType":"280","messageId":"281","endLine":256,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":270,"column":41,"nodeType":"280","messageId":"281","endLine":270,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":284,"column":41,"nodeType":"280","messageId":"281","endLine":284,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":298,"column":41,"nodeType":"280","messageId":"281","endLine":298,"endColumn":43},{"ruleId":"278","severity":1,"message":"279","line":312,"column":41,"nodeType":"280","messageId":"281","endLine":312,"endColumn":43},{"ruleId":"272","severity":1,"message":"282","line":6,"column":8,"nodeType":"274","messageId":"275","endLine":6,"endColumn":21},{"ruleId":"272","severity":1,"message":"283","line":10,"column":12,"nodeType":"274","messageId":"275","endLine":10,"endColumn":19},{"ruleId":"272","severity":1,"message":"284","line":11,"column":12,"nodeType":"274","messageId":"275","endLine":11,"endColumn":18},{"ruleId":"272","severity":1,"message":"285","line":16,"column":12,"nodeType":"274","messageId":"275","endLine":16,"endColumn":22},{"ruleId":"286","severity":1,"message":"287","line":168,"column":77,"nodeType":"288","messageId":"289","endLine":168,"endColumn":79},{"ruleId":"286","severity":1,"message":"287","line":174,"column":77,"nodeType":"288","messageId":"289","endLine":174,"endColumn":79},{"ruleId":"286","severity":1,"message":"287","line":180,"column":77,"nodeType":"288","messageId":"289","endLine":180,"endColumn":79},{"ruleId":"286","severity":1,"message":"287","line":186,"column":77,"nodeType":"288","messageId":"289","endLine":186,"endColumn":79},{"ruleId":"278","severity":1,"message":"279","line":72,"column":38,"nodeType":"280","messageId":"281","endLine":72,"endColumn":40},{"ruleId":"278","severity":1,"message":"279","line":75,"column":38,"nodeType":"280","messageId":"281","endLine":75,"endColumn":40},{"ruleId":"272","severity":1,"message":"290","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":26},{"ruleId":"291","severity":1,"message":"292","line":27,"column":5,"nodeType":"274","endLine":27,"endColumn":14,"suggestions":"293"},{"ruleId":"278","severity":1,"message":"294","line":31,"column":50,"nodeType":"280","messageId":"281","endLine":31,"endColumn":52},{"ruleId":"278","severity":1,"message":"279","line":47,"column":44,"nodeType":"280","messageId":"281","endLine":47,"endColumn":46},{"ruleId":"272","severity":1,"message":"295","line":58,"column":20,"nodeType":"274","messageId":"275","endLine":58,"endColumn":30},{"ruleId":"272","severity":1,"message":"290","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":26},{"ruleId":"272","severity":1,"message":"296","line":4,"column":10,"nodeType":"274","messageId":"275","endLine":4,"endColumn":19},{"ruleId":"278","severity":1,"message":"279","line":24,"column":36,"nodeType":"280","messageId":"281","endLine":24,"endColumn":38},{"ruleId":"272","severity":1,"message":"290","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":26},{"ruleId":"272","severity":1,"message":"296","line":2,"column":10,"nodeType":"274","messageId":"275","endLine":2,"endColumn":19},{"ruleId":"272","severity":1,"message":"297","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":25},{"ruleId":"272","severity":1,"message":"273","line":2,"column":16,"nodeType":"274","messageId":"275","endLine":2,"endColumn":24},{"ruleId":"272","severity":1,"message":"298","line":44,"column":17,"nodeType":"274","messageId":"275","endLine":44,"endColumn":20},{"ruleId":"299","severity":1,"message":"300","line":5,"column":1,"nodeType":"301","endLine":9,"endColumn":3},{"ruleId":"272","severity":1,"message":"296","line":1,"column":27,"nodeType":"274","messageId":"275","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"302","line":6,"column":22,"nodeType":"274","messageId":"275","endLine":6,"endColumn":33},{"ruleId":"272","severity":1,"message":"303","line":11,"column":21,"nodeType":"274","messageId":"275","endLine":11,"endColumn":31},{"ruleId":"272","severity":1,"message":"304","line":1,"column":8,"nodeType":"274","messageId":"275","endLine":1,"endColumn":13},{"ruleId":"272","severity":1,"message":"304","line":1,"column":8,"nodeType":"274","messageId":"275","endLine":1,"endColumn":13},{"ruleId":"291","severity":1,"message":"305","line":23,"column":8,"nodeType":"306","endLine":23,"endColumn":10,"suggestions":"307"},{"ruleId":"272","severity":1,"message":"304","line":1,"column":8,"nodeType":"274","messageId":"275","endLine":1,"endColumn":13},{"ruleId":"291","severity":1,"message":"308","line":23,"column":8,"nodeType":"306","endLine":23,"endColumn":10,"suggestions":"309"},{"ruleId":"272","severity":1,"message":"304","line":1,"column":8,"nodeType":"274","messageId":"275","endLine":1,"endColumn":13},{"ruleId":"272","severity":1,"message":"290","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":26},{"ruleId":"272","severity":1,"message":"296","line":3,"column":10,"nodeType":"274","messageId":"275","endLine":3,"endColumn":19},{"ruleId":"278","severity":1,"message":"294","line":124,"column":92,"nodeType":"280","messageId":"281","endLine":124,"endColumn":94},{"ruleId":"272","severity":1,"message":"304","line":1,"column":8,"nodeType":"274","messageId":"275","endLine":1,"endColumn":13},{"ruleId":"272","severity":1,"message":"310","line":57,"column":17,"nodeType":"274","messageId":"275","endLine":57,"endColumn":23},{"ruleId":"272","severity":1,"message":"311","line":57,"column":12,"nodeType":"274","messageId":"275","endLine":57,"endColumn":26},{"ruleId":"272","severity":1,"message":"312","line":61,"column":11,"nodeType":"274","messageId":"275","endLine":61,"endColumn":21},{"ruleId":"278","severity":1,"message":"294","line":92,"column":32,"nodeType":"280","messageId":"281","endLine":92,"endColumn":34},{"ruleId":"278","severity":1,"message":"279","line":104,"column":32,"nodeType":"280","messageId":"281","endLine":104,"endColumn":34},{"ruleId":"291","severity":1,"message":"313","line":114,"column":8,"nodeType":"306","endLine":114,"endColumn":10,"suggestions":"314"},{"ruleId":"272","severity":1,"message":"315","line":5,"column":17,"nodeType":"274","messageId":"275","endLine":5,"endColumn":23},{"ruleId":"272","severity":1,"message":"312","line":41,"column":11,"nodeType":"274","messageId":"275","endLine":41,"endColumn":21},{"ruleId":"272","severity":1,"message":"296","line":1,"column":27,"nodeType":"274","messageId":"275","endLine":1,"endColumn":36},{"ruleId":"272","severity":1,"message":"316","line":4,"column":35,"nodeType":"274","messageId":"275","endLine":4,"endColumn":44},{"ruleId":"272","severity":1,"message":"317","line":6,"column":17,"nodeType":"274","messageId":"275","endLine":6,"endColumn":21},{"ruleId":"272","severity":1,"message":"318","line":6,"column":23,"nodeType":"274","messageId":"275","endLine":6,"endColumn":26},{"ruleId":"272","severity":1,"message":"312","line":82,"column":11,"nodeType":"274","messageId":"275","endLine":82,"endColumn":21},{"ruleId":"272","severity":1,"message":"310","line":57,"column":17,"nodeType":"274","messageId":"275","endLine":57,"endColumn":23},{"ruleId":"272","severity":1,"message":"319","line":4,"column":10,"nodeType":"274","messageId":"275","endLine":4,"endColumn":24},{"ruleId":"272","severity":1,"message":"320","line":16,"column":15,"nodeType":"274","messageId":"275","endLine":16,"endColumn":18},{"ruleId":"278","severity":1,"message":"294","line":33,"column":34,"nodeType":"280","messageId":"281","endLine":33,"endColumn":36},{"ruleId":"278","severity":1,"message":"279","line":37,"column":42,"nodeType":"280","messageId":"281","endLine":37,"endColumn":44},{"ruleId":"278","severity":1,"message":"279","line":39,"column":49,"nodeType":"280","messageId":"281","endLine":39,"endColumn":51},{"ruleId":"272","severity":1,"message":"321","line":51,"column":11,"nodeType":"274","messageId":"275","endLine":51,"endColumn":18},{"ruleId":"278","severity":1,"message":"279","line":68,"column":21,"nodeType":"280","messageId":"281","endLine":68,"endColumn":23},{"ruleId":"272","severity":1,"message":"297","line":1,"column":17,"nodeType":"274","messageId":"275","endLine":1,"endColumn":25},{"ruleId":"272","severity":1,"message":"322","line":56,"column":7,"nodeType":"274","messageId":"275","endLine":56,"endColumn":16},{"ruleId":"272","severity":1,"message":"310","line":53,"column":17,"nodeType":"274","messageId":"275","endLine":53,"endColumn":23},"no-native-reassign",["323"],"no-negated-in-lhs",["324"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'PermanentDrawerRight' is defined but never used.","'Router' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CourseDetails' is defined but never used.","'clicked' is assigned a value but never used.","'course' is assigned a value but never used.","'chosenList' is assigned a value but never used.","array-callback-return","Array.from() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Component' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setUploaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props, processed, details.gpa, details.length, details.degree, details.progress, details.credits, programmes, determineCourses] as a second argument to the useEffect Hook.",["325"],"Expected '!==' and instead saw '!='.","'getCourses' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'res' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'setSessions' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'React' is defined but never used.","React Hook useEffect has a missing dependency: 'getDetails'. Either include it or remove the dependency array.","ArrayExpression",["326"],"React Hook useEffect has a missing dependency: 'getCourses'. Either include it or remove the dependency array.",["327"],"'status' is assigned a value but never used.","'studentCourses' is assigned a value but never used.","'handleShow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStudentCourses'. Either include it or remove the dependency array.",["328"],"'Button' is defined but never used.","'CSVExport' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'ToastContainer' is defined but never used.","'url' is assigned a value but never used.","'options' is assigned a value but never used.","'selectRow' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},"Add dependencies array: [props, processed, details.gpa, details.length, details.degree, details.progress, details.credits, programmes, determineCourses]",{"range":"337","text":"338"},"Update the dependencies array to be: [getDetails]",{"range":"339","text":"340"},"Update the dependencies array to be: [getCourses]",{"range":"341","text":"342"},"Update the dependencies array to be: [getStudentCourses]",{"range":"343","text":"344"},[1957,1957],", [props, processed, details.gpa, details.length, details.degree, details.progress, details.credits, programmes, determineCourses]",[604,606],"[getDetails]",[613,615],"[getCourses]",[3389,3391],"[getStudentCourses]"]